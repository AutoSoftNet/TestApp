com.android.zcardcapture.ViewBracketsView -> com.android.zcardcapture.ViewBracketsView:
    java.lang.String a -> a
    android.graphics.Paint b -> b
    android.graphics.Bitmap c -> c
    int d -> d
    int e -> e
    int f -> f
    android.graphics.Rect g -> g
    void onDraw(android.graphics.Canvas) -> onDraw
    android.graphics.Rect a(int,int) -> a
com.android.zcardcapture.ViewfinderView -> com.android.zcardcapture.ViewfinderView:
    int[] a -> a
    android.graphics.Paint b -> b
    android.graphics.Bitmap c -> c
    int d -> d
    int e -> e
    int f -> f
    int g -> g
    int h -> h
    android.graphics.Rect i -> i
    android.graphics.Rect j -> j
    boolean k -> k
    boolean l -> l
    boolean m -> m
    boolean n -> n
    boolean o -> o
    void a(boolean) -> a
    void b(boolean) -> b
    void c(boolean) -> c
    void d(boolean) -> d
    void e(boolean) -> e
    void a(android.graphics.Rect) -> a
    void b(android.graphics.Rect) -> b
    void onDraw(android.graphics.Canvas) -> onDraw
    void a() -> a
com.cssn.mobilesdk.AppContext -> com.cssn.mobilesdk.AppContext:
    java.lang.String a -> a
    com.cssn.mobilesdk.AppContext b -> b
    boolean c -> c
    com.cssn.mobilesdk.TaskState d -> d
    com.cssn.mobilesdk.TaskState e -> e
    com.cssn.mobilesdk.TaskState f -> f
    com.cssn.mobilesdk.TaskState g -> g
    android.hardware.Camera h -> h
    com.cssn.mobilesdk.AppContext a() -> a
    boolean b() -> b
    void a(boolean) -> a
    com.cssn.mobilesdk.TaskState c() -> c
    void a(com.cssn.mobilesdk.TaskState) -> a
    com.cssn.mobilesdk.TaskState d() -> d
    void b(com.cssn.mobilesdk.TaskState) -> b
    com.cssn.mobilesdk.TaskState e() -> e
    void c(com.cssn.mobilesdk.TaskState) -> c
    com.cssn.mobilesdk.TaskState f() -> f
    void d(com.cssn.mobilesdk.TaskState) -> d
    android.hardware.Camera g() -> g
    void h() -> h
com.cssn.mobilesdk.BackgroundStateListener -> com.cssn.mobilesdk.BackgroundStateListener:
    java.util.Timer b -> b
    java.util.TimerTask c -> c
    boolean a -> a
    long d -> d
    com.cssn.mobilesdk.BackgroundStateListener e -> e
    com.cssn.mobilesdk.BackgroundStateListener a() -> a
    void b() -> b
    void c() -> c
com.cssn.mobilesdk.BackgroundStateListener$1 -> com.cssn.mobilesdk.BackgroundStateListener$1:
    com.cssn.mobilesdk.BackgroundStateListener a -> a
    void run() -> run
com.cssn.mobilesdk.CSSNMobileSDKController -> com.cssn.mobilesdk.CSSNMobileSDKController:
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    int d -> d
    com.cssn.mobilesdk.WebServiceListener e -> e
    com.cssn.mobilesdk.CardCroppingListener f -> f
    android.app.Activity g -> g
    com.cssn.mobilesdk.LicenseDetails h -> h
    int i -> i
    int j -> j
    int k -> k
    int l -> l
    boolean m -> m
    com.cssn.mobilesdk.detect.InitialDescriptor n -> n
    com.cssn.mobilesdk.detect.FinalDescriptor o -> o
    com.cssn.mobilesdk.CSSNMobileSDKController p -> p
    java.lang.String[] q -> q
    java.lang.String r -> r
    int s -> s
    int t -> t
    int u -> u
    int v -> v
    android.graphics.drawable.Drawable w -> w
    void setPdf417BarcodeDialogWaitingBarcode(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String) -> setPdf417BarcodeDialogWaitingBarcode
    void setPdf417BarcodeImageDrawable(android.graphics.drawable.Drawable) -> setPdf417BarcodeImageDrawable
    com.cssn.mobilesdk.CSSNMobileSDKController getInstance(android.app.Activity,java.lang.String) -> getInstance
    com.cssn.mobilesdk.CSSNMobileSDKController getInstance(android.app.Activity) -> getInstance
    com.cssn.mobilesdk.CSSNMobileSDKController getInstance() -> getInstance
    void setCloudUrl(java.lang.String) -> setCloudUrl
    void setWatermarkText(java.lang.String,int,int,int,int) -> setWatermarkText
    void setLicensekey(java.lang.String) -> setLicensekey
    void setWebServiceListener(com.cssn.mobilesdk.WebServiceListener) -> setWebServiceListener
    void setWidth(int) -> setWidth
    void setHeight(int) -> setHeight
    com.cssn.mobilesdk.CardCroppingListener getCardCroppingListener() -> getCardCroppingListener
    void setCardCroppingListener(com.cssn.mobilesdk.CardCroppingListener) -> setCardCroppingListener
    com.cssn.mobilesdk.TaskState getValidationState() -> getValidationState
    com.cssn.mobilesdk.TaskState getActivationState() -> getActivationState
    com.cssn.mobilesdk.TaskState getCroppingState() -> getCroppingState
    com.cssn.mobilesdk.TaskState getCardProcessingState() -> getCardProcessingState
    void reinitTaskStates() -> reinitTaskStates
    void setInitialMessageDescriptor(java.lang.Integer) -> setInitialMessageDescriptor
    void setFinalMessageDescriptor(java.lang.Integer) -> setFinalMessageDescriptor
    com.cssn.mobilesdk.detect.InitialDescriptor getInitialDescriptor() -> getInitialDescriptor
    com.cssn.mobilesdk.detect.FinalDescriptor getFinalDescriptor() -> getFinalDescriptor
    void callProcessImageServices(android.graphics.Bitmap,android.graphics.Bitmap,java.lang.String,android.app.Activity,com.cssn.mobilesdk.ProcessImageRequestOptions) -> callProcessImageServices
    void callActivateLicenseKeyService(java.lang.String) -> callActivateLicenseKeyService
    void callValidateLicenseKeyService(java.lang.String) -> callValidateLicenseKeyService
    void showCameraInterface(android.app.Activity,int,boolean) -> showCameraInterface
    void a(android.app.Activity,int) -> a
    void b(android.app.Activity,int) -> b
    void a(android.app.Activity) -> a
    java.lang.String[] a() -> a
    android.app.Activity getContext() -> getContext
    void setContext(android.app.Activity) -> setContext
    java.lang.String getWatermarkText() -> getWatermarkText
    int getWatermarkMarginLeft() -> getWatermarkMarginLeft
    int getWatermarkMarginTop() -> getWatermarkMarginTop
    int getWatermarkMarginRight() -> getWatermarkMarginRight
    int getWatermarkMarginBottom() -> getWatermarkMarginBottom
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    void a(java.lang.String,int) -> a
    void b(java.lang.String,int) -> b
    void c(java.lang.String,int) -> c
    void b() -> b
    boolean c() -> c
    com.cssn.mobilesdk.CSSNMobileSDKController$CodeMessageValue a(java.lang.String) -> a
    boolean a(int) -> a
    boolean d() -> d
    boolean e() -> e
    int a(com.cssn.mobilesdk.CSSNMobileSDKController) -> a
    java.lang.String b(com.cssn.mobilesdk.CSSNMobileSDKController) -> b
    void a(com.cssn.mobilesdk.CSSNMobileSDKController,java.lang.String,int) -> a
    java.lang.String c(com.cssn.mobilesdk.CSSNMobileSDKController) -> c
    void b(com.cssn.mobilesdk.CSSNMobileSDKController,java.lang.String,int) -> b
    void c(com.cssn.mobilesdk.CSSNMobileSDKController,java.lang.String,int) -> c
com.cssn.mobilesdk.CSSNMobileSDKController$1 -> com.cssn.mobilesdk.CSSNMobileSDKController$1:
    android.app.Activity a -> a
    android.graphics.Bitmap b -> b
    android.graphics.Bitmap c -> c
    java.lang.String d -> d
    java.lang.String e -> e
    com.cssn.mobilesdk.CSSNMobileSDKController f -> f
    void run() -> run
com.cssn.mobilesdk.CSSNMobileSDKController$1$1 -> com.cssn.mobilesdk.CSSNMobileSDKController$1$1:
    com.cssn.mobilesdk.CSSNMobileSDKController$1 a -> a
    void a(java.lang.String,int) -> a
com.cssn.mobilesdk.CSSNMobileSDKController$2 -> com.cssn.mobilesdk.CSSNMobileSDKController$2:
    java.lang.String a -> a
    com.cssn.mobilesdk.CSSNMobileSDKController b -> b
    void run() -> run
com.cssn.mobilesdk.CSSNMobileSDKController$2$1 -> com.cssn.mobilesdk.CSSNMobileSDKController$2$1:
    com.cssn.mobilesdk.CSSNMobileSDKController$2 a -> a
    void a(java.lang.String,int) -> a
com.cssn.mobilesdk.CSSNMobileSDKController$3 -> com.cssn.mobilesdk.CSSNMobileSDKController$3:
    com.cssn.mobilesdk.CSSNMobileSDKController a -> a
    void a(java.lang.String,int) -> a
com.cssn.mobilesdk.CSSNMobileSDKController$CodeMessageValue -> com.cssn.mobilesdk.CSSNMobileSDKController$CodeMessageValue:
    java.lang.String a -> a
    int b -> b
com.cssn.mobilesdk.Card -> com.cssn.mobilesdk.Card:
    java.lang.String a -> a
    float DRIVERS_LICENSE_CARD_ASPECT_RATIO -> DRIVERS_LICENSE_CARD_ASPECT_RATIO
    float PASSPORT_CARD_ASPECT_RATIO -> PASSPORT_CARD_ASPECT_RATIO
    java.lang.String getErrorCard() -> getErrorCard
    void setErrorCard(java.lang.String) -> setErrorCard
    boolean isEmpty() -> isEmpty
com.cssn.mobilesdk.CardCroppingListener -> com.cssn.mobilesdk.CardCroppingListener:
    void onCardCroppingStart(android.app.Activity) -> onCardCroppingStart
    void onCardCroppingFinish(android.graphics.Bitmap) -> onCardCroppingFinish
    void onPDF417Finish(java.lang.String) -> onPDF417Finish
com.cssn.mobilesdk.CardType -> com.cssn.mobilesdk.CardType:
    int DRIVERS_LICENSE -> DRIVERS_LICENSE
    int MEDICAL_INSURANCE -> MEDICAL_INSURANCE
    int PASSPORT -> PASSPORT
    int DL_DUPLEX -> DL_DUPLEX
com.cssn.mobilesdk.DriversLicenseCard -> com.cssn.mobilesdk.DriversLicenseCard:
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    java.lang.String e -> e
    java.lang.String f -> f
    java.lang.String g -> g
    java.lang.String h -> h
    java.lang.String i -> i
    java.lang.String j -> j
    java.lang.String k -> k
    java.lang.String l -> l
    java.lang.String m -> m
    java.lang.String n -> n
    java.lang.String o -> o
    java.lang.String p -> p
    java.lang.String q -> q
    java.lang.String r -> r
    java.lang.String s -> s
    java.lang.String t -> t
    java.lang.String u -> u
    java.lang.String v -> v
    java.lang.String w -> w
    java.lang.String x -> x
    java.lang.String y -> y
    java.lang.String z -> z
    java.lang.String A -> A
    java.lang.String B -> B
    java.lang.String C -> C
    java.lang.String D -> D
    java.lang.String E -> E
    java.lang.String F -> F
    java.lang.String G -> G
    java.lang.String H -> H
    java.lang.String I -> I
    java.lang.String J -> J
    java.lang.String K -> K
    java.lang.String L -> L
    java.lang.String M -> M
    java.lang.String N -> N
    java.lang.String O -> O
    java.lang.String P -> P
    java.lang.String Q -> Q
    java.lang.String R -> R
    java.lang.String S -> S
    java.lang.String T -> T
    java.lang.String U -> U
    java.lang.String V -> V
    java.lang.String W -> W
    java.lang.String X -> X
    java.lang.String Y -> Y
    java.lang.String Z -> Z
    java.lang.String aa -> aa
    java.lang.String ab -> ab
    java.lang.String ac -> ac
    java.lang.String ad -> ad
    java.lang.String ae -> ae
    java.lang.String af -> af
    java.lang.String ag -> ag
    java.lang.String ah -> ah
    java.lang.String ai -> ai
    java.lang.String aj -> aj
    byte[] ak -> ak
    byte[] al -> al
    byte[] am -> am
    android.graphics.Bitmap an -> an
    android.graphics.Bitmap ao -> ao
    android.graphics.Bitmap ap -> ap
    boolean aq -> aq
    boolean ar -> ar
    boolean isAddressVerified() -> isAddressVerified
    void setAddressVerified(boolean) -> setAddressVerified
    java.lang.String getName() -> getName
    java.lang.String getLicenceID() -> getLicenceID
    java.lang.String getAddress() -> getAddress
    java.lang.String getCity() -> getCity
    java.lang.String getZip() -> getZip
    java.lang.String getState() -> getState
    java.lang.String getIdCountry() -> getIdCountry
    java.lang.String getEyeColor() -> getEyeColor
    java.lang.String getHair() -> getHair
    java.lang.String getHeight() -> getHeight
    java.lang.String getWeight() -> getWeight
    java.lang.String getLicenceClass() -> getLicenceClass
    java.lang.String getRestriction() -> getRestriction
    java.lang.String getSex() -> getSex
    java.lang.String getDateOfBirth4() -> getDateOfBirth4
    java.lang.String getIssueDate4() -> getIssueDate4
    java.lang.String getExpirationDate4() -> getExpirationDate4
    java.lang.String getAddress2() -> getAddress2
    java.lang.String getAddress3() -> getAddress3
    java.lang.String getAddress4() -> getAddress4
    java.lang.String getAddress5() -> getAddress5
    java.lang.String getAddress6() -> getAddress6
    java.lang.String getAudit() -> getAudit
    java.lang.String getCSC() -> getCSC
    java.lang.String getCountryShort() -> getCountryShort
    java.lang.String getCounty() -> getCounty
    java.lang.String getDateOfBirth() -> getDateOfBirth
    java.lang.String getDateOfBirthLocal() -> getDateOfBirthLocal
    java.lang.String getDocType() -> getDocType
    java.lang.String getEndorsements() -> getEndorsements
    java.lang.String getExpirationDate() -> getExpirationDate
    java.lang.String getFatherName() -> getFatherName
    java.lang.String getFee() -> getFee
    java.lang.String getIsBarcodeRead() -> getIsBarcodeRead
    java.lang.String getIsIDVerified() -> getIsIDVerified
    java.lang.String getIsOcrRead() -> getIsOcrRead
    java.lang.String getIssueDate() -> getIssueDate
    java.lang.String getIssueDateLocal() -> getIssueDateLocal
    java.lang.String getMotherName() -> getMotherName
    java.lang.String getNameLast() -> getNameLast
    java.lang.String getNameLast1() -> getNameLast1
    java.lang.String getNameLast2() -> getNameLast2
    java.lang.String getNameMiddle() -> getNameMiddle
    java.lang.String getNameSuffix() -> getNameSuffix
    java.lang.String getNationality() -> getNationality
    java.lang.String getOriginal() -> getOriginal
    java.lang.String getPlaceOfBirth() -> getPlaceOfBirth
    java.lang.String getPlaceOfIssue() -> getPlaceOfIssue
    java.lang.String getResults2D() -> getResults2D
    java.lang.String getSigNum() -> getSigNum
    java.lang.String getSocialSecurity() -> getSocialSecurity
    java.lang.String getText1() -> getText1
    java.lang.String getText2() -> getText2
    java.lang.String getText3() -> getText3
    java.lang.String getType() -> getType
    java.lang.String getLicense() -> getLicense
    java.lang.String getNameFirst() -> getNameFirst
    java.lang.String getNameFirst_NonMRZ() -> getNameFirst_NonMRZ
    java.lang.String getNameLast_NonMRZ() -> getNameLast_NonMRZ
    java.lang.String getNameMiddle_NonMRZ() -> getNameMiddle_NonMRZ
    java.lang.String getNameSuffix_NonMRZ() -> getNameSuffix_NonMRZ
    android.graphics.Bitmap getFaceImage() -> getFaceImage
    android.graphics.Bitmap getSignImage() -> getSignImage
    android.graphics.Bitmap getReformatImage() -> getReformatImage
    com.cssn.mobilesdk.DriversLicenseCard licenseCardWithJson(java.lang.String) -> licenseCardWithJson
    boolean isEmpty() -> isEmpty
    boolean isAddressCorrected() -> isAddressCorrected
    void setAddressCorrected(boolean) -> setAddressCorrected
com.cssn.mobilesdk.DriversLicenseCardDuplex -> com.cssn.mobilesdk.DriversLicenseCardDuplex:
    java.lang.String a -> a
    java.lang.String d -> b
    java.lang.String e -> c
    java.lang.String f -> d
    java.lang.String g -> e
    java.lang.String h -> f
    java.lang.String i -> g
    java.lang.String j -> h
    java.lang.String k -> i
    java.lang.String l -> j
    java.lang.String m -> k
    java.lang.String o -> l
    java.lang.String p -> m
    java.lang.String q -> n
    java.lang.String r -> o
    boolean I -> p
    boolean J -> q
    boolean K -> r
    java.lang.String O -> s
    java.lang.String R -> t
    java.lang.String S -> u
    java.lang.String ae -> v
    java.lang.String af -> w
    java.lang.Integer ak -> x
    byte[] al -> y
    byte[] am -> z
    byte[] an -> A
    android.graphics.Bitmap ao -> B
    android.graphics.Bitmap ap -> C
    android.graphics.Bitmap aq -> D
    boolean ar -> E
    boolean as -> F
    boolean isAddressVerified() -> a
    java.lang.String getAddress() -> b
    java.lang.String getCity() -> c
    java.lang.String getZip() -> d
    java.lang.String getState() -> e
    java.lang.String getIdCountry() -> f
    java.lang.String getEyeColor() -> g
    java.lang.String getHair() -> h
    java.lang.String getHeight() -> i
    java.lang.String getWeight() -> j
    java.lang.String getLicenceClass() -> k
    java.lang.String getSex() -> l
    java.lang.String getDateOfBirth4() -> m
    java.lang.String getIssueDate4() -> n
    java.lang.String getExpirationDate4() -> o
    boolean getIsBarcodeRead() -> p
    boolean getIsIDVerified() -> q
    boolean getIsOcrRead() -> r
    java.lang.String getNameLast() -> s
    java.lang.String getNameMiddle() -> t
    java.lang.String getNameSuffix() -> u
    java.lang.String getLicense() -> v
    java.lang.String getNameFirst() -> w
    java.lang.Integer getDocumentVerificationConfidenceRating() -> x
    android.graphics.Bitmap getFaceImage() -> y
    android.graphics.Bitmap getSignImage() -> z
    android.graphics.Bitmap getReformatImage() -> A
    com.cssn.mobilesdk.DriversLicenseCardDuplex licenseCardWithJson(java.lang.String) -> a
    boolean isEmpty() -> isEmpty
    boolean isAddressCorrected() -> B
com.cssn.mobilesdk.ErrorType -> com.cssn.mobilesdk.ErrorType:
    int CSSNRequestErrorNoneError -> CSSNRequestErrorNoneError
    int CSSNRequestErrorCouldNotReachServer -> CSSNRequestErrorCouldNotReachServer
    int CSSNRequestErrorUnableToAuthenticate -> CSSNRequestErrorUnableToAuthenticate
    int CSSNRequestErrorInternalServerError -> CSSNRequestErrorInternalServerError
    int CSSNRequestErrorUnknown -> CSSNRequestErrorUnknown
    int CSSNRequestErrorTimedOut -> CSSNRequestErrorTimedOut
    int CSSNRequestErrorWebResponse -> CSSNRequestErrorWebResponse
    int CSSNProcessingErrorUnableToProcess -> CSSNProcessingErrorUnableToProcess
    int CSSNProcessingErrorAutoDetectState -> CSSNProcessingErrorAutoDetectState
com.cssn.mobilesdk.LicenseActivationDetails -> com.cssn.mobilesdk.LicenseActivationDetails:
    java.lang.String a -> a
    java.lang.String b -> b
    int c -> c
    boolean d -> d
    java.lang.String getWebResponseDescription() -> getWebResponseDescription
    void setWebResponseDescription(java.lang.String) -> setWebResponseDescription
    java.lang.String getIsLicenseKeyActivatedDescscription() -> getIsLicenseKeyActivatedDescscription
    void setIsLicenseKeyActivatedDescscription(java.lang.String) -> setIsLicenseKeyActivatedDescscription
    int getWebResponseCode() -> getWebResponseCode
    void setWebResponseCode(int) -> setWebResponseCode
    boolean isIsLicenseKeyActivated() -> isIsLicenseKeyActivated
    void setIsLicenseKeyActivated(boolean) -> setIsLicenseKeyActivated
com.cssn.mobilesdk.LicenseDetails -> com.cssn.mobilesdk.LicenseDetails:
    boolean a -> a
    boolean b -> b
    boolean c -> c
    java.lang.String d -> d
    java.lang.String e -> e
    java.lang.String f -> f
    boolean g -> g
    java.lang.String h -> h
    java.lang.String i -> i
    boolean j -> j
    java.lang.String k -> k
    boolean l -> l
    boolean m -> m
    java.lang.String n -> n
    java.lang.String o -> o
    java.lang.String p -> p
    java.lang.String q -> q
    java.lang.String r -> r
    java.lang.String s -> s
    boolean accountStatus() -> accountStatus
    void setAccountStatus(boolean) -> setAccountStatus
    boolean isAddressVerification() -> isAddressVerification
    void setAddressVerification(boolean) -> setAddressVerification
    boolean isBarcodeAllowed() -> isBarcodeAllowed
    void setBarcodeAllowed(boolean) -> setBarcodeAllowed
    java.lang.String getBarcodeProcesses() -> getBarcodeProcesses
    void setBarcodeProcesses(java.lang.String) -> setBarcodeProcesses
    java.lang.String getCompanyName() -> getCompanyName
    void setCompanyName(java.lang.String) -> setCompanyName
    java.lang.String getCustomerName() -> getCustomerName
    void setCustomerName(java.lang.String) -> setCustomerName
    boolean isDriversLicenseAllowed() -> isDriversLicenseAllowed
    void setDriversLicenseAllowed(boolean) -> setDriversLicenseAllowed
    java.lang.String getDriversLicenseProcesses() -> getDriversLicenseProcesses
    void setDriversLicenseProcesses(java.lang.String) -> setDriversLicenseProcesses
    java.lang.String getEmail() -> getEmail
    void setEmail(java.lang.String) -> setEmail
    boolean isInsuranceAllowed() -> isInsuranceAllowed
    void setInsuranceAllowed(boolean) -> setInsuranceAllowed
    java.lang.String getInsuranceProcesses() -> getInsuranceProcesses
    void setInsuranceProcesses(java.lang.String) -> setInsuranceProcesses
    boolean isLicenseKeyActivated() -> isLicenseKeyActivated
    void setLicenseKeyActivated(boolean) -> setLicenseKeyActivated
    boolean isPassportAllowed() -> isPassportAllowed
    void setPassportAllowed(boolean) -> setPassportAllowed
    java.lang.String getPassportProcesses() -> getPassportProcesses
    void setPassportProcesses(java.lang.String) -> setPassportProcesses
    java.lang.String getResponseCodeAuthorization() -> getResponseCodeAuthorization
    void setResponseCodeAuthorization(java.lang.String) -> setResponseCodeAuthorization
    java.lang.String getResponseMessageAuthorization() -> getResponseMessageAuthorization
    void setResponseMessageAuthorization(java.lang.String) -> setResponseMessageAuthorization
    java.lang.String getSoftwareProvider() -> getSoftwareProvider
    void setSoftwareProvider(java.lang.String) -> setSoftwareProvider
    java.lang.String getWebResponseCode() -> getWebResponseCode
    void setWebResponseCode(java.lang.String) -> setWebResponseCode
    java.lang.String getWebResponseDescription() -> getWebResponseDescription
    void setWebResponseDescription(java.lang.String) -> setWebResponseDescription
    boolean a(com.cssn.mobilesdk.LicenseDetails,boolean) -> a
    boolean a(com.cssn.mobilesdk.LicenseDetails) -> a
    boolean b(com.cssn.mobilesdk.LicenseDetails,boolean) -> b
    boolean b(com.cssn.mobilesdk.LicenseDetails) -> b
    boolean c(com.cssn.mobilesdk.LicenseDetails,boolean) -> c
    boolean c(com.cssn.mobilesdk.LicenseDetails) -> c
    java.lang.String a(com.cssn.mobilesdk.LicenseDetails,java.lang.String) -> a
    java.lang.String d(com.cssn.mobilesdk.LicenseDetails) -> d
    java.lang.String b(com.cssn.mobilesdk.LicenseDetails,java.lang.String) -> b
    java.lang.String e(com.cssn.mobilesdk.LicenseDetails) -> e
    java.lang.String c(com.cssn.mobilesdk.LicenseDetails,java.lang.String) -> c
    java.lang.String f(com.cssn.mobilesdk.LicenseDetails) -> f
    boolean d(com.cssn.mobilesdk.LicenseDetails,boolean) -> d
    boolean g(com.cssn.mobilesdk.LicenseDetails) -> g
    java.lang.String d(com.cssn.mobilesdk.LicenseDetails,java.lang.String) -> d
    java.lang.String h(com.cssn.mobilesdk.LicenseDetails) -> h
    java.lang.String e(com.cssn.mobilesdk.LicenseDetails,java.lang.String) -> e
    java.lang.String i(com.cssn.mobilesdk.LicenseDetails) -> i
    boolean e(com.cssn.mobilesdk.LicenseDetails,boolean) -> e
    boolean j(com.cssn.mobilesdk.LicenseDetails) -> j
    java.lang.String f(com.cssn.mobilesdk.LicenseDetails,java.lang.String) -> f
    java.lang.String k(com.cssn.mobilesdk.LicenseDetails) -> k
    boolean f(com.cssn.mobilesdk.LicenseDetails,boolean) -> f
    boolean l(com.cssn.mobilesdk.LicenseDetails) -> l
    boolean g(com.cssn.mobilesdk.LicenseDetails,boolean) -> g
    boolean m(com.cssn.mobilesdk.LicenseDetails) -> m
    java.lang.String g(com.cssn.mobilesdk.LicenseDetails,java.lang.String) -> g
    java.lang.String n(com.cssn.mobilesdk.LicenseDetails) -> n
    java.lang.String h(com.cssn.mobilesdk.LicenseDetails,java.lang.String) -> h
    java.lang.String o(com.cssn.mobilesdk.LicenseDetails) -> o
    java.lang.String i(com.cssn.mobilesdk.LicenseDetails,java.lang.String) -> i
    java.lang.String p(com.cssn.mobilesdk.LicenseDetails) -> p
    java.lang.String j(com.cssn.mobilesdk.LicenseDetails,java.lang.String) -> j
    java.lang.String q(com.cssn.mobilesdk.LicenseDetails) -> q
    java.lang.String k(com.cssn.mobilesdk.LicenseDetails,java.lang.String) -> k
    java.lang.String r(com.cssn.mobilesdk.LicenseDetails) -> r
    java.lang.String l(com.cssn.mobilesdk.LicenseDetails,java.lang.String) -> l
    java.lang.String s(com.cssn.mobilesdk.LicenseDetails) -> s
com.cssn.mobilesdk.LicenseDetails$Factory -> com.cssn.mobilesdk.LicenseDetails$Factory:
    com.cssn.mobilesdk.LicenseDetails a(com.cssn.mobilesdk.LicenseDetails) -> a
com.cssn.mobilesdk.ManageApp -> com.cssn.mobilesdk.ManageApp:
    java.lang.String a -> a
    com.cssn.mobilesdk.ManageApp b -> b
    void onCreate() -> onCreate
com.cssn.mobilesdk.MedicalCard -> com.cssn.mobilesdk.MedicalCard:
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    java.lang.String e -> e
    java.lang.String f -> f
    java.lang.String g -> g
    java.lang.String h -> h
    java.lang.String i -> i
    java.lang.String j -> j
    java.lang.String k -> k
    java.lang.String l -> l
    java.lang.String m -> m
    java.lang.String n -> n
    java.lang.String o -> o
    java.lang.String p -> p
    java.lang.String q -> q
    java.lang.String r -> r
    java.lang.String s -> s
    java.lang.String t -> t
    java.lang.String u -> u
    java.lang.String v -> v
    java.lang.String w -> w
    java.lang.String x -> x
    java.lang.String y -> y
    java.lang.String z -> z
    java.lang.String A -> A
    android.graphics.Bitmap B -> B
    java.lang.String C -> C
    java.lang.String D -> D
    java.lang.String E -> E
    java.lang.String F -> F
    android.graphics.Bitmap G -> G
    java.lang.String H -> H
    java.lang.String I -> I
    java.lang.String J -> J
    java.lang.String K -> K
    java.lang.String L -> L
    java.lang.String M -> M
    java.lang.String N -> N
    java.lang.String O -> O
    java.lang.String P -> P
    void setCopayEr(java.lang.String) -> setCopayEr
    void setCopayOv(java.lang.String) -> setCopayOv
    void setCopaySp(java.lang.String) -> setCopaySp
    void setCopayUc(java.lang.String) -> setCopayUc
    void setCoverage(java.lang.String) -> setCoverage
    void setContractCode(java.lang.String) -> setContractCode
    void setDateOfBirth(java.lang.String) -> setDateOfBirth
    void setDeductible(java.lang.String) -> setDeductible
    void setEffectiveDate(java.lang.String) -> setEffectiveDate
    void setEmployer(java.lang.String) -> setEmployer
    void setExpirationDate(java.lang.String) -> setExpirationDate
    void setFirstName(java.lang.String) -> setFirstName
    void setGroupName(java.lang.String) -> setGroupName
    void setGroupNumber(java.lang.String) -> setGroupNumber
    void setIssuerNumber(java.lang.String) -> setIssuerNumber
    void setLastName(java.lang.String) -> setLastName
    void setMemberId(java.lang.String) -> setMemberId
    void setMemberName(java.lang.String) -> setMemberName
    void setMiddlename(java.lang.String) -> setMiddlename
    void setNamePrefix(java.lang.String) -> setNamePrefix
    void setNameSuffix(java.lang.String) -> setNameSuffix
    void setOther(java.lang.String) -> setOther
    void setPayerId(java.lang.String) -> setPayerId
    void setPlanAdmin(java.lang.String) -> setPlanAdmin
    void setPlanProvider(java.lang.String) -> setPlanProvider
    void setPlanType(java.lang.String) -> setPlanType
    void setReformattedImage(android.graphics.Bitmap) -> setReformattedImage
    void setRxBin(java.lang.String) -> setRxBin
    void setRxGroup(java.lang.String) -> setRxGroup
    void setRxId(java.lang.String) -> setRxId
    void setRxPcn(java.lang.String) -> setRxPcn
    void setReformattedImageTwo(android.graphics.Bitmap) -> setReformattedImageTwo
    void setFullAddress(java.lang.String) -> setFullAddress
    void setState(java.lang.String) -> setState
    void setStreet(java.lang.String) -> setStreet
    void setZip(java.lang.String) -> setZip
    void setCity(java.lang.String) -> setCity
    void setPlanCode(java.lang.String) -> setPlanCode
    void setPhoneNumber(java.lang.String) -> setPhoneNumber
    void setEmail(java.lang.String) -> setEmail
    void setWebAddress(java.lang.String) -> setWebAddress
    java.lang.String getCopayEr() -> getCopayEr
    java.lang.String getCopayOv() -> getCopayOv
    java.lang.String getCopaySp() -> getCopaySp
    java.lang.String getCopayUc() -> getCopayUc
    java.lang.String getCoverage() -> getCoverage
    java.lang.String getContractCode() -> getContractCode
    java.lang.String getDateOfBirth() -> getDateOfBirth
    java.lang.String getDeductible() -> getDeductible
    java.lang.String getEffectiveDate() -> getEffectiveDate
    java.lang.String getEmployer() -> getEmployer
    java.lang.String getExpirationDate() -> getExpirationDate
    java.lang.String getFirstName() -> getFirstName
    java.lang.String getGroupName() -> getGroupName
    java.lang.String getGroupNumber() -> getGroupNumber
    java.lang.String getIssuerNumber() -> getIssuerNumber
    java.lang.String getLastName() -> getLastName
    java.lang.String getMemberId() -> getMemberId
    java.lang.String getMemberName() -> getMemberName
    java.lang.String getMiddlename() -> getMiddlename
    java.lang.String getNamePrefix() -> getNamePrefix
    java.lang.String getNameSuffix() -> getNameSuffix
    java.lang.String getOther() -> getOther
    java.lang.String getPayerId() -> getPayerId
    java.lang.String getPlanAdmin() -> getPlanAdmin
    java.lang.String getPlanProvider() -> getPlanProvider
    java.lang.String getPlanType() -> getPlanType
    android.graphics.Bitmap getReformattedImage() -> getReformattedImage
    java.lang.String getRxBin() -> getRxBin
    java.lang.String getRxGroup() -> getRxGroup
    java.lang.String getRxId() -> getRxId
    java.lang.String getRxPcn() -> getRxPcn
    android.graphics.Bitmap getReformattedImageTwo() -> getReformattedImageTwo
    java.lang.String getFullAddress() -> getFullAddress
    java.lang.String getState() -> getState
    java.lang.String getStreet() -> getStreet
    java.lang.String getZip() -> getZip
    java.lang.String getCity() -> getCity
    java.lang.String getPlanCode() -> getPlanCode
    java.lang.String getPhoneNumber() -> getPhoneNumber
    java.lang.String getEmail() -> getEmail
    java.lang.String getWebAddress() -> getWebAddress
    com.cssn.mobilesdk.MedicalCard CSSNMedicalCardWithJson(java.lang.String) -> CSSNMedicalCardWithJson
    org.json.JSONArray a(org.json.JSONObject,java.lang.String) -> a
    boolean isEmpty() -> isEmpty
com.cssn.mobilesdk.PassportCard -> com.cssn.mobilesdk.PassportCard:
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    java.lang.String e -> e
    java.lang.String f -> f
    java.lang.String g -> g
    java.lang.String h -> h
    java.lang.String i -> i
    java.lang.String j -> j
    java.lang.String k -> k
    java.lang.String l -> l
    java.lang.String m -> m
    java.lang.String n -> n
    java.lang.String o -> o
    java.lang.String p -> p
    java.lang.String q -> q
    java.lang.String r -> r
    java.lang.String s -> s
    java.lang.String t -> t
    java.lang.String u -> u
    java.lang.String v -> v
    byte[] w -> w
    byte[] x -> x
    byte[] y -> y
    android.graphics.Bitmap z -> z
    android.graphics.Bitmap A -> A
    android.graphics.Bitmap B -> B
    void setAddress2(java.lang.String) -> setAddress2
    void setAddress3(java.lang.String) -> setAddress3
    void setCountry(java.lang.String) -> setCountry
    void setCountryLong(java.lang.String) -> setCountryLong
    void setDateOfBirth(java.lang.String) -> setDateOfBirth
    void setDateOfBirth4(java.lang.String) -> setDateOfBirth4
    void setEnd_POB(java.lang.String) -> setEnd_POB
    void setExpirationDate(java.lang.String) -> setExpirationDate
    void setExpirationDate4(java.lang.String) -> setExpirationDate4
    void setFaceImage(android.graphics.Bitmap) -> setFaceImage
    void setIssueDate(java.lang.String) -> setIssueDate
    void setIssueDate4(java.lang.String) -> setIssueDate4
    void setNameFirst(java.lang.String) -> setNameFirst
    void setNameFirst_NonMRZ(java.lang.String) -> setNameFirst_NonMRZ
    void setNameLast(java.lang.String) -> setNameLast
    void setNameLast_NonMRZ(java.lang.String) -> setNameLast_NonMRZ
    void setNameMiddle(java.lang.String) -> setNameMiddle
    void setNationality(java.lang.String) -> setNationality
    void setNationalityLong(java.lang.String) -> setNationalityLong
    void setPassportNumber(java.lang.String) -> setPassportNumber
    void setPersonalNumber(java.lang.String) -> setPersonalNumber
    void setReformattedImage(android.graphics.Bitmap) -> setReformattedImage
    void setSex(java.lang.String) -> setSex
    void setSignImage(android.graphics.Bitmap) -> setSignImage
    java.lang.String getAddress2() -> getAddress2
    java.lang.String getAddress3() -> getAddress3
    java.lang.String getCountry() -> getCountry
    java.lang.String getCountryLong() -> getCountryLong
    java.lang.String getDateOfBirth() -> getDateOfBirth
    java.lang.String getDateOfBirth4() -> getDateOfBirth4
    java.lang.String getEnd_POB() -> getEnd_POB
    java.lang.String getExpirationDate() -> getExpirationDate
    java.lang.String getExpirationDate4() -> getExpirationDate4
    android.graphics.Bitmap getFaceImage() -> getFaceImage
    java.lang.String getIssueDate() -> getIssueDate
    java.lang.String getIssueDate4() -> getIssueDate4
    java.lang.String getNameFirst() -> getNameFirst
    java.lang.String getNameFirst_NonMRZ() -> getNameFirst_NonMRZ
    java.lang.String getNameLast() -> getNameLast
    java.lang.String getNameLast_NonMRZ() -> getNameLast_NonMRZ
    java.lang.String getNameMiddle() -> getNameMiddle
    java.lang.String getNationality() -> getNationality
    java.lang.String getNationalityLong() -> getNationalityLong
    java.lang.String getPassportNumber() -> getPassportNumber
    java.lang.String getPersonalNumber() -> getPersonalNumber
    android.graphics.Bitmap getReformattedImage() -> getReformattedImage
    java.lang.String getSex() -> getSex
    android.graphics.Bitmap getSignImage() -> getSignImage
    com.cssn.mobilesdk.PassportCard CSSNPassportCardWithJson(java.lang.String) -> CSSNPassportCardWithJson
    boolean isEmpty() -> isEmpty
com.cssn.mobilesdk.ProcessImageRequestOptions -> com.cssn.mobilesdk.ProcessImageRequestOptions:
    int iRegion -> iRegion
    boolean autoDetectState -> autoDetectState
    int stateID -> stateID
    boolean faceDetec -> faceDetec
    boolean signDetec -> signDetec
    boolean reformatImage -> reformatImage
    int reformatImageColor -> reformatImageColor
    int DPI -> DPI
    boolean cropImage -> cropImage
    int imageSource -> imageSource
    int CSSNCardType -> CSSNCardType
    com.cssn.mobilesdk.ProcessImageRequestOptions a -> a
    com.cssn.mobilesdk.ProcessImageRequestOptions getInstance() -> getInstance
    void init() -> init
com.cssn.mobilesdk.Region -> com.cssn.mobilesdk.Region:
com.cssn.mobilesdk.Response -> com.cssn.mobilesdk.Response:
com.cssn.mobilesdk.TaskState -> com.cssn.mobilesdk.TaskState:
    com.cssn.mobilesdk.TaskState NEVER_STARTED -> NEVER_STARTED
    com.cssn.mobilesdk.TaskState RUNNING -> RUNNING
    com.cssn.mobilesdk.TaskState FINISHED -> FINISHED
    com.cssn.mobilesdk.TaskState CANCELED -> CANCELED
    com.cssn.mobilesdk.TaskState[] a -> a
    com.cssn.mobilesdk.TaskState[] values() -> values
    com.cssn.mobilesdk.TaskState valueOf(java.lang.String) -> valueOf
com.cssn.mobilesdk.WebRequestOptions -> com.cssn.mobilesdk.WebRequestOptions:
    com.cssn.mobilesdk.WebRequestOptions a -> a
com.cssn.mobilesdk.WebServiceListener -> com.cssn.mobilesdk.WebServiceListener:
    void processImageServiceCompleted(com.cssn.mobilesdk.Card,int,java.lang.String) -> processImageServiceCompleted
    void activateLicenseKeyCompleted(com.cssn.mobilesdk.LicenseActivationDetails,int,java.lang.String) -> activateLicenseKeyCompleted
    void validateLicenseKeyCompleted(com.cssn.mobilesdk.LicenseDetails,int,java.lang.String) -> validateLicenseKeyCompleted
com.cssn.mobilesdk.detect.CameraCardDetectActivityBase -> com.cssn.mobilesdk.detect.CameraCardDetectActivityBase:
    java.lang.String a -> a
    com.cssn.mobilesdk.detect.CameraCardDetectActivityBase$Mode b -> b
    com.cssn.mobilesdk.detect.CameraPreviewBase c -> c
    android.widget.RelativeLayout d -> d
    boolean e -> e
    int f -> f
    boolean g -> g
    android.view.View h -> h
    android.view.View i -> i
    void onCreate(android.os.Bundle,com.cssn.mobilesdk.detect.CameraCardDetectActivityBase$Mode) -> onCreate
    void a() -> a
    void a(int,int) -> a
    void b(int,int) -> b
    android.view.View addInitialTextView(android.app.Activity,android.widget.RelativeLayout,int) -> addInitialTextView
    android.view.View addFinalTextView(android.app.Activity,android.widget.RelativeLayout) -> addFinalTextView
    void onResume() -> onResume
    void onPause() -> onPause
    void onStop() -> onStop
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onDestroy() -> onDestroy
    void onBackPressed() -> onBackPressed
    void setHoldSteadyTextVisibility(int) -> setHoldSteadyTextVisibility
com.cssn.mobilesdk.detect.CameraCardDetectActivityBase$1 -> com.cssn.mobilesdk.detect.CameraCardDetectActivityBase$1:
    com.cssn.mobilesdk.detect.CameraCardDetectActivityBase a -> a
com.cssn.mobilesdk.detect.CameraCardDetectActivityBase$Mode -> com.cssn.mobilesdk.detect.CameraCardDetectActivityBase$Mode:
    com.cssn.mobilesdk.detect.CameraCardDetectActivityBase$Mode a -> a
    com.cssn.mobilesdk.detect.CameraCardDetectActivityBase$Mode b -> b
    com.cssn.mobilesdk.detect.CameraCardDetectActivityBase$Mode[] c -> c
    com.cssn.mobilesdk.detect.CameraCardDetectActivityBase$Mode[] values() -> values
    com.cssn.mobilesdk.detect.CameraCardDetectActivityBase$Mode valueOf(java.lang.String) -> valueOf
com.cssn.mobilesdk.detect.CameraCardDetectAuto -> com.cssn.mobilesdk.detect.CameraCardDetectAuto:
    java.lang.String a -> a
    void onCreate(android.os.Bundle) -> onCreate
    void processPictureTaken(android.hardware.Camera,byte[]) -> processPictureTaken
    void processDetected(int[],cvlib.zcard.ZPassport) -> processDetected
com.cssn.mobilesdk.detect.CameraCardDetectBase -> com.cssn.mobilesdk.detect.CameraCardDetectBase:
com.cssn.mobilesdk.detect.CameraCardDetectManual -> com.cssn.mobilesdk.detect.CameraCardDetectManual:
    java.lang.String a -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void onPause() -> onPause
    void processPictureTaken(android.hardware.Camera,byte[]) -> processPictureTaken
    void processDetected(int[],cvlib.zcard.ZPassport) -> processDetected
com.cssn.mobilesdk.detect.CameraPreviewAuto -> com.cssn.mobilesdk.detect.CameraPreviewAuto:
    java.lang.String a -> a
    java.util.regex.Pattern b -> b
    com.android.zcardcapture.ViewfinderView c -> c
    byte[] d -> d
    cvlib.zcard.ZPassport e -> e
    int f -> f
    boolean g -> g
    boolean h -> h
    android.graphics.Point i -> i
    boolean E -> E
    int F -> F
    void surfaceCreated(android.view.SurfaceHolder) -> surfaceCreated
    void a(int,int) -> a
    void onPreviewFrame(byte[],android.hardware.Camera) -> onPreviewFrame
    android.graphics.Point a(android.hardware.Camera$Parameters,android.graphics.Point) -> a
    android.graphics.Point a(java.lang.CharSequence,android.graphics.Point) -> a
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void onAutoFocus(boolean,android.hardware.Camera) -> onAutoFocus
    int a() -> a
    android.hardware.Camera$Size b(int,int) -> b
com.cssn.mobilesdk.detect.CameraPreviewBase -> com.cssn.mobilesdk.detect.CameraPreviewBase:
    java.lang.String a -> a
    android.app.Activity j -> j
    android.view.SurfaceHolder k -> k
    android.hardware.Camera l -> l
    java.util.List m -> m
    java.util.List n -> n
    android.hardware.Camera$Size o -> o
    android.hardware.Camera$Size p -> p
    int q -> q
    com.cssn.mobilesdk.detect.CameraPreviewBase$LayoutMode r -> r
    int s -> s
    int t -> t
    int u -> u
    int v -> v
    int w -> w
    android.hardware.Camera$Parameters x -> x
    com.cssn.mobilesdk.detect.CameraPreviewBase$PreviewReadyCallback y -> y
    boolean z -> z
    boolean A -> A
    int B -> B
    boolean C -> C
    com.cssn.mobilesdk.detect.PictureTakenListener D -> D
    void surfaceCreated(android.view.SurfaceHolder) -> surfaceCreated
    void surfaceChanged(android.view.SurfaceHolder,int,int,int) -> surfaceChanged
    void a(int,int) -> a
    void surfaceDestroyed(android.view.SurfaceHolder) -> surfaceDestroyed
    android.hardware.Camera$Size a(boolean,int,int) -> a
    android.hardware.Camera$Size a(android.hardware.Camera$Size) -> a
    boolean a(android.hardware.Camera$Size,boolean,int,int) -> a
    void a(android.hardware.Camera$Parameters,boolean) -> a
    boolean b() -> b
    void a(int) -> a
    void b(int) -> b
com.cssn.mobilesdk.detect.CameraPreviewBase$LayoutMode -> com.cssn.mobilesdk.detect.CameraPreviewBase$LayoutMode:
    com.cssn.mobilesdk.detect.CameraPreviewBase$LayoutMode a -> a
    com.cssn.mobilesdk.detect.CameraPreviewBase$LayoutMode b -> b
    com.cssn.mobilesdk.detect.CameraPreviewBase$LayoutMode[] c -> c
    com.cssn.mobilesdk.detect.CameraPreviewBase$LayoutMode[] values() -> values
    com.cssn.mobilesdk.detect.CameraPreviewBase$LayoutMode valueOf(java.lang.String) -> valueOf
com.cssn.mobilesdk.detect.CameraPreviewBase$PreviewReadyCallback -> com.cssn.mobilesdk.detect.CameraPreviewBase$PreviewReadyCallback:
    void a() -> a
com.cssn.mobilesdk.detect.CameraPreviewManual -> com.cssn.mobilesdk.detect.CameraPreviewManual:
    java.lang.String a -> a
    void surfaceCreated(android.view.SurfaceHolder) -> surfaceCreated
    void a(int,int) -> a
    void onPictureTaken(byte[],android.hardware.Camera) -> onPictureTaken
    void a() -> a
    void onAutoFocus(boolean,android.hardware.Camera) -> onAutoFocus
    void a(com.cssn.mobilesdk.detect.CameraPreviewManual) -> a
com.cssn.mobilesdk.detect.CameraPreviewManual$1 -> com.cssn.mobilesdk.detect.CameraPreviewManual$1:
    com.cssn.mobilesdk.detect.CameraPreviewManual a -> a
    void onClick(android.view.View) -> onClick
com.cssn.mobilesdk.detect.FinalDescriptor -> com.cssn.mobilesdk.detect.FinalDescriptor:
com.cssn.mobilesdk.detect.InitialDescriptor -> com.cssn.mobilesdk.detect.InitialDescriptor:
    java.lang.Integer a -> a
    java.lang.Integer a() -> a
    void a(java.lang.Integer) -> a
com.cssn.mobilesdk.detect.PDF417.CameraPDF417 -> com.cssn.mobilesdk.detect.PDF417.CameraPDF417:
    int c -> c
    int a -> a
    int b -> b
    boolean d -> d
    java.lang.Runnable e -> e
    boolean f -> f
    android.os.Handler g -> g
    com.cssn.mobilesdk.detect.PDF417.CameraPDF417 h -> h
    com.microblink.view.recognition.RecognizerView i -> i
    com.microblink.view.viewfinder.QuadView j -> j
    java.lang.String[] k -> k
    void onCreate(android.os.Bundle) -> onCreate
    void a(java.lang.String[]) -> a
    void onStart() -> onStart
    void onResume() -> onResume
    void onPause() -> onPause
    void onStop() -> onStop
    void onDestroy() -> onDestroy
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onBackPressed() -> onBackPressed
    void onScanningDone(com.microblink.recognizers.BaseRecognitionResult[],com.microblink.view.recognition.RecognitionType) -> onScanningDone
    void onCameraPreviewStarted() -> onCameraPreviewStarted
    void onStartupError(java.lang.Throwable) -> onStartupError
    void onNotSupported(com.microblink.view.NotSupportedReason) -> onNotSupported
    void f() -> f
    void onAutofocusFailed() -> onAutofocusFailed
    void onAutofocusStarted(android.graphics.Rect[]) -> onAutofocusStarted
    void onAutofocusStopped(android.graphics.Rect[]) -> onAutofocusStopped
    void onNothingDetected() -> onNothingDetected
    void onDisplayPointsOfInterest(java.util.List,com.microblink.view.recognition.DetectionStatus) -> onDisplayPointsOfInterest
    void onDisplayQuadrilateralObject(com.microblink.geometry.Quadrilateral,com.microblink.view.recognition.DetectionStatus) -> onDisplayQuadrilateralObject
    int a(int) -> a
    void g() -> g
    java.lang.Runnable a() -> a
    android.os.Handler b() -> b
    boolean c() -> c
    com.microblink.view.recognition.RecognizerView a(com.cssn.mobilesdk.detect.PDF417.CameraPDF417) -> a
    com.cssn.mobilesdk.detect.PDF417.CameraPDF417 d() -> d
    java.lang.String[] e() -> e
com.cssn.mobilesdk.detect.PDF417.CameraPDF417$1 -> com.cssn.mobilesdk.detect.PDF417.CameraPDF417$1:
    com.cssn.mobilesdk.detect.PDF417.CameraPDF417 a -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.cssn.mobilesdk.detect.PDF417.CameraPDF417$2 -> com.cssn.mobilesdk.detect.PDF417.CameraPDF417$2:
    com.cssn.mobilesdk.detect.PDF417.CameraPDF417 a -> a
    void run() -> run
com.cssn.mobilesdk.detect.PDF417.CameraPDF417$2$1 -> com.cssn.mobilesdk.detect.PDF417.CameraPDF417$2$1:
    com.cssn.mobilesdk.detect.PDF417.CameraPDF417$2 a -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.cssn.mobilesdk.detect.PDF417.CameraPDF417$2$2 -> com.cssn.mobilesdk.detect.PDF417.CameraPDF417$2$2:
    com.cssn.mobilesdk.detect.PDF417.CameraPDF417$2 a -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.cssn.mobilesdk.detect.PictureTakenListener -> com.cssn.mobilesdk.detect.PictureTakenListener:
    void processPictureTaken(android.hardware.Camera,byte[]) -> processPictureTaken
    void processDetected(int[],cvlib.zcard.ZPassport) -> processDetected
com.cssn.mobilesdk.exceptions.AuthorizationException -> com.cssn.mobilesdk.exceptions.AuthorizationException:
    long serialVersionUID -> serialVersionUID
com.cssn.mobilesdk.exceptions.ConnectionException -> com.cssn.mobilesdk.exceptions.ConnectionException:
    long serialVersionUID -> serialVersionUID
com.cssn.mobilesdk.exceptions.TaskAlreadyRunningException -> com.cssn.mobilesdk.exceptions.TaskAlreadyRunningException:
    long serialVersionUID -> serialVersionUID
com.cssn.mobilesdk.task.CroppingTaskAuto -> com.cssn.mobilesdk.task.CroppingTaskAuto:
    java.lang.String h -> h
    android.app.Activity a -> a
    cvlib.zcard.ZPassport i -> i
    int[] j -> j
    int k -> k
    void onPreExecute() -> onPreExecute
    java.lang.Void a(java.lang.String[]) -> a
    void a(java.lang.Void) -> a
    void a(int[],int,int) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.cssn.mobilesdk.task.CroppingTaskBase -> com.cssn.mobilesdk.task.CroppingTaskBase:
    java.lang.String a -> a
    android.app.Activity b -> b
    android.hardware.Camera c -> c
    byte[] d -> d
    int e -> e
    android.graphics.Bitmap f -> f
    int g -> g
    void a(android.app.Activity,android.graphics.Bitmap) -> a
    void a(android.app.Activity) -> a
com.cssn.mobilesdk.task.CroppingTaskBase$1 -> com.cssn.mobilesdk.task.CroppingTaskBase$1:
    android.app.Activity a -> a
    android.graphics.Bitmap b -> b
    void run() -> run
com.cssn.mobilesdk.task.CroppingTaskBase$2 -> com.cssn.mobilesdk.task.CroppingTaskBase$2:
    android.app.Activity a -> a
    void run() -> run
com.cssn.mobilesdk.task.CroppingTaskManual -> com.cssn.mobilesdk.task.CroppingTaskManual:
    java.lang.String a -> a
    void onPreExecute() -> onPreExecute
    java.lang.Void a(java.lang.String[]) -> a
    void a(java.lang.Void) -> a
    boolean a(byte[]) -> a
    void a(int) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.cssn.mobilesdk.util.Constants -> com.cssn.mobilesdk.util.Constants:
    java.lang.String RESULT_ERROR_KEY -> RESULT_ERROR_KEY
    java.lang.String RESULT_KEY -> RESULT_KEY
    java.lang.String FACE_DETECTION_KEY -> FACE_DETECTION_KEY
    java.lang.String SIGNATURE_DETECTION_KEY -> SIGNATURE_DETECTION_KEY
    java.lang.String REGION_DETECTION_KEY -> REGION_DETECTION_KEY
    java.lang.String SHARED_OPTIONS_NAME -> SHARED_OPTIONS_NAME
    int SHARED_PREFS_MODE -> SHARED_PREFS_MODE
    java.lang.String ERROR_CONEXION -> ERROR_CONEXION
    java.lang.String ERROR_NETWORK -> ERROR_NETWORK
    java.lang.String ERROR_TIME_OUT -> ERROR_TIME_OUT
    java.lang.String ERROR_IOEXEPTION -> ERROR_IOEXEPTION
    java.lang.String ERROR_RESULT -> ERROR_RESULT
    java.lang.String APP -> APP
    java.lang.String FIRSTTIME_KEY -> FIRSTTIME_KEY
com.cssn.mobilesdk.util.Encoding -> com.cssn.mobilesdk.util.Encoding:
    java.lang.String a(byte[]) -> a
com.cssn.mobilesdk.util.HttpActivateLicenseRequestTask -> com.cssn.mobilesdk.util.HttpActivateLicenseRequestTask:
    java.lang.String b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    android.content.Context e -> e
    int f -> f
    com.cssn.mobilesdk.util.NetworkListener a -> a
    void a(java.lang.String) -> a
    void b(java.lang.String) -> b
    void a(com.cssn.mobilesdk.util.NetworkListener) -> a
    java.lang.String a(java.lang.String[]) -> a
    void c(java.lang.String) -> c
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.cssn.mobilesdk.util.HttpClientFactory -> com.cssn.mobilesdk.util.HttpClientFactory:
    org.apache.http.impl.client.DefaultHttpClient a -> a
    org.apache.http.impl.client.DefaultHttpClient a() -> a
    org.apache.http.client.HttpClient a(org.apache.http.client.HttpClient) -> a
com.cssn.mobilesdk.util.HttpClientFactory$1 -> com.cssn.mobilesdk.util.HttpClientFactory$1:
    void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkClientTrusted
    void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkServerTrusted
    java.security.cert.X509Certificate[] getAcceptedIssuers() -> getAcceptedIssuers
com.cssn.mobilesdk.util.HttpProcessImageRequestTask -> com.cssn.mobilesdk.util.HttpProcessImageRequestTask:
    java.lang.String b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    android.graphics.Bitmap e -> e
    android.graphics.Bitmap f -> f
    int g -> g
    int h -> h
    android.content.Context i -> i
    com.cssn.mobilesdk.util.NetworkListener a -> a
    void a(com.cssn.mobilesdk.util.NetworkListener) -> a
    java.lang.String a(java.lang.String[]) -> a
    void a(java.lang.String) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.cssn.mobilesdk.util.HttpRequestTask -> com.cssn.mobilesdk.util.HttpRequestTask:
    java.lang.String b -> b
    android.graphics.Bitmap c -> c
    int d -> d
    int e -> e
    android.content.Context f -> f
    com.cssn.mobilesdk.util.HttpRequestTask$NetworkListener a -> a
    java.lang.String a(java.lang.String[]) -> a
    void a(java.lang.String) -> a
    boolean a(android.content.Context) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.cssn.mobilesdk.util.HttpRequestTask$NetworkListener -> com.cssn.mobilesdk.util.HttpRequestTask$NetworkListener:
    void a(java.lang.String,int) -> a
com.cssn.mobilesdk.util.HttpValidateLicenseRequestTask -> com.cssn.mobilesdk.util.HttpValidateLicenseRequestTask:
    java.lang.String b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    java.lang.String e -> e
    android.content.Context f -> f
    int g -> g
    com.cssn.mobilesdk.util.NetworkListener a -> a
    void a(java.lang.String) -> a
    void b(java.lang.String) -> b
    void a(com.cssn.mobilesdk.util.NetworkListener) -> a
    java.lang.String a(java.lang.String[]) -> a
    void c(java.lang.String) -> c
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.cssn.mobilesdk.util.LongToast -> com.cssn.mobilesdk.util.LongToast:
    android.widget.Toast a -> a
    android.os.CountDownTimer b -> b
    boolean c -> c
    boolean a(com.cssn.mobilesdk.util.LongToast) -> a
    android.widget.Toast b(com.cssn.mobilesdk.util.LongToast) -> b
com.cssn.mobilesdk.util.LongToast$1 -> com.cssn.mobilesdk.util.LongToast$1:
    com.cssn.mobilesdk.util.LongToast a -> a
    void onTick(long) -> onTick
    void onFinish() -> onFinish
com.cssn.mobilesdk.util.ManageApp -> com.cssn.mobilesdk.util.ManageApp:
    java.lang.String a -> a
    com.cssn.mobilesdk.util.ManageApp b -> b
    com.cssn.mobilesdk.util.ManageApp a() -> a
    void onCreate() -> onCreate
    byte[] a(org.json.JSONObject,java.lang.String) -> a
com.cssn.mobilesdk.util.MySSLSocketFactory -> com.cssn.mobilesdk.util.MySSLSocketFactory:
    javax.net.ssl.SSLContext a -> a
    java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean) -> createSocket
    java.net.Socket createSocket() -> createSocket
com.cssn.mobilesdk.util.MySSLSocketFactory$1 -> com.cssn.mobilesdk.util.MySSLSocketFactory$1:
    void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkClientTrusted
    void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkServerTrusted
    java.security.cert.X509Certificate[] getAcceptedIssuers() -> getAcceptedIssuers
com.cssn.mobilesdk.util.NetworkListener -> com.cssn.mobilesdk.util.NetworkListener:
    void a(java.lang.String,int) -> a
com.cssn.mobilesdk.util.Utils -> com.cssn.mobilesdk.util.Utils:
    java.lang.String a -> a
    android.graphics.drawable.Drawable b -> b
    boolean LOG_ENABLED -> LOG_ENABLED
    java.util.List c -> c
    java.util.List d -> d
    java.lang.String bytesToHex(byte[]) -> bytesToHex
    byte[] getUTF8Bytes(java.lang.String) -> getUTF8Bytes
    java.lang.String loadFileAsString(java.lang.String) -> loadFileAsString
    java.lang.String getMACAddress(java.lang.String) -> getMACAddress
    java.lang.String getIPAddress(boolean) -> getIPAddress
    boolean isNetworkAvailable(android.content.Context) -> isNetworkAvailable
    boolean useAutoFocus(android.app.Activity) -> useAutoFocus
    void showDialog(android.content.Context,java.lang.String) -> showDialog
    void dismissDialog(android.app.Dialog) -> dismissDialog
    void appendLog(java.lang.String,java.lang.String) -> appendLog
    android.graphics.drawable.Drawable getDrawable() -> getDrawable
    void setDrawable(android.graphics.drawable.Drawable) -> setDrawable
com.cssn.mobilesdk.util.Utils$1 -> com.cssn.mobilesdk.util.Utils$1:
    void onClick(android.content.DialogInterface,int) -> onClick
com.cssn.mobilesdk.util.WatermarkTextView -> com.cssn.mobilesdk.util.WatermarkTextView:
    void onMeasure(int,int) -> onMeasure
    boolean setFrame(int,int,int,int) -> setFrame
    void draw(android.graphics.Canvas) -> draw
com.cssn.mobilesdk.utilities.CSSNUtil -> com.cssn.mobilesdk.utilities.CSSNUtil:
    double getAspectRatio(int) -> a
com.cssn.samplesdk.BuildConfig -> com.cssn.samplesdk.BuildConfig:
com.cssn.samplesdk.MainActivity -> com.cssn.samplesdk.MainActivity:
    java.lang.String TAG -> b
    java.lang.String sPdf417String -> c
    com.cssn.mobilesdk.CSSNMobileSDKController cssnMobileSdkControllerInstance -> a
    android.widget.ImageView frontImageView -> d
    android.widget.ImageView backImageView -> e
    android.widget.TextView txtTapToCaptureFront -> f
    android.widget.TextView txtTapToCaptureBack -> g
    android.widget.Button processCardButton -> h
    android.widget.RelativeLayout layoutFrontImage -> i
    android.widget.RelativeLayout layoutBackImage -> j
    android.widget.LinearLayout layoutCards -> k
    android.widget.EditText editTextLicense -> l
    com.cssn.samplesdk.model.MainActivityModel mainActivityModel -> m
    android.widget.Button activateLicenseButton -> n
    android.app.ProgressDialog progressDialog -> o
    android.app.AlertDialog showDuplexAlertDialog -> p
    android.app.AlertDialog alertDialog -> q
    boolean isShowErrorAlertDialog -> r
    boolean isProcessing -> s
    boolean isShowDuplexDialog -> t
    boolean isValidating -> u
    boolean isActivating -> v
    boolean isCropping -> w
    com.cssn.samplesdk.MainActivity mainActivity -> x
    void onCreate(android.os.Bundle) -> onCreate
    void validateLicenseKey(java.lang.String) -> a
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onPostResume() -> onPostResume
    void onCardCroppingStart(android.app.Activity) -> onCardCroppingStart
    void onCardCroppingFinish(android.graphics.Bitmap) -> onCardCroppingFinish
    void showDuplexDialog() -> b
    void onPDF417Finish(java.lang.String) -> onPDF417Finish
    void updateModelAndUIFromCroppedCard(android.graphics.Bitmap) -> a
    void frontSideCapturePressed(android.view.View) -> frontSideCapturePressed
    void backSideCapturePressed(android.view.View) -> backSideCapturePressed
    void showCameraInterface() -> c
    void driverCardButtonPressed(android.view.View) -> driverCardButtonPressed
    void driverCardButtonDuplexPressed(android.view.View) -> driverCardButtonDuplexPressed
    void passportCardButtonPressed(android.view.View) -> passportCardButtonPressed
    void medicalCardButtonPressed(android.view.View) -> medicalCardButtonPressed
    void resizeImageFrames(int) -> a
    void updateUI() -> a
    void highlightCurrentCardOption() -> d
    void processCard(android.view.View) -> processCard
    void resetPdf417String() -> e
    void activateLicenseKey(android.view.View) -> activateLicenseKey
    void processImageServiceCompleted(com.cssn.mobilesdk.Card,int,java.lang.String) -> processImageServiceCompleted
    void activateLicenseKeyCompleted(com.cssn.mobilesdk.LicenseActivationDetails,int,java.lang.String) -> activateLicenseKeyCompleted
    void validateLicenseKeyCompleted(com.cssn.mobilesdk.LicenseDetails,int,java.lang.String) -> validateLicenseKeyCompleted
    void showFrontSideCardImage() -> f
    void showBackSideCardImage() -> g
    void hideBackSideCardImage() -> h
    void showFrontImageText() -> i
    void hideFrontImageText() -> j
    void showBackImageText() -> k
    void hideBackImageText() -> l
    void onResume() -> onResume
    void onRestoreInstanceState(android.os.Bundle) -> onRestoreInstanceState
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onPause() -> onPause
    void onDestroy() -> onDestroy
    void hideVirtualKeyboard() -> m
    void updateActivateLicenseButtonFromModel() -> n
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    android.widget.EditText access$000(com.cssn.samplesdk.MainActivity) -> a
    void access$100(com.cssn.samplesdk.MainActivity,java.lang.String) -> a
    com.cssn.samplesdk.model.MainActivityModel access$200(com.cssn.samplesdk.MainActivity) -> b
    void access$300(com.cssn.samplesdk.MainActivity) -> c
    void access$400(com.cssn.samplesdk.MainActivity) -> d
    void access$500(com.cssn.samplesdk.MainActivity) -> e
    com.cssn.samplesdk.MainActivity access$600(com.cssn.samplesdk.MainActivity) -> f
    boolean access$702(boolean) -> a
    void access$800(com.cssn.samplesdk.MainActivity) -> g
    boolean access$902(boolean) -> b
com.cssn.samplesdk.MainActivity$1 -> com.cssn.samplesdk.MainActivity$1:
    com.cssn.samplesdk.MainActivity this$0 -> a
    boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent) -> onEditorAction
com.cssn.samplesdk.MainActivity$10 -> com.cssn.samplesdk.MainActivity$10:
    com.cssn.samplesdk.MainActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.cssn.samplesdk.MainActivity$11 -> com.cssn.samplesdk.MainActivity$11:
    com.cssn.samplesdk.MainActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.cssn.samplesdk.MainActivity$12 -> com.cssn.samplesdk.MainActivity$12:
    com.cssn.samplesdk.MainActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.cssn.samplesdk.MainActivity$13 -> com.cssn.samplesdk.MainActivity$13:
    int val$status -> a
    com.cssn.samplesdk.MainActivity this$0 -> b
    void onClick(android.content.DialogInterface,int) -> onClick
com.cssn.samplesdk.MainActivity$14 -> com.cssn.samplesdk.MainActivity$14:
    com.cssn.samplesdk.MainActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.cssn.samplesdk.MainActivity$15 -> com.cssn.samplesdk.MainActivity$15:
    int[] $SwitchMap$com$cssn$samplesdk$model$MainActivityModel$CardSide -> a
com.cssn.samplesdk.MainActivity$2 -> com.cssn.samplesdk.MainActivity$2:
    com.cssn.samplesdk.MainActivity this$0 -> a
    void run() -> run
com.cssn.samplesdk.MainActivity$2$1 -> com.cssn.samplesdk.MainActivity$2$1:
    com.cssn.samplesdk.MainActivity$2 this$1 -> a
    void afterTextChanged(android.text.Editable) -> afterTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
com.cssn.samplesdk.MainActivity$3 -> com.cssn.samplesdk.MainActivity$3:
    com.cssn.samplesdk.MainActivity this$0 -> a
    void onFocusChange(android.view.View,boolean) -> onFocusChange
com.cssn.samplesdk.MainActivity$4 -> com.cssn.samplesdk.MainActivity$4:
    com.cssn.samplesdk.MainActivity this$0 -> a
    void run() -> run
com.cssn.samplesdk.MainActivity$5 -> com.cssn.samplesdk.MainActivity$5:
    com.cssn.samplesdk.MainActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.cssn.samplesdk.MainActivity$6 -> com.cssn.samplesdk.MainActivity$6:
    com.cssn.samplesdk.MainActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.cssn.samplesdk.MainActivity$7 -> com.cssn.samplesdk.MainActivity$7:
    com.cssn.samplesdk.MainActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.cssn.samplesdk.MainActivity$8 -> com.cssn.samplesdk.MainActivity$8:
    com.cssn.samplesdk.MainActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.cssn.samplesdk.MainActivity$9 -> com.cssn.samplesdk.MainActivity$9:
    com.cssn.samplesdk.MainActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.cssn.samplesdk.R -> com.cssn.samplesdk.R:
com.cssn.samplesdk.R$attr -> com.cssn.samplesdk.R$attr:
    int animateRotation -> animateRotation
    int animationDuration -> animationDuration
    int initialOrientation -> initialOrientation
    int rotatable -> rotatable
com.cssn.samplesdk.R$bool -> com.cssn.samplesdk.R$bool:
    int is600dp -> is600dp
    int isTablet -> isTablet
com.cssn.samplesdk.R$color -> com.cssn.samplesdk.R$color:
    int backgroud_Transparent -> backgroud_Transparent
    int backgroud_color -> backgroud_color
    int backgroud_color2 -> backgroud_color2
    int backgroud_color3 -> backgroud_color3
    int backgroud_color4 -> backgroud_color4
    int default_frame -> default_frame
    int formDetect_frame -> formDetect_frame
    int greenlight -> greenlight
    int helpButtonBackgroundDisabled -> helpButtonBackgroundDisabled
    int helpButtonBackgroundNormal -> helpButtonBackgroundNormal
    int helpButtonBackgroundPressed -> helpButtonBackgroundPressed
    int max_quality_ocr_color -> max_quality_ocr_color
    int med_quality_ocr_color -> med_quality_ocr_color
    int min_quality_ocr_color -> min_quality_ocr_color
    int ocr_line_background -> ocr_line_background
    int ocr_line_help_background -> ocr_line_help_background
    int photopayButtonBackgroundDisabled -> photopayButtonBackgroundDisabled
    int photopayButtonBackgroundNormal -> photopayButtonBackgroundNormal
    int photopayButtonBackgroundPressed -> photopayButtonBackgroundPressed
    int photopayButtonBorder -> photopayButtonBorder
    int photopayButtonForeground -> photopayButtonForeground
    int recognized_frame -> recognized_frame
    int statusBackground -> statusBackground
    int statusForeground -> statusForeground
    int textback -> textback
    int transparent -> transparent
    int white -> white
com.cssn.samplesdk.R$dimen -> com.cssn.samplesdk.R$dimen:
    int activity_horizontal_margin -> activity_horizontal_margin
    int activity_vertical_margin -> activity_vertical_margin
    int card_frame_height -> card_frame_height
    int card_frame_width -> card_frame_width
com.cssn.samplesdk.R$drawable -> com.cssn.samplesdk.R$drawable:
    int barcode -> barcode
    int border_card_image -> border_card_image
    int ic_launcher -> ic_launcher
com.cssn.samplesdk.R$id -> com.cssn.samplesdk.R$id:
    int LinearLayout1 -> LinearLayout1
    int RelativeLayout1 -> RelativeLayout1
    int RelativeLayoutKeyValidation -> RelativeLayoutKeyValidation
    int action_settings -> action_settings
    int activateLicenseButton -> activateLicenseButton
    int backImageView -> backImageView
    int backSideCardImage -> backSideCardImage
    int buttonDriver -> buttonDriver
    int buttonDriverDuplex -> buttonDriverDuplex
    int buttonMedical -> buttonMedical
    int buttonPassport -> buttonPassport
    int cardImagesLayout -> cardImagesLayout
    int editTextLicenceKey -> editTextLicenceKey
    int faceImage -> faceImage
    int frontImageView -> frontImageView
    int frontSideCardImage -> frontSideCardImage
    int include_key_validation -> include_key_validation
    int inversePortrait -> inversePortrait
    int landscapeLeft -> landscapeLeft
    int landscapeRight -> landscapeRight
    int portrait -> portrait
    int processCardButton -> processCardButton
    int relativeLayoutBackImage -> relativeLayoutBackImage
    int relativeLayoutFrontImage -> relativeLayoutFrontImage
    int scrollView1 -> scrollView1
    int signatureImage -> signatureImage
    int textViewCardInfo -> textViewCardInfo
    int textViewLicenseCardInfo -> textViewLicenseCardInfo
    int topButtons -> topButtons
    int txtTapToCaptureBack -> txtTapToCaptureBack
    int txtTapToCaptureFront -> txtTapToCaptureFront
com.cssn.samplesdk.R$layout -> com.cssn.samplesdk.R$layout:
    int activity_main -> activity_main
    int activity_show_data -> activity_show_data
    int activity_show_data_landscape -> activity_show_data_landscape
    int align_and_tap -> align_and_tap
    int hold_steady -> hold_steady
    int include_key_validation -> include_key_validation
    int tap_to_focus -> tap_to_focus
com.cssn.samplesdk.R$menu -> com.cssn.samplesdk.R$menu:
    int main -> main
com.cssn.samplesdk.R$string -> com.cssn.samplesdk.R$string:
    int Address -> Address
    int City -> City
    int Copied -> Copied
    int CopiedText -> CopiedText
    int Copy -> Copy
    int Country -> Country
    int CustomUIForbidden -> CustomUIForbidden
    int Date_of_Birth -> Date_of_Birth
    int Expiration_Date -> Expiration_Date
    int Eye_Color -> Eye_Color
    int FeatureUnsuportedAndroidVersion -> FeatureUnsuportedAndroidVersion
    int FeatureUnsuportedAutofocus -> FeatureUnsuportedAutofocus
    int FeatureUnsuportedDevice -> FeatureUnsuportedDevice
    int Hair_Color -> Hair_Color
    int Height -> Height
    int InvalidLicense -> InvalidLicense
    int Issue_Date -> Issue_Date
    int License_Class -> License_Class
    int License_No_ -> License_No_
    int Name -> Name
    int NoRecognizers -> NoRecognizers
    int PPCancel -> PPCancel
    int PPUse -> PPUse
    int Restriction -> Restriction
    int ResultList -> ResultList
    int Sex -> Sex
    int State -> State
    int Weight -> Weight
    int Zip -> Zip
    int about -> about
    int action_settings -> action_settings
    int activate -> activate
    int africa -> africa
    int align_and_tap -> align_and_tap
    int america -> america
    int app_name -> app_name
    int asia -> asia
    int australia -> australia
    int automatic_capture -> automatic_capture
    int cam_back -> cam_back
    int cam_front -> cam_front
    int canada -> canada
    int change_passcode -> change_passcode
    int default_watermark -> default_watermark
    int dl_duplex -> dl_duplex
    int dl_duplex_dialog -> dl_duplex_dialog
    int driver_license -> driver_license
    int europe -> europe
    int face_detection -> face_detection
    int hello_world -> hello_world
    int help -> help
    int hold_steady -> hold_steady
    int latin_america -> latin_america
    int license_key -> license_key
    int manual_capture -> manual_capture
    int medical_insurance -> medical_insurance
    int no_internet_message -> no_internet_message
    int none -> none
    int onHelpClick -> onHelpClick
    int onSettingsClick -> onSettingsClick
    int passport -> passport
    int photopay -> photopay
    int photopayCameraNotReady -> photopayCameraNotReady
    int photopayErrorInitializing -> photopayErrorInitializing
    int photopayHelpImageDescription -> photopayHelpImageDescription
    int photopayHome -> photopayHome
    int photopayLightOff -> photopayLightOff
    int photopayLightOn -> photopayLightOn
    int photopayOK -> photopayOK
    int photopayWarningTitle -> photopayWarningTitle
    int process -> process
    int scanBarcode -> scanBarcode
    int settingsButton -> settingsButton
    int signature_detection -> signature_detection
    int tap_to_capture -> tap_to_capture
    int tap_to_capture_back_side_optional_ -> tap_to_capture_back_side_optional_
    int tap_to_capture_front_side -> tap_to_capture_front_side
    int tap_to_focus -> tap_to_focus
    int title_activity_help_screen -> title_activity_help_screen
    int title_activity_image_pick -> title_activity_image_pick
    int title_activity_settings -> title_activity_settings
    int title_activity_show_data -> title_activity_show_data
    int todo -> todo
    int turn_passcode_on -> turn_passcode_on
    int united_states -> united_states
com.cssn.samplesdk.R$style -> com.cssn.samplesdk.R$style:
    int AppBaseTheme -> AppBaseTheme
    int AppTheme -> AppTheme
com.cssn.samplesdk.R$styleable -> com.cssn.samplesdk.R$styleable:
    int[] RecognizerView -> RecognizerView
    int RecognizerView_animateRotation -> RecognizerView_animateRotation
    int RecognizerView_animationDuration -> RecognizerView_animationDuration
    int RecognizerView_initialOrientation -> RecognizerView_initialOrientation
    int[] RecognizerView_LayoutParams -> RecognizerView_LayoutParams
    int RecognizerView_LayoutParams_rotatable -> RecognizerView_LayoutParams_rotatable
com.cssn.samplesdk.ShowDataActivity -> com.cssn.samplesdk.ShowDataActivity:
    java.lang.String TAG -> h
    java.lang.Boolean isError -> a
    android.widget.ImageView imgFaceViewer -> b
    android.widget.ImageView imgSignatureViewer -> c
    android.widget.ImageView frontSideCardImageView -> d
    android.widget.ImageView backSideCardImageView -> e
    android.widget.TextView textViewCardInfo -> f
    int nFields -> g
    void onCreate(android.os.Bundle) -> onCreate
    void loadResult() -> a
    void setResultFields() -> b
    void setResultsForPassportCard() -> c
    void setResultsForMedicalCard() -> d
    void setResultsForDriversLicenseCard() -> e
    void setResultsForDriversLicenseCardDuplex() -> f
com.cssn.samplesdk.model.MainActivityModel -> com.cssn.samplesdk.model.MainActivityModel:
    java.lang.String TAG -> a
    int currentOptionType -> b
    android.graphics.Bitmap frontSideCardImage -> c
    android.graphics.Bitmap backSideCardImage -> d
    com.cssn.samplesdk.model.MainActivityModel$CardSide cardSideSelected -> e
    com.cssn.samplesdk.model.MainActivityModel$State state -> f
    com.cssn.samplesdk.model.MainActivityModel$State$ValidatedStateActivation validatedStateActivation -> g
    java.lang.String errorMessage -> h
    boolean isDirty -> i
    com.cssn.samplesdk.model.MainActivityModel$State$ValidatedStateActivation getValidatedStateActivation() -> a
    void setValidatedStateActivation(com.cssn.samplesdk.model.MainActivityModel$State$ValidatedStateActivation) -> a
    int getCurrentOptionType() -> b
    void setCurrentOptionType(int) -> a
    android.graphics.Bitmap getFrontSideCardImage() -> c
    void setFrontSideCardImage(android.graphics.Bitmap) -> a
    android.graphics.Bitmap getBackSideCardImage() -> d
    void setBackSideCardImage(android.graphics.Bitmap) -> b
    void clearImages() -> e
    com.cssn.samplesdk.model.MainActivityModel$CardSide getCardSideSelected() -> f
    void setCardSideSelected(com.cssn.samplesdk.model.MainActivityModel$CardSide) -> a
    com.cssn.samplesdk.model.MainActivityModel$State getState() -> g
    void setState(com.cssn.samplesdk.model.MainActivityModel$State) -> a
    java.lang.String getErrorMessage() -> h
    void setErrorMessage(java.lang.String) -> a
com.cssn.samplesdk.model.MainActivityModel$CardSide -> com.cssn.samplesdk.model.MainActivityModel$CardSide:
    com.cssn.samplesdk.model.MainActivityModel$CardSide FRONT -> a
    com.cssn.samplesdk.model.MainActivityModel$CardSide BACK -> b
    com.cssn.samplesdk.model.MainActivityModel$CardSide[] $VALUES -> c
    com.cssn.samplesdk.model.MainActivityModel$CardSide[] values() -> values
    com.cssn.samplesdk.model.MainActivityModel$CardSide valueOf(java.lang.String) -> valueOf
com.cssn.samplesdk.model.MainActivityModel$State -> com.cssn.samplesdk.model.MainActivityModel$State:
    com.cssn.samplesdk.model.MainActivityModel$State NO_VALIDATED -> a
    com.cssn.samplesdk.model.MainActivityModel$State VALIDATING -> b
    com.cssn.samplesdk.model.MainActivityModel$State VALIDATED -> c
    com.cssn.samplesdk.model.MainActivityModel$State[] $VALUES -> d
    com.cssn.samplesdk.model.MainActivityModel$State[] values() -> values
    com.cssn.samplesdk.model.MainActivityModel$State valueOf(java.lang.String) -> valueOf
com.cssn.samplesdk.model.MainActivityModel$State$ValidatedStateActivation -> com.cssn.samplesdk.model.MainActivityModel$State$ValidatedStateActivation:
    com.cssn.samplesdk.model.MainActivityModel$State$ValidatedStateActivation ACTIVATED -> a
    com.cssn.samplesdk.model.MainActivityModel$State$ValidatedStateActivation NO_ACTIVATED -> b
    com.cssn.samplesdk.model.MainActivityModel$State$ValidatedStateActivation[] $VALUES -> c
    com.cssn.samplesdk.model.MainActivityModel$State$ValidatedStateActivation[] values() -> values
    com.cssn.samplesdk.model.MainActivityModel$State$ValidatedStateActivation valueOf(java.lang.String) -> valueOf
com.cssn.samplesdk.util.CssnAlertDialog -> com.cssn.samplesdk.util.CssnAlertDialog:
    java.lang.String mTitle -> a
    java.lang.String mMessage -> b
    com.cssn.samplesdk.util.CssnAlertDialog$YesNoListener mYesNoListener -> c
    void onAttach(android.app.Activity) -> onAttach
    android.app.Dialog onCreateDialog(android.os.Bundle) -> onCreateDialog
    com.cssn.samplesdk.util.CssnAlertDialog$YesNoListener access$000(com.cssn.samplesdk.util.CssnAlertDialog) -> a
com.cssn.samplesdk.util.CssnAlertDialog$1 -> com.cssn.samplesdk.util.CssnAlertDialog$1:
    com.cssn.samplesdk.util.CssnAlertDialog this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.cssn.samplesdk.util.CssnAlertDialog$2 -> com.cssn.samplesdk.util.CssnAlertDialog$2:
    com.cssn.samplesdk.util.CssnAlertDialog this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.cssn.samplesdk.util.CssnAlertDialog$YesNoListener -> com.cssn.samplesdk.util.CssnAlertDialog$YesNoListener:
    void onYes(android.content.DialogInterface) -> a
    void onNo(android.content.DialogInterface) -> b
com.cssn.samplesdk.util.DataContext -> com.cssn.samplesdk.util.DataContext:
    java.lang.String TAG -> a
    com.cssn.samplesdk.util.DataContext instance -> b
    int cardType -> c
    com.cssn.mobilesdk.DriversLicenseCardDuplex processedLicenseCardDuplex -> d
    com.cssn.mobilesdk.DriversLicenseCard processedLicenseCard -> e
    com.cssn.mobilesdk.MedicalCard processedMedicalCard -> f
    com.cssn.mobilesdk.PassportCard processedPassportCard -> g
    com.cssn.samplesdk.model.MainActivityModel mainActivityModel -> h
    com.cssn.mobilesdk.LicenseDetails cssnLicenseDetails -> i
    java.lang.String licenseKey -> j
    android.content.Context context -> k
    com.cssn.samplesdk.util.DataContext getInstance() -> a
    java.lang.String getLicenseKey() -> b
    void setContext(android.content.Context) -> a
    void setLicenseKey(java.lang.String) -> a
    int getCardType() -> c
    void setCardType(int) -> a
    com.cssn.mobilesdk.DriversLicenseCard getProcessedLicenseCard() -> d
    com.cssn.mobilesdk.DriversLicenseCardDuplex getProcessedLicenseCardDuplex() -> e
    void setProcessedLicenseCard(com.cssn.mobilesdk.DriversLicenseCard) -> a
    void setProcessedLicenseCardDuplex(com.cssn.mobilesdk.DriversLicenseCardDuplex) -> a
    com.cssn.mobilesdk.MedicalCard getProcessedMedicalCard() -> f
    void setProcessedMedicalCard(com.cssn.mobilesdk.MedicalCard) -> a
    com.cssn.mobilesdk.PassportCard getProcessedPassportCard() -> g
    void setProcessedPassportCard(com.cssn.mobilesdk.PassportCard) -> a
    com.cssn.samplesdk.model.MainActivityModel getMainActivityModel() -> h
    void setMainActivityModel(com.cssn.samplesdk.model.MainActivityModel) -> a
    com.cssn.mobilesdk.LicenseDetails getCssnLicenseDetails() -> i
    void setCssnLicenseDetails(com.cssn.mobilesdk.LicenseDetails) -> a
    android.content.SharedPreferences getSharedPreferences() -> j
com.cssn.samplesdk.util.Util -> com.cssn.samplesdk.util.Util:
    java.lang.String TAG -> a
    android.app.AlertDialog showDialog(android.app.Activity,java.lang.String,android.content.DialogInterface$OnClickListener) -> a
    android.app.AlertDialog showDialog(android.app.Activity,java.lang.String,android.content.DialogInterface$OnClickListener,android.content.DialogInterface$OnClickListener) -> a
    android.app.ProgressDialog showProgessDialog(android.app.Activity,java.lang.String) -> a
    android.graphics.Bitmap getRoundedCornerBitmap(android.graphics.Bitmap,android.content.Context) -> a
    void dismissDialog(android.app.Dialog) -> a
    boolean isTablet(android.app.Activity) -> a
    void lockScreen(android.app.Activity) -> b
    void unLockScreen(android.app.Activity) -> c
    int getScreenOrientation(android.app.Activity) -> d
com.cssn.samplesdk.util.Util$1 -> com.cssn.samplesdk.util.Util$1:
    android.app.Activity val$context -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.cssnmobilesdk.BuildConfig -> com.cssnmobilesdk.BuildConfig:
com.cssnmobilesdk.R -> com.cssnmobilesdk.R:
com.cssnmobilesdk.R$attr -> com.cssnmobilesdk.R$attr:
com.cssnmobilesdk.R$bool -> com.cssnmobilesdk.R$bool:
    int a -> a
    int b -> b
com.cssnmobilesdk.R$color -> com.cssnmobilesdk.R$color:
    int a -> a
    int b -> b
    int c -> c
    int d -> d
    int e -> e
    int f -> f
    int g -> g
    int h -> h
    int i -> i
    int j -> j
    int k -> k
    int l -> l
    int m -> m
    int n -> n
    int o -> o
    int p -> p
    int q -> q
    int r -> r
    int s -> s
    int t -> t
    int u -> u
    int v -> v
    int w -> w
    int x -> x
    int y -> y
    int z -> z
    int A -> A
    int B -> B
    int C -> C
    int D -> D
    int E -> E
    int F -> F
com.cssnmobilesdk.R$dimen -> com.cssnmobilesdk.R$dimen:
    int a -> a
    int b -> b
com.cssnmobilesdk.R$drawable -> com.cssnmobilesdk.R$drawable:
    int a -> a
    int b -> b
    int c -> c
    int d -> d
    int e -> e
    int f -> f
    int g -> g
    int h -> h
    int i -> i
    int j -> j
    int k -> k
    int l -> l
    int m -> m
    int n -> n
com.cssnmobilesdk.R$id -> com.cssnmobilesdk.R$id:
    int a -> a
    int b -> b
    int c -> c
com.cssnmobilesdk.R$layout -> com.cssnmobilesdk.R$layout:
    int a -> a
    int b -> b
com.cssnmobilesdk.R$string -> com.cssnmobilesdk.R$string:
    int a -> a
com.cssnmobilesdk.R$style -> com.cssnmobilesdk.R$style:
    int a -> a
    int b -> b
com.cssnmobilesdk.R$styleable -> com.cssnmobilesdk.R$styleable:
    int[] a -> a
    int b -> b
    int c -> c
    int d -> d
    int[] e -> e
    int f -> f
com.google.gson.DefaultDateTypeAdapter -> com.google.gson.DefaultDateTypeAdapter:
    java.text.DateFormat enUsFormat -> a
    java.text.DateFormat localFormat -> b
    java.text.DateFormat iso8601Format -> c
    com.google.gson.JsonElement serialize(java.util.Date,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> a
    java.util.Date deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> a
    java.util.Date deserializeToDate(com.google.gson.JsonElement) -> a
    java.lang.String toString() -> toString
    com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> a
    java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> b
com.google.gson.ExclusionStrategy -> com.google.gson.ExclusionStrategy:
    boolean shouldSkipField(com.google.gson.FieldAttributes) -> a
    boolean shouldSkipClass(java.lang.Class) -> a
com.google.gson.FieldAttributes -> com.google.gson.FieldAttributes:
    java.lang.reflect.Field field -> a
com.google.gson.FieldNamingPolicy -> com.google.gson.FieldNamingPolicy:
    com.google.gson.FieldNamingPolicy IDENTITY -> a
    com.google.gson.FieldNamingPolicy UPPER_CAMEL_CASE -> b
    com.google.gson.FieldNamingPolicy UPPER_CAMEL_CASE_WITH_SPACES -> c
    com.google.gson.FieldNamingPolicy LOWER_CASE_WITH_UNDERSCORES -> d
    com.google.gson.FieldNamingPolicy LOWER_CASE_WITH_DASHES -> e
    com.google.gson.FieldNamingPolicy[] $VALUES -> f
    com.google.gson.FieldNamingPolicy[] values() -> values
    com.google.gson.FieldNamingPolicy valueOf(java.lang.String) -> valueOf
    java.lang.String separateCamelCase(java.lang.String,java.lang.String) -> b
    java.lang.String upperCaseFirstLetter(java.lang.String) -> b
    java.lang.String modifyString(char,java.lang.String,int) -> a
    java.lang.String access$100(java.lang.String) -> a
    java.lang.String access$200(java.lang.String,java.lang.String) -> a
com.google.gson.FieldNamingPolicy$1 -> com.google.gson.FieldNamingPolicy$1:
    java.lang.String translateName(java.lang.reflect.Field) -> a
com.google.gson.FieldNamingPolicy$2 -> com.google.gson.FieldNamingPolicy$2:
    java.lang.String translateName(java.lang.reflect.Field) -> a
com.google.gson.FieldNamingPolicy$3 -> com.google.gson.FieldNamingPolicy$3:
    java.lang.String translateName(java.lang.reflect.Field) -> a
com.google.gson.FieldNamingPolicy$4 -> com.google.gson.FieldNamingPolicy$4:
    java.lang.String translateName(java.lang.reflect.Field) -> a
com.google.gson.FieldNamingPolicy$5 -> com.google.gson.FieldNamingPolicy$5:
    java.lang.String translateName(java.lang.reflect.Field) -> a
com.google.gson.FieldNamingStrategy -> com.google.gson.FieldNamingStrategy:
    java.lang.String translateName(java.lang.reflect.Field) -> a
com.google.gson.Gson -> com.google.gson.Gson:
    java.lang.ThreadLocal calls -> c
    java.util.Map typeTokenCache -> d
    java.util.List factories -> e
    com.google.gson.internal.ConstructorConstructor constructorConstructor -> f
    boolean serializeNulls -> g
    boolean htmlSafe -> h
    boolean generateNonExecutableJson -> i
    boolean prettyPrinting -> j
    com.google.gson.JsonDeserializationContext deserializationContext -> a
    com.google.gson.JsonSerializationContext serializationContext -> b
    com.google.gson.TypeAdapter doubleAdapter(boolean) -> a
    com.google.gson.TypeAdapter floatAdapter(boolean) -> b
    void checkValidFloatingPoint(double) -> a
    com.google.gson.TypeAdapter longAdapter(com.google.gson.LongSerializationPolicy) -> a
    com.google.gson.TypeAdapter getAdapter(com.google.gson.reflect.TypeToken) -> a
    com.google.gson.TypeAdapter getDelegateAdapter(com.google.gson.TypeAdapterFactory,com.google.gson.reflect.TypeToken) -> a
    com.google.gson.TypeAdapter getAdapter(java.lang.Class) -> a
    java.lang.Object fromJson(java.lang.String,java.lang.Class) -> a
    java.lang.Object fromJson(java.lang.String,java.lang.reflect.Type) -> a
    java.lang.Object fromJson(java.io.Reader,java.lang.reflect.Type) -> a
    void assertFullConsumption(java.lang.Object,com.google.gson.stream.JsonReader) -> a
    java.lang.Object fromJson(com.google.gson.stream.JsonReader,java.lang.reflect.Type) -> a
    java.lang.String toString() -> toString
    void access$000(com.google.gson.Gson,double) -> a
com.google.gson.Gson$1 -> com.google.gson.Gson$1:
    com.google.gson.Gson this$0 -> a
com.google.gson.Gson$2 -> com.google.gson.Gson$2:
    com.google.gson.Gson this$0 -> a
com.google.gson.Gson$3 -> com.google.gson.Gson$3:
    com.google.gson.Gson this$0 -> a
    java.lang.Double read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.Gson$4 -> com.google.gson.Gson$4:
    com.google.gson.Gson this$0 -> a
    java.lang.Float read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.Gson$5 -> com.google.gson.Gson$5:
    com.google.gson.Gson this$0 -> a
    java.lang.Number read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.Gson$FutureTypeAdapter -> com.google.gson.Gson$FutureTypeAdapter:
    com.google.gson.TypeAdapter delegate -> a
    void setDelegate(com.google.gson.TypeAdapter) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.GsonBuilder -> com.google.gson.GsonBuilder:
    com.google.gson.internal.Excluder excluder -> a
    com.google.gson.LongSerializationPolicy longSerializationPolicy -> b
    com.google.gson.FieldNamingStrategy fieldNamingPolicy -> c
    java.util.Map instanceCreators -> d
    java.util.List factories -> e
    java.util.List hierarchyFactories -> f
    int dateStyle -> g
    int timeStyle -> h
    boolean escapeHtmlChars -> i
com.google.gson.InstanceCreator -> com.google.gson.InstanceCreator:
    java.lang.Object createInstance(java.lang.reflect.Type) -> a
com.google.gson.JsonArray -> com.google.gson.JsonArray:
    java.util.List elements -> a
    void add(com.google.gson.JsonElement) -> a
    java.util.Iterator iterator() -> iterator
    java.lang.Number getAsNumber() -> a
    java.lang.String getAsString() -> b
    double getAsDouble() -> c
    long getAsLong() -> d
    int getAsInt() -> e
    boolean getAsBoolean() -> f
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.gson.JsonDeserializationContext -> com.google.gson.JsonDeserializationContext:
com.google.gson.JsonDeserializer -> com.google.gson.JsonDeserializer:
    java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext) -> b
com.google.gson.JsonElement -> com.google.gson.JsonElement:
    boolean isJsonArray() -> g
    boolean isJsonObject() -> h
    boolean isJsonPrimitive() -> i
    boolean isJsonNull() -> j
    com.google.gson.JsonObject getAsJsonObject() -> k
    com.google.gson.JsonArray getAsJsonArray() -> l
    com.google.gson.JsonPrimitive getAsJsonPrimitive() -> m
    boolean getAsBoolean() -> f
    java.lang.Boolean getAsBooleanWrapper() -> n
    java.lang.Number getAsNumber() -> a
    java.lang.String getAsString() -> b
    double getAsDouble() -> c
    long getAsLong() -> d
    int getAsInt() -> e
    java.lang.String toString() -> toString
com.google.gson.JsonIOException -> com.google.gson.JsonIOException:
    long serialVersionUID -> serialVersionUID
com.google.gson.JsonNull -> com.google.gson.JsonNull:
    com.google.gson.JsonNull INSTANCE -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.google.gson.JsonObject -> com.google.gson.JsonObject:
    com.google.gson.internal.LinkedTreeMap members -> a
    void add(java.lang.String,com.google.gson.JsonElement) -> a
    java.util.Set entrySet() -> o
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.gson.JsonParseException -> com.google.gson.JsonParseException:
    long serialVersionUID -> serialVersionUID
com.google.gson.JsonParser -> com.google.gson.JsonParser:
com.google.gson.JsonPrimitive -> com.google.gson.JsonPrimitive:
    java.lang.Class[] PRIMITIVE_TYPES -> a
    java.lang.Object value -> b
    void setValue(java.lang.Object) -> a
    boolean isBoolean() -> o
    java.lang.Boolean getAsBooleanWrapper() -> n
    boolean getAsBoolean() -> f
    boolean isNumber() -> p
    java.lang.Number getAsNumber() -> a
    boolean isString() -> q
    java.lang.String getAsString() -> b
    double getAsDouble() -> c
    long getAsLong() -> d
    int getAsInt() -> e
    boolean isPrimitiveOrString(java.lang.Object) -> b
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    boolean isIntegral(com.google.gson.JsonPrimitive) -> a
com.google.gson.JsonSerializationContext -> com.google.gson.JsonSerializationContext:
com.google.gson.JsonSerializer -> com.google.gson.JsonSerializer:
    com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,com.google.gson.JsonSerializationContext) -> a
com.google.gson.JsonStreamParser -> com.google.gson.JsonStreamParser:
    com.google.gson.stream.JsonReader parser -> a
    java.lang.Object lock -> b
    com.google.gson.JsonElement next() -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
com.google.gson.JsonSyntaxException -> com.google.gson.JsonSyntaxException:
    long serialVersionUID -> serialVersionUID
com.google.gson.LongSerializationPolicy -> com.google.gson.LongSerializationPolicy:
    com.google.gson.LongSerializationPolicy DEFAULT -> a
    com.google.gson.LongSerializationPolicy STRING -> b
    com.google.gson.LongSerializationPolicy[] $VALUES -> c
    com.google.gson.LongSerializationPolicy[] values() -> values
    com.google.gson.LongSerializationPolicy valueOf(java.lang.String) -> valueOf
com.google.gson.LongSerializationPolicy$1 -> com.google.gson.LongSerializationPolicy$1:
com.google.gson.LongSerializationPolicy$2 -> com.google.gson.LongSerializationPolicy$2:
com.google.gson.TreeTypeAdapter -> com.google.gson.TreeTypeAdapter:
    com.google.gson.JsonSerializer serializer -> a
    com.google.gson.JsonDeserializer deserializer -> b
    com.google.gson.Gson gson -> c
    com.google.gson.reflect.TypeToken typeToken -> d
    com.google.gson.TypeAdapterFactory skipPast -> e
    com.google.gson.TypeAdapter delegate -> f
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
    com.google.gson.TypeAdapter delegate() -> a
com.google.gson.TreeTypeAdapter$1 -> com.google.gson.TreeTypeAdapter$1:
com.google.gson.TreeTypeAdapter$SingleTypeFactory -> com.google.gson.TreeTypeAdapter$SingleTypeFactory:
    com.google.gson.reflect.TypeToken exactType -> a
    boolean matchRawType -> b
    java.lang.Class hierarchyType -> c
    com.google.gson.JsonSerializer serializer -> d
    com.google.gson.JsonDeserializer deserializer -> e
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.TypeAdapter -> com.google.gson.TypeAdapter:
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
    com.google.gson.JsonElement toJsonTree(java.lang.Object) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
com.google.gson.TypeAdapter$1 -> com.google.gson.TypeAdapter$1:
    com.google.gson.TypeAdapter this$0 -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
com.google.gson.TypeAdapterFactory -> com.google.gson.TypeAdapterFactory:
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.annotations.Expose -> com.google.gson.annotations.Expose:
    boolean serialize() -> a
    boolean deserialize() -> b
com.google.gson.annotations.SerializedName -> com.google.gson.annotations.SerializedName:
    java.lang.String value() -> a
com.google.gson.annotations.Since -> com.google.gson.annotations.Since:
    double value() -> a
com.google.gson.annotations.Until -> com.google.gson.annotations.Until:
    double value() -> a
com.google.gson.internal.$Gson$Preconditions -> com.google.gson.internal.$Gson$Preconditions:
    java.lang.Object checkNotNull(java.lang.Object) -> a
    void checkArgument(boolean) -> a
com.google.gson.internal.$Gson$Types -> com.google.gson.internal.$Gson$Types:
    java.lang.reflect.Type[] EMPTY_TYPE_ARRAY -> a
    java.lang.reflect.ParameterizedType newParameterizedTypeWithOwner(java.lang.reflect.Type,java.lang.reflect.Type,java.lang.reflect.Type[]) -> a
    java.lang.reflect.GenericArrayType arrayOf(java.lang.reflect.Type) -> a
    java.lang.reflect.WildcardType subtypeOf(java.lang.reflect.Type) -> b
    java.lang.reflect.WildcardType supertypeOf(java.lang.reflect.Type) -> c
    java.lang.reflect.Type canonicalize(java.lang.reflect.Type) -> d
    java.lang.Class getRawType(java.lang.reflect.Type) -> e
    boolean equal(java.lang.Object,java.lang.Object) -> a
    boolean equals(java.lang.reflect.Type,java.lang.reflect.Type) -> a
    int hashCodeOrZero(java.lang.Object) -> b
    java.lang.String typeToString(java.lang.reflect.Type) -> f
    java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class) -> a
    java.lang.reflect.Type getSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class) -> b
    java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type) -> g
    java.lang.reflect.Type getCollectionElementType(java.lang.reflect.Type,java.lang.Class) -> a
    java.lang.reflect.Type[] getMapKeyAndValueTypes(java.lang.reflect.Type,java.lang.Class) -> b
    java.lang.reflect.Type resolve(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type) -> a
    java.lang.reflect.Type resolveTypeVariable(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.TypeVariable) -> a
    int indexOf(java.lang.Object[],java.lang.Object) -> a
    java.lang.Class declaringClassOf(java.lang.reflect.TypeVariable) -> a
    void checkNotPrimitive(java.lang.reflect.Type) -> i
    void access$000(java.lang.reflect.Type) -> h
    int access$100(java.lang.Object) -> a
com.google.gson.internal.$Gson$Types$GenericArrayTypeImpl -> com.google.gson.internal.$Gson$Types$GenericArrayTypeImpl:
    java.lang.reflect.Type componentType -> a
    long serialVersionUID -> serialVersionUID
    java.lang.reflect.Type getGenericComponentType() -> getGenericComponentType
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl -> com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl:
    java.lang.reflect.Type ownerType -> a
    java.lang.reflect.Type rawType -> b
    java.lang.reflect.Type[] typeArguments -> c
    long serialVersionUID -> serialVersionUID
    java.lang.reflect.Type[] getActualTypeArguments() -> getActualTypeArguments
    java.lang.reflect.Type getRawType() -> getRawType
    java.lang.reflect.Type getOwnerType() -> getOwnerType
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.gson.internal.$Gson$Types$WildcardTypeImpl -> com.google.gson.internal.$Gson$Types$WildcardTypeImpl:
    java.lang.reflect.Type upperBound -> a
    java.lang.reflect.Type lowerBound -> b
    long serialVersionUID -> serialVersionUID
    java.lang.reflect.Type[] getUpperBounds() -> getUpperBounds
    java.lang.reflect.Type[] getLowerBounds() -> getLowerBounds
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.gson.internal.ConstructorConstructor -> com.google.gson.internal.ConstructorConstructor:
    java.util.Map instanceCreators -> a
    com.google.gson.internal.ObjectConstructor get(com.google.gson.reflect.TypeToken) -> a
    com.google.gson.internal.ObjectConstructor newDefaultConstructor(java.lang.Class) -> a
    com.google.gson.internal.ObjectConstructor newDefaultImplementationConstructor(java.lang.reflect.Type,java.lang.Class) -> a
    com.google.gson.internal.ObjectConstructor newUnsafeAllocator(java.lang.reflect.Type,java.lang.Class) -> b
    java.lang.String toString() -> toString
com.google.gson.internal.ConstructorConstructor$1 -> com.google.gson.internal.ConstructorConstructor$1:
    com.google.gson.InstanceCreator val$typeCreator -> a
    java.lang.reflect.Type val$type -> b
    com.google.gson.internal.ConstructorConstructor this$0 -> c
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$10 -> com.google.gson.internal.ConstructorConstructor$10:
    com.google.gson.internal.ConstructorConstructor this$0 -> a
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$11 -> com.google.gson.internal.ConstructorConstructor$11:
    com.google.gson.internal.ConstructorConstructor this$0 -> a
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$12 -> com.google.gson.internal.ConstructorConstructor$12:
    com.google.gson.internal.UnsafeAllocator unsafeAllocator -> d
    java.lang.Class val$rawType -> a
    java.lang.reflect.Type val$type -> b
    com.google.gson.internal.ConstructorConstructor this$0 -> c
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$2 -> com.google.gson.internal.ConstructorConstructor$2:
    com.google.gson.InstanceCreator val$rawTypeCreator -> a
    java.lang.reflect.Type val$type -> b
    com.google.gson.internal.ConstructorConstructor this$0 -> c
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$3 -> com.google.gson.internal.ConstructorConstructor$3:
    java.lang.reflect.Constructor val$constructor -> a
    com.google.gson.internal.ConstructorConstructor this$0 -> b
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$4 -> com.google.gson.internal.ConstructorConstructor$4:
    com.google.gson.internal.ConstructorConstructor this$0 -> a
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$5 -> com.google.gson.internal.ConstructorConstructor$5:
    java.lang.reflect.Type val$type -> a
    com.google.gson.internal.ConstructorConstructor this$0 -> b
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$6 -> com.google.gson.internal.ConstructorConstructor$6:
    com.google.gson.internal.ConstructorConstructor this$0 -> a
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$7 -> com.google.gson.internal.ConstructorConstructor$7:
    com.google.gson.internal.ConstructorConstructor this$0 -> a
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$8 -> com.google.gson.internal.ConstructorConstructor$8:
    com.google.gson.internal.ConstructorConstructor this$0 -> a
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$9 -> com.google.gson.internal.ConstructorConstructor$9:
    com.google.gson.internal.ConstructorConstructor this$0 -> a
    java.lang.Object construct() -> a
com.google.gson.internal.Excluder -> com.google.gson.internal.Excluder:
    com.google.gson.internal.Excluder DEFAULT -> a
    double version -> b
    int modifiers -> c
    boolean serializeInnerClasses -> d
    boolean requireExpose -> e
    java.util.List serializationStrategies -> f
    java.util.List deserializationStrategies -> g
    com.google.gson.internal.Excluder clone() -> a
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
    boolean excludeField(java.lang.reflect.Field,boolean) -> a
    boolean excludeClass(java.lang.Class,boolean) -> a
    boolean isAnonymousOrLocal(java.lang.Class) -> a
    boolean isInnerClass(java.lang.Class) -> b
    boolean isStatic(java.lang.Class) -> c
    boolean isValidVersion(com.google.gson.annotations.Since,com.google.gson.annotations.Until) -> a
    boolean isValidSince(com.google.gson.annotations.Since) -> a
    boolean isValidUntil(com.google.gson.annotations.Until) -> a
    java.lang.Object clone() -> clone
com.google.gson.internal.Excluder$1 -> com.google.gson.internal.Excluder$1:
    com.google.gson.TypeAdapter delegate -> f
    boolean val$skipDeserialize -> a
    boolean val$skipSerialize -> b
    com.google.gson.Gson val$gson -> c
    com.google.gson.reflect.TypeToken val$type -> d
    com.google.gson.internal.Excluder this$0 -> e
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
    com.google.gson.TypeAdapter delegate() -> a
com.google.gson.internal.JsonReaderInternalAccess -> com.google.gson.internal.JsonReaderInternalAccess:
    com.google.gson.internal.JsonReaderInternalAccess INSTANCE -> a
    void promoteNameToValue(com.google.gson.stream.JsonReader) -> a
com.google.gson.internal.LazilyParsedNumber -> com.google.gson.internal.LazilyParsedNumber:
    java.lang.String value -> a
    int intValue() -> intValue
    long longValue() -> longValue
    float floatValue() -> floatValue
    double doubleValue() -> doubleValue
    java.lang.String toString() -> toString
    java.lang.Object writeReplace() -> writeReplace
com.google.gson.internal.LinkedTreeMap -> com.google.gson.internal.LinkedTreeMap:
    java.util.Comparator NATURAL_ORDER -> g
    java.util.Comparator comparator -> a
    com.google.gson.internal.LinkedTreeMap$Node root -> b
    int size -> c
    int modCount -> d
    com.google.gson.internal.LinkedTreeMap$Node header -> e
    com.google.gson.internal.LinkedTreeMap$EntrySet entrySet -> h
    com.google.gson.internal.LinkedTreeMap$KeySet keySet -> i
    boolean $assertionsDisabled -> f
    int size() -> size
    java.lang.Object get(java.lang.Object) -> get
    boolean containsKey(java.lang.Object) -> containsKey
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    void clear() -> clear
    java.lang.Object remove(java.lang.Object) -> remove
    com.google.gson.internal.LinkedTreeMap$Node find(java.lang.Object,boolean) -> a
    com.google.gson.internal.LinkedTreeMap$Node findByObject(java.lang.Object) -> a
    com.google.gson.internal.LinkedTreeMap$Node findByEntry(java.util.Map$Entry) -> a
    boolean equal(java.lang.Object,java.lang.Object) -> a
    void removeInternal(com.google.gson.internal.LinkedTreeMap$Node,boolean) -> a
    com.google.gson.internal.LinkedTreeMap$Node removeInternalByKey(java.lang.Object) -> b
    void replaceInParent(com.google.gson.internal.LinkedTreeMap$Node,com.google.gson.internal.LinkedTreeMap$Node) -> a
    void rebalance(com.google.gson.internal.LinkedTreeMap$Node,boolean) -> b
    void rotateLeft(com.google.gson.internal.LinkedTreeMap$Node) -> a
    void rotateRight(com.google.gson.internal.LinkedTreeMap$Node) -> b
    java.util.Set entrySet() -> entrySet
    java.util.Set keySet() -> keySet
    java.lang.Object writeReplace() -> writeReplace
com.google.gson.internal.LinkedTreeMap$1 -> com.google.gson.internal.LinkedTreeMap$1:
    int compare(java.lang.Comparable,java.lang.Comparable) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.google.gson.internal.LinkedTreeMap$EntrySet -> com.google.gson.internal.LinkedTreeMap$EntrySet:
    com.google.gson.internal.LinkedTreeMap this$0 -> a
    int size() -> size
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
com.google.gson.internal.LinkedTreeMap$EntrySet$1 -> com.google.gson.internal.LinkedTreeMap$EntrySet$1:
    com.google.gson.internal.LinkedTreeMap$EntrySet this$1 -> a
    java.util.Map$Entry next() -> a
    java.lang.Object next() -> next
com.google.gson.internal.LinkedTreeMap$KeySet -> com.google.gson.internal.LinkedTreeMap$KeySet:
    com.google.gson.internal.LinkedTreeMap this$0 -> a
    int size() -> size
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
com.google.gson.internal.LinkedTreeMap$KeySet$1 -> com.google.gson.internal.LinkedTreeMap$KeySet$1:
    com.google.gson.internal.LinkedTreeMap$KeySet this$1 -> a
    java.lang.Object next() -> next
com.google.gson.internal.LinkedTreeMap$LinkedTreeMapIterator -> com.google.gson.internal.LinkedTreeMap$LinkedTreeMapIterator:
    com.google.gson.internal.LinkedTreeMap$Node next -> b
    com.google.gson.internal.LinkedTreeMap$Node lastReturned -> c
    int expectedModCount -> d
    com.google.gson.internal.LinkedTreeMap this$0 -> e
    boolean hasNext() -> hasNext
    com.google.gson.internal.LinkedTreeMap$Node nextNode() -> b
    void remove() -> remove
com.google.gson.internal.LinkedTreeMap$Node -> com.google.gson.internal.LinkedTreeMap$Node:
    com.google.gson.internal.LinkedTreeMap$Node parent -> a
    com.google.gson.internal.LinkedTreeMap$Node left -> b
    com.google.gson.internal.LinkedTreeMap$Node right -> c
    com.google.gson.internal.LinkedTreeMap$Node next -> d
    com.google.gson.internal.LinkedTreeMap$Node prev -> e
    java.lang.Object key -> f
    java.lang.Object value -> g
    int height -> h
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    com.google.gson.internal.LinkedTreeMap$Node first() -> a
    com.google.gson.internal.LinkedTreeMap$Node last() -> b
com.google.gson.internal.ObjectConstructor -> com.google.gson.internal.ObjectConstructor:
    java.lang.Object construct() -> a
com.google.gson.internal.Primitives -> com.google.gson.internal.Primitives:
    java.util.Map PRIMITIVE_TO_WRAPPER_TYPE -> a
    java.util.Map WRAPPER_TO_PRIMITIVE_TYPE -> b
    void add(java.util.Map,java.util.Map,java.lang.Class,java.lang.Class) -> a
    boolean isPrimitive(java.lang.reflect.Type) -> a
    java.lang.Class wrap(java.lang.Class) -> a
com.google.gson.internal.Streams -> com.google.gson.internal.Streams:
    com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.JsonElement,com.google.gson.stream.JsonWriter) -> a
com.google.gson.internal.Streams$1 -> com.google.gson.internal.Streams$1:
com.google.gson.internal.Streams$AppendableWriter -> com.google.gson.internal.Streams$AppendableWriter:
    java.lang.Appendable appendable -> a
    com.google.gson.internal.Streams$AppendableWriter$CurrentWrite currentWrite -> b
    void write(char[],int,int) -> write
    void write(int) -> write
    void flush() -> flush
    void close() -> close
com.google.gson.internal.Streams$AppendableWriter$CurrentWrite -> com.google.gson.internal.Streams$AppendableWriter$CurrentWrite:
    char[] chars -> a
    int length() -> length
    char charAt(int) -> charAt
    java.lang.CharSequence subSequence(int,int) -> subSequence
com.google.gson.internal.UnsafeAllocator -> com.google.gson.internal.UnsafeAllocator:
    java.lang.Object newInstance(java.lang.Class) -> a
    com.google.gson.internal.UnsafeAllocator create() -> a
com.google.gson.internal.UnsafeAllocator$1 -> com.google.gson.internal.UnsafeAllocator$1:
    java.lang.reflect.Method val$allocateInstance -> a
    java.lang.Object val$unsafe -> b
    java.lang.Object newInstance(java.lang.Class) -> a
com.google.gson.internal.UnsafeAllocator$2 -> com.google.gson.internal.UnsafeAllocator$2:
    java.lang.reflect.Method val$newInstance -> a
    java.lang.Object newInstance(java.lang.Class) -> a
com.google.gson.internal.UnsafeAllocator$3 -> com.google.gson.internal.UnsafeAllocator$3:
    java.lang.reflect.Method val$newInstance -> a
    int val$constructorId -> b
    java.lang.Object newInstance(java.lang.Class) -> a
com.google.gson.internal.UnsafeAllocator$4 -> com.google.gson.internal.UnsafeAllocator$4:
    java.lang.Object newInstance(java.lang.Class) -> a
com.google.gson.internal.bind.ArrayTypeAdapter -> com.google.gson.internal.bind.ArrayTypeAdapter:
    com.google.gson.TypeAdapterFactory FACTORY -> a
    java.lang.Class componentType -> b
    com.google.gson.TypeAdapter componentTypeAdapter -> c
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.ArrayTypeAdapter$1 -> com.google.gson.internal.bind.ArrayTypeAdapter$1:
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.internal.bind.CollectionTypeAdapterFactory -> com.google.gson.internal.bind.CollectionTypeAdapterFactory:
    com.google.gson.internal.ConstructorConstructor constructorConstructor -> a
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter -> com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter:
    com.google.gson.TypeAdapter elementTypeAdapter -> a
    com.google.gson.internal.ObjectConstructor constructor -> b
    java.util.Collection read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.util.Collection) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.DateTypeAdapter -> com.google.gson.internal.bind.DateTypeAdapter:
    com.google.gson.TypeAdapterFactory FACTORY -> a
    java.text.DateFormat enUsFormat -> b
    java.text.DateFormat localFormat -> c
    java.text.DateFormat iso8601Format -> d
    java.text.DateFormat buildIso8601Format() -> a
    java.util.Date read(com.google.gson.stream.JsonReader) -> a
    java.util.Date deserializeToDate(java.lang.String) -> a
    void write(com.google.gson.stream.JsonWriter,java.util.Date) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.DateTypeAdapter$1 -> com.google.gson.internal.bind.DateTypeAdapter$1:
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.internal.bind.JsonTreeReader -> com.google.gson.internal.bind.JsonTreeReader:
    java.io.Reader UNREADABLE_READER -> a
    java.lang.Object SENTINEL_CLOSED -> b
    java.util.List stack -> c
    void beginArray() -> a
    void endArray() -> b
    void beginObject() -> c
    void endObject() -> d
    boolean hasNext() -> e
    com.google.gson.stream.JsonToken peek() -> f
    java.lang.Object peekStack() -> q
    java.lang.Object popStack() -> r
    void expect(com.google.gson.stream.JsonToken) -> a
    java.lang.String nextName() -> g
    java.lang.String nextString() -> h
    boolean nextBoolean() -> i
    void nextNull() -> j
    double nextDouble() -> k
    long nextLong() -> l
    int nextInt() -> m
    void close() -> close
    void skipValue() -> n
    java.lang.String toString() -> toString
    void promoteNameToValue() -> o
com.google.gson.internal.bind.JsonTreeReader$1 -> com.google.gson.internal.bind.JsonTreeReader$1:
    int read(char[],int,int) -> read
    void close() -> close
com.google.gson.internal.bind.JsonTreeWriter -> com.google.gson.internal.bind.JsonTreeWriter:
    java.io.Writer UNWRITABLE_WRITER -> a
    com.google.gson.JsonPrimitive SENTINEL_CLOSED -> b
    java.util.List stack -> c
    java.lang.String pendingName -> d
    com.google.gson.JsonElement product -> e
    com.google.gson.JsonElement get() -> a
    com.google.gson.JsonElement peek() -> i
    void put(com.google.gson.JsonElement) -> a
    com.google.gson.stream.JsonWriter beginArray() -> b
    com.google.gson.stream.JsonWriter endArray() -> c
    com.google.gson.stream.JsonWriter beginObject() -> d
    com.google.gson.stream.JsonWriter endObject() -> e
    com.google.gson.stream.JsonWriter name(java.lang.String) -> a
    com.google.gson.stream.JsonWriter value(java.lang.String) -> b
    com.google.gson.stream.JsonWriter nullValue() -> f
    com.google.gson.stream.JsonWriter value(boolean) -> a
    com.google.gson.stream.JsonWriter value(long) -> a
    com.google.gson.stream.JsonWriter value(java.lang.Number) -> a
    void flush() -> flush
    void close() -> close
com.google.gson.internal.bind.JsonTreeWriter$1 -> com.google.gson.internal.bind.JsonTreeWriter$1:
    void write(char[],int,int) -> write
    void flush() -> flush
    void close() -> close
com.google.gson.internal.bind.MapTypeAdapterFactory -> com.google.gson.internal.bind.MapTypeAdapterFactory:
    com.google.gson.internal.ConstructorConstructor constructorConstructor -> a
    boolean complexMapKeySerialization -> b
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
    com.google.gson.TypeAdapter getKeyAdapter(com.google.gson.Gson,java.lang.reflect.Type) -> a
    boolean access$000(com.google.gson.internal.bind.MapTypeAdapterFactory) -> a
com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter -> com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter:
    com.google.gson.TypeAdapter keyTypeAdapter -> b
    com.google.gson.TypeAdapter valueTypeAdapter -> c
    com.google.gson.internal.ObjectConstructor constructor -> d
    com.google.gson.internal.bind.MapTypeAdapterFactory this$0 -> a
    java.util.Map read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.util.Map) -> a
    java.lang.String keyToString(com.google.gson.JsonElement) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.ObjectTypeAdapter -> com.google.gson.internal.bind.ObjectTypeAdapter:
    com.google.gson.TypeAdapterFactory FACTORY -> a
    com.google.gson.Gson gson -> b
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.ObjectTypeAdapter$1 -> com.google.gson.internal.bind.ObjectTypeAdapter$1:
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.internal.bind.ObjectTypeAdapter$2 -> com.google.gson.internal.bind.ObjectTypeAdapter$2:
    int[] $SwitchMap$com$google$gson$stream$JsonToken -> a
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory -> com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:
    com.google.gson.internal.ConstructorConstructor constructorConstructor -> a
    com.google.gson.FieldNamingStrategy fieldNamingPolicy -> b
    com.google.gson.internal.Excluder excluder -> c
    boolean excludeField(java.lang.reflect.Field,boolean) -> a
    java.lang.String getFieldName(java.lang.reflect.Field) -> a
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField createBoundField(com.google.gson.Gson,java.lang.reflect.Field,java.lang.String,com.google.gson.reflect.TypeToken,boolean,boolean) -> a
    java.util.Map getBoundFields(com.google.gson.Gson,com.google.gson.reflect.TypeToken,java.lang.Class) -> a
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1 -> com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1:
    com.google.gson.TypeAdapter typeAdapter -> a
    com.google.gson.Gson val$context -> b
    com.google.gson.reflect.TypeToken val$fieldType -> c
    java.lang.reflect.Field val$field -> d
    boolean val$isPrimitive -> e
    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory this$0 -> f
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
    void read(com.google.gson.stream.JsonReader,java.lang.Object) -> a
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter -> com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter:
    com.google.gson.internal.ObjectConstructor constructor -> a
    java.util.Map boundFields -> b
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField -> com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField:
    java.lang.String name -> g
    boolean serialized -> h
    boolean deserialized -> i
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
    void read(com.google.gson.stream.JsonReader,java.lang.Object) -> a
com.google.gson.internal.bind.SqlDateTypeAdapter -> com.google.gson.internal.bind.SqlDateTypeAdapter:
    com.google.gson.TypeAdapterFactory FACTORY -> a
    java.text.DateFormat format -> b
    java.sql.Date read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.sql.Date) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.SqlDateTypeAdapter$1 -> com.google.gson.internal.bind.SqlDateTypeAdapter$1:
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.internal.bind.TimeTypeAdapter -> com.google.gson.internal.bind.TimeTypeAdapter:
    com.google.gson.TypeAdapterFactory FACTORY -> a
    java.text.DateFormat format -> b
    java.sql.Time read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.sql.Time) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TimeTypeAdapter$1 -> com.google.gson.internal.bind.TimeTypeAdapter$1:
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper -> com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper:
    com.google.gson.Gson context -> a
    com.google.gson.TypeAdapter delegate -> b
    java.lang.reflect.Type type -> c
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
    java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters -> com.google.gson.internal.bind.TypeAdapters:
    com.google.gson.TypeAdapter CLASS -> a
    com.google.gson.TypeAdapterFactory CLASS_FACTORY -> b
    com.google.gson.TypeAdapter BIT_SET -> c
    com.google.gson.TypeAdapterFactory BIT_SET_FACTORY -> d
    com.google.gson.TypeAdapter BOOLEAN -> e
    com.google.gson.TypeAdapter BOOLEAN_AS_STRING -> f
    com.google.gson.TypeAdapterFactory BOOLEAN_FACTORY -> g
    com.google.gson.TypeAdapter BYTE -> h
    com.google.gson.TypeAdapterFactory BYTE_FACTORY -> i
    com.google.gson.TypeAdapter SHORT -> j
    com.google.gson.TypeAdapterFactory SHORT_FACTORY -> k
    com.google.gson.TypeAdapter INTEGER -> l
    com.google.gson.TypeAdapterFactory INTEGER_FACTORY -> m
    com.google.gson.TypeAdapter LONG -> n
    com.google.gson.TypeAdapter FLOAT -> o
    com.google.gson.TypeAdapter DOUBLE -> p
    com.google.gson.TypeAdapter NUMBER -> q
    com.google.gson.TypeAdapterFactory NUMBER_FACTORY -> r
    com.google.gson.TypeAdapter CHARACTER -> s
    com.google.gson.TypeAdapterFactory CHARACTER_FACTORY -> t
    com.google.gson.TypeAdapter STRING -> u
    com.google.gson.TypeAdapter BIG_DECIMAL -> v
    com.google.gson.TypeAdapter BIG_INTEGER -> w
    com.google.gson.TypeAdapterFactory STRING_FACTORY -> x
    com.google.gson.TypeAdapter STRING_BUILDER -> y
    com.google.gson.TypeAdapterFactory STRING_BUILDER_FACTORY -> z
    com.google.gson.TypeAdapter STRING_BUFFER -> A
    com.google.gson.TypeAdapterFactory STRING_BUFFER_FACTORY -> B
    com.google.gson.TypeAdapter URL -> C
    com.google.gson.TypeAdapterFactory URL_FACTORY -> D
    com.google.gson.TypeAdapter URI -> E
    com.google.gson.TypeAdapterFactory URI_FACTORY -> F
    com.google.gson.TypeAdapter INET_ADDRESS -> G
    com.google.gson.TypeAdapterFactory INET_ADDRESS_FACTORY -> H
    com.google.gson.TypeAdapter UUID -> I
    com.google.gson.TypeAdapterFactory UUID_FACTORY -> J
    com.google.gson.TypeAdapterFactory TIMESTAMP_FACTORY -> K
    com.google.gson.TypeAdapter CALENDAR -> L
    com.google.gson.TypeAdapterFactory CALENDAR_FACTORY -> M
    com.google.gson.TypeAdapter LOCALE -> N
    com.google.gson.TypeAdapterFactory LOCALE_FACTORY -> O
    com.google.gson.TypeAdapter JSON_ELEMENT -> P
    com.google.gson.TypeAdapterFactory JSON_ELEMENT_FACTORY -> Q
    com.google.gson.TypeAdapterFactory ENUM_FACTORY -> R
    com.google.gson.TypeAdapterFactory newEnumTypeHierarchyFactory() -> a
    com.google.gson.TypeAdapterFactory newFactory(java.lang.Class,com.google.gson.TypeAdapter) -> a
    com.google.gson.TypeAdapterFactory newFactory(java.lang.Class,java.lang.Class,com.google.gson.TypeAdapter) -> a
    com.google.gson.TypeAdapterFactory newFactoryForMultipleTypes(java.lang.Class,java.lang.Class,com.google.gson.TypeAdapter) -> b
    com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class,com.google.gson.TypeAdapter) -> b
com.google.gson.internal.bind.TypeAdapters$1 -> com.google.gson.internal.bind.TypeAdapters$1:
    void write(com.google.gson.stream.JsonWriter,java.lang.Class) -> a
    java.lang.Class read(com.google.gson.stream.JsonReader) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$10 -> com.google.gson.internal.bind.TypeAdapters$10:
    java.lang.Number read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$11 -> com.google.gson.internal.bind.TypeAdapters$11:
    java.lang.Number read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$12 -> com.google.gson.internal.bind.TypeAdapters$12:
    java.lang.Character read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Character) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$13 -> com.google.gson.internal.bind.TypeAdapters$13:
    java.lang.String read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.String) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$14 -> com.google.gson.internal.bind.TypeAdapters$14:
    java.math.BigDecimal read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.math.BigDecimal) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$15 -> com.google.gson.internal.bind.TypeAdapters$15:
    java.math.BigInteger read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.math.BigInteger) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$16 -> com.google.gson.internal.bind.TypeAdapters$16:
    java.lang.StringBuilder read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.StringBuilder) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$17 -> com.google.gson.internal.bind.TypeAdapters$17:
    java.lang.StringBuffer read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.StringBuffer) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$18 -> com.google.gson.internal.bind.TypeAdapters$18:
    java.net.URL read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.net.URL) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$19 -> com.google.gson.internal.bind.TypeAdapters$19:
    java.net.URI read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.net.URI) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$2 -> com.google.gson.internal.bind.TypeAdapters$2:
    java.util.BitSet read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.util.BitSet) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$20 -> com.google.gson.internal.bind.TypeAdapters$20:
    java.net.InetAddress read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.net.InetAddress) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$21 -> com.google.gson.internal.bind.TypeAdapters$21:
    java.util.UUID read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.util.UUID) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$22 -> com.google.gson.internal.bind.TypeAdapters$22:
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.internal.bind.TypeAdapters$22$1 -> com.google.gson.internal.bind.TypeAdapters$22$1:
    com.google.gson.TypeAdapter val$dateTypeAdapter -> a
    com.google.gson.internal.bind.TypeAdapters$22 this$0 -> b
    java.sql.Timestamp read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.sql.Timestamp) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$23 -> com.google.gson.internal.bind.TypeAdapters$23:
    java.util.Calendar read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.util.Calendar) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$24 -> com.google.gson.internal.bind.TypeAdapters$24:
    java.util.Locale read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.util.Locale) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$25 -> com.google.gson.internal.bind.TypeAdapters$25:
    com.google.gson.JsonElement read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,com.google.gson.JsonElement) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$26 -> com.google.gson.internal.bind.TypeAdapters$26:
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.internal.bind.TypeAdapters$27 -> com.google.gson.internal.bind.TypeAdapters$27:
    com.google.gson.reflect.TypeToken val$type -> a
    com.google.gson.TypeAdapter val$typeAdapter -> b
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.internal.bind.TypeAdapters$28 -> com.google.gson.internal.bind.TypeAdapters$28:
    java.lang.Class val$type -> a
    com.google.gson.TypeAdapter val$typeAdapter -> b
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
    java.lang.String toString() -> toString
com.google.gson.internal.bind.TypeAdapters$29 -> com.google.gson.internal.bind.TypeAdapters$29:
    java.lang.Class val$unboxed -> a
    java.lang.Class val$boxed -> b
    com.google.gson.TypeAdapter val$typeAdapter -> c
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
    java.lang.String toString() -> toString
com.google.gson.internal.bind.TypeAdapters$3 -> com.google.gson.internal.bind.TypeAdapters$3:
    java.lang.Boolean read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Boolean) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$30 -> com.google.gson.internal.bind.TypeAdapters$30:
    java.lang.Class val$base -> a
    java.lang.Class val$sub -> b
    com.google.gson.TypeAdapter val$typeAdapter -> c
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
    java.lang.String toString() -> toString
com.google.gson.internal.bind.TypeAdapters$31 -> com.google.gson.internal.bind.TypeAdapters$31:
    java.lang.Class val$clazz -> a
    com.google.gson.TypeAdapter val$typeAdapter -> b
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
    java.lang.String toString() -> toString
com.google.gson.internal.bind.TypeAdapters$32 -> com.google.gson.internal.bind.TypeAdapters$32:
    int[] $SwitchMap$com$google$gson$stream$JsonToken -> a
com.google.gson.internal.bind.TypeAdapters$4 -> com.google.gson.internal.bind.TypeAdapters$4:
    java.lang.Boolean read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Boolean) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$5 -> com.google.gson.internal.bind.TypeAdapters$5:
    java.lang.Number read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$6 -> com.google.gson.internal.bind.TypeAdapters$6:
    java.lang.Number read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$7 -> com.google.gson.internal.bind.TypeAdapters$7:
    java.lang.Number read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$8 -> com.google.gson.internal.bind.TypeAdapters$8:
    java.lang.Number read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$9 -> com.google.gson.internal.bind.TypeAdapters$9:
    java.lang.Number read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter -> com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter:
    java.util.Map nameToConstant -> a
    java.util.Map constantToName -> b
    java.lang.Enum read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Enum) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.reflect.TypeToken -> com.google.gson.reflect.TypeToken:
    java.lang.Class rawType -> a
    java.lang.reflect.Type type -> b
    int hashCode -> c
    java.lang.reflect.Type getSuperclassTypeParameter(java.lang.Class) -> a
    java.lang.Class getRawType() -> a
    java.lang.reflect.Type getType() -> b
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    com.google.gson.reflect.TypeToken get(java.lang.reflect.Type) -> a
    com.google.gson.reflect.TypeToken get(java.lang.Class) -> b
com.google.gson.stream.JsonReader -> com.google.gson.stream.JsonReader:
    char[] NON_EXECUTE_PREFIX -> a
    java.io.Reader in -> b
    boolean lenient -> c
    char[] buffer -> d
    int pos -> e
    int limit -> f
    int lineNumber -> g
    int lineStart -> h
    int peeked -> i
    long peekedLong -> j
    int peekedNumberLength -> k
    java.lang.String peekedString -> l
    int[] stack -> m
    int stackSize -> n
    void setLenient(boolean) -> a
    boolean isLenient() -> p
    void beginArray() -> a
    void endArray() -> b
    void beginObject() -> c
    void endObject() -> d
    boolean hasNext() -> e
    com.google.gson.stream.JsonToken peek() -> f
    int doPeek() -> o
    int peekKeyword() -> q
    int peekNumber() -> r
    boolean isLiteral(char) -> a
    java.lang.String nextName() -> g
    java.lang.String nextString() -> h
    boolean nextBoolean() -> i
    void nextNull() -> j
    double nextDouble() -> k
    long nextLong() -> l
    java.lang.String nextQuotedValue(char) -> b
    java.lang.String nextUnquotedValue() -> s
    void skipQuotedValue(char) -> c
    void skipUnquotedValue() -> t
    int nextInt() -> m
    void close() -> close
    void skipValue() -> n
    void push(int) -> a
    boolean fillBuffer(int) -> b
    int getLineNumber() -> u
    int getColumnNumber() -> v
    int nextNonWhitespace(boolean) -> b
    void checkLenient() -> w
    void skipToEndOfLine() -> x
    boolean skipTo(java.lang.String) -> a
    java.lang.String toString() -> toString
    char readEscapeCharacter() -> y
    java.io.IOException syntaxError(java.lang.String) -> b
    void consumeNonExecutePrefix() -> z
    int access$000(com.google.gson.stream.JsonReader) -> a
    int access$100(com.google.gson.stream.JsonReader) -> b
    int access$002(com.google.gson.stream.JsonReader,int) -> a
    int access$200(com.google.gson.stream.JsonReader) -> c
    int access$300(com.google.gson.stream.JsonReader) -> d
com.google.gson.stream.JsonReader$1 -> com.google.gson.stream.JsonReader$1:
    void promoteNameToValue(com.google.gson.stream.JsonReader) -> a
com.google.gson.stream.JsonScope -> com.google.gson.stream.JsonScope:
com.google.gson.stream.JsonToken -> com.google.gson.stream.JsonToken:
    com.google.gson.stream.JsonToken BEGIN_ARRAY -> a
    com.google.gson.stream.JsonToken END_ARRAY -> b
    com.google.gson.stream.JsonToken BEGIN_OBJECT -> c
    com.google.gson.stream.JsonToken END_OBJECT -> d
    com.google.gson.stream.JsonToken NAME -> e
    com.google.gson.stream.JsonToken STRING -> f
    com.google.gson.stream.JsonToken NUMBER -> g
    com.google.gson.stream.JsonToken BOOLEAN -> h
    com.google.gson.stream.JsonToken NULL -> i
    com.google.gson.stream.JsonToken END_DOCUMENT -> j
    com.google.gson.stream.JsonToken[] $VALUES -> k
    com.google.gson.stream.JsonToken[] values() -> values
    com.google.gson.stream.JsonToken valueOf(java.lang.String) -> valueOf
com.google.gson.stream.JsonWriter -> com.google.gson.stream.JsonWriter:
    java.lang.String[] REPLACEMENT_CHARS -> a
    java.lang.String[] HTML_SAFE_REPLACEMENT_CHARS -> b
    java.io.Writer out -> c
    int[] stack -> d
    int stackSize -> e
    java.lang.String indent -> f
    java.lang.String separator -> g
    boolean lenient -> h
    boolean htmlSafe -> i
    java.lang.String deferredName -> j
    boolean serializeNulls -> k
    void setLenient(boolean) -> b
    boolean isLenient() -> g
    boolean getSerializeNulls() -> h
    com.google.gson.stream.JsonWriter beginArray() -> b
    com.google.gson.stream.JsonWriter endArray() -> c
    com.google.gson.stream.JsonWriter beginObject() -> d
    com.google.gson.stream.JsonWriter endObject() -> e
    com.google.gson.stream.JsonWriter open(int,java.lang.String) -> a
    com.google.gson.stream.JsonWriter close(int,int,java.lang.String) -> a
    void push(int) -> a
    int peek() -> a
    void replaceTop(int) -> b
    com.google.gson.stream.JsonWriter name(java.lang.String) -> a
    void writeDeferredName() -> i
    com.google.gson.stream.JsonWriter value(java.lang.String) -> b
    com.google.gson.stream.JsonWriter nullValue() -> f
    com.google.gson.stream.JsonWriter value(boolean) -> a
    com.google.gson.stream.JsonWriter value(long) -> a
    com.google.gson.stream.JsonWriter value(java.lang.Number) -> a
    void flush() -> flush
    void close() -> close
    void string(java.lang.String) -> c
    void newline() -> j
    void beforeName() -> k
    void beforeValue(boolean) -> c
com.google.gson.stream.MalformedJsonException -> com.google.gson.stream.MalformedJsonException:
    long serialVersionUID -> serialVersionUID
com.microblink.activity.BaseScanActivity -> com.microblink.activity.BaseScanActivity:
    java.lang.String EXTRAS_CAMERA_TYPE -> EXTRAS_CAMERA_TYPE
    java.lang.String EXTRAS_HELP_INTENT -> EXTRAS_HELP_INTENT
    java.lang.String EXTRAS_LICENSE_KEY -> EXTRAS_LICENSE_KEY
    java.lang.String EXTRAS_LICENSEE -> EXTRAS_LICENSEE
    java.lang.String EXTRAS_RECOGNIZER_SETTINGS_ARRAY -> EXTRAS_RECOGNIZER_SETTINGS_ARRAY
    java.lang.String EXTRAS_GENERIC_SETTINGS -> EXTRAS_GENERIC_SETTINGS
    java.lang.String EXTRAS_ROI -> EXTRAS_ROI
    java.lang.String EXTRAS_ROTATE_ROI -> EXTRAS_ROTATE_ROI
    java.lang.String EXTRAS_RECOGNITION_RESULT_LIST -> EXTRAS_RECOGNITION_RESULT_LIST
    java.lang.String EXTRAS_SHOW_FOCUS_RECTANGLE -> EXTRAS_SHOW_FOCUS_RECTANGLE
    java.lang.String EXTRAS_BEEP_RESOURCE -> EXTRAS_BEEP_RESOURCE
    java.lang.String EXTRAS_OPTIMIZE_CAMERA_FOR_NEAR_SCANNING -> EXTRAS_OPTIMIZE_CAMERA_FOR_NEAR_SCANNING
    java.lang.String EXTRAS_VIEWFINDER_MOVEABLE -> EXTRAS_VIEWFINDER_MOVEABLE
    java.lang.String EXTRAS_IMAGE_LISTENER -> EXTRAS_IMAGE_LISTENER
    android.content.Intent mHelpIntent -> mHelpIntent
    boolean llIIlIlIIl -> llIIlIlIIl
    boolean mShowOcrResult -> mShowOcrResult
    boolean mShowLineDetectionResult -> mShowLineDetectionResult
    com.microblink.view.recognition.RecognizerView llIIlIlIIl -> llIIlIlIIl
    android.media.MediaPlayer llIIlIlIIl -> llIIlIlIIl
    int llIIlIlIIl -> llIIlIlIIl
    android.view.ViewGroup mLayout -> mLayout
    android.widget.Button mHelpButton -> mHelpButton
    android.widget.Button mBackButton -> mBackButton
    android.widget.Button mTorchButton -> mTorchButton
    boolean IlIllIlIIl -> IlIllIlIIl
    android.widget.TextView mStatusTextView -> mStatusTextView
    android.widget.TextView mDebugStatus -> mDebugStatus
    com.microblink.view.viewfinder.QuadView mQuadView -> mQuadView
    com.microblink.view.viewfinder.PointSetView mPointSetView -> mPointSetView
    android.os.Handler mHandler -> mHandler
    com.microblink.util.FakeR mR -> mR
    android.widget.FrameLayout llIIlIlIIl -> llIIlIlIIl
    android.view.View llIIlIlIIl -> llIIlIlIIl
    com.microblink.view.viewfinder.IlIllIlIIl mRectView -> mRectView
    boolean mShowFocusRectangle -> mShowFocusRectangle
    com.microblink.recognizers.settings.RecognizerSettings[] mSettings -> mSettings
    com.microblink.recognizers.settings.GenericRecognizerSettings mGenericRecognizerSettings -> mGenericRecognizerSettings
    boolean IllIIIllII -> IllIIIllII
    com.microblink.image.ImageListener mImageListener -> mImageListener
    void onCreate(android.os.Bundle) -> onCreate
    void initDebugStatus() -> initDebugStatus
    void soundNotification() -> soundNotification
    void onStart() -> onStart
    void onResume() -> onResume
    void onPause() -> onPause
    void onStop() -> onStop
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onDestroy() -> onDestroy
    com.microblink.view.viewfinder.QuadView createQuadView(boolean,int) -> createQuadView
    com.microblink.view.viewfinder.PointSetView createPointSetView() -> createPointSetView
    void addChildViews(com.microblink.view.recognition.RecognizerView) -> addChildViews
    void postDisplayMessage(java.lang.CharSequence) -> postDisplayMessage
    void displayMessageImmediately(java.lang.CharSequence) -> displayMessageImmediately
    void llIIlIlIIl() -> llIIlIlIIl
    void finishAndWaitForAnimation() -> finishAndWaitForAnimation
    boolean isFinishing() -> isFinishing
    void onDisplayDebugString(java.lang.String) -> onDisplayDebugString
    boolean isOrientationAllowed(com.microblink.hardware.orientation.Orientation) -> isOrientationAllowed
    void setHelpButtonEnabled(boolean) -> setHelpButtonEnabled
    void displayDetectionStatus(com.microblink.view.recognition.DetectionStatus) -> displayDetectionStatus
    void onNothingDetected() -> onNothingDetected
    void onDisplayPointsOfInterest(java.util.List,com.microblink.view.recognition.DetectionStatus) -> onDisplayPointsOfInterest
    void onDisplayQuadrilateralObject(com.microblink.geometry.Quadrilateral,com.microblink.view.recognition.DetectionStatus) -> onDisplayQuadrilateralObject
    void onAutofocusFailed() -> onAutofocusFailed
    void onAutofocusStopped(android.graphics.Rect[]) -> onAutofocusStopped
    void onAutofocusStarted(android.graphics.Rect[]) -> onAutofocusStarted
    void onSizeChanged(int,int) -> onSizeChanged
    void onCameraPreviewStarted() -> onCameraPreviewStarted
    void onStartupError(java.lang.Throwable) -> onStartupError
    java.lang.String llIIlIlIIl(com.microblink.view.NotSupportedReason) -> llIIlIlIIl
    void onNotSupported(com.microblink.view.NotSupportedReason) -> onNotSupported
    void IlIllIlIIl() -> IlIllIlIIl
    void IllIIIllII() -> IllIIIllII
    void llIIlIlIIl(java.lang.String) -> llIIlIlIIl
    void llIIIlllll() -> llIIIlllll
    com.microblink.view.recognition.RecognizerView getRecognizerView() -> getRecognizerView
    com.microblink.hardware.orientation.Orientation getDefaultOrientation() -> getDefaultOrientation
    com.microblink.view.recognition.RecognizerView createRecognizerView(android.os.Bundle) -> createRecognizerView
    void onScanningDone(com.microblink.recognizers.BaseRecognitionResult[],com.microblink.view.recognition.RecognitionType) -> onScanningDone
    void onConfigureRecognizerView(com.microblink.view.recognition.RecognizerView,android.os.Bundle) -> onConfigureRecognizerView
    android.media.MediaPlayer llIIlIlIIl(com.microblink.activity.BaseScanActivity) -> llIIlIlIIl
    boolean llIIlIlIIl(com.microblink.activity.BaseScanActivity) -> llIIlIlIIl
    boolean llIIlIlIIl(com.microblink.activity.BaseScanActivity,boolean) -> llIIlIlIIl
    com.microblink.view.recognition.RecognizerView llIIlIlIIl(com.microblink.activity.BaseScanActivity) -> llIIlIlIIl
    void llIIlIlIIl(com.microblink.activity.BaseScanActivity) -> llIIlIlIIl
    android.view.View llIIlIlIIl(com.microblink.activity.BaseScanActivity) -> llIIlIlIIl
com.microblink.activity.BaseScanActivity$1 -> com.microblink.activity.BaseScanActivity$1:
    com.microblink.activity.BaseScanActivity llIIlIlIIl -> llIIlIlIIl
    void onCompletion(android.media.MediaPlayer) -> onCompletion
com.microblink.activity.BaseScanActivity$10 -> com.microblink.activity.BaseScanActivity$10:
    com.microblink.activity.BaseScanActivity llIIlIlIIl -> llIIlIlIIl
    void onClick(android.content.DialogInterface,int) -> onClick
com.microblink.activity.BaseScanActivity$11 -> com.microblink.activity.BaseScanActivity$11:
    com.microblink.activity.BaseScanActivity llIIlIlIIl -> llIIlIlIIl
    void onClick(android.content.DialogInterface,int) -> onClick
com.microblink.activity.BaseScanActivity$12 -> com.microblink.activity.BaseScanActivity$12:
    com.microblink.activity.BaseScanActivity llIIlIlIIl -> llIIlIlIIl
    void onClick(android.content.DialogInterface,int) -> onClick
com.microblink.activity.BaseScanActivity$13 -> com.microblink.activity.BaseScanActivity$13:
    int[] llIIlIlIIl -> llIIlIlIIl
    int[] IlIllIlIIl -> IlIllIlIIl
com.microblink.activity.BaseScanActivity$2 -> com.microblink.activity.BaseScanActivity$2:
    com.microblink.activity.BaseScanActivity llIIlIlIIl -> llIIlIlIIl
    void onClick(android.view.View) -> onClick
com.microblink.activity.BaseScanActivity$3 -> com.microblink.activity.BaseScanActivity$3:
    com.microblink.activity.BaseScanActivity llIIlIlIIl -> llIIlIlIIl
    void onClick(android.view.View) -> onClick
com.microblink.activity.BaseScanActivity$4 -> com.microblink.activity.BaseScanActivity$4:
    java.lang.CharSequence llIIlIlIIl -> llIIlIlIIl
    com.microblink.activity.BaseScanActivity llIIlIlIIl -> llIIlIlIIl
    void run() -> run
com.microblink.activity.BaseScanActivity$5 -> com.microblink.activity.BaseScanActivity$5:
    com.microblink.activity.BaseScanActivity llIIlIlIIl -> llIIlIlIIl
    void onClick(android.view.View) -> onClick
com.microblink.activity.BaseScanActivity$5$1 -> com.microblink.activity.BaseScanActivity$5$1:
    com.microblink.activity.BaseScanActivity$5 llIIlIlIIl -> llIIlIlIIl
    void onOperationDone(boolean) -> onOperationDone
com.microblink.activity.BaseScanActivity$5$1$1 -> com.microblink.activity.BaseScanActivity$5$1$1:
    boolean llIIIlllll -> llIIIlllll
    com.microblink.activity.BaseScanActivity$5$1 llIIlIlIIl -> llIIlIlIIl
    void run() -> run
com.microblink.activity.BaseScanActivity$6 -> com.microblink.activity.BaseScanActivity$6:
    java.util.Timer llIIlIlIIl -> llIIlIlIIl
    com.microblink.activity.BaseScanActivity llIIlIlIIl -> llIIlIlIIl
    void run() -> run
com.microblink.activity.BaseScanActivity$7 -> com.microblink.activity.BaseScanActivity$7:
    java.lang.String llIIlIlIIl -> llIIlIlIIl
    com.microblink.activity.BaseScanActivity llIIlIlIIl -> llIIlIlIIl
    void run() -> run
com.microblink.activity.BaseScanActivity$8 -> com.microblink.activity.BaseScanActivity$8:
    com.microblink.activity.BaseScanActivity llIIlIlIIl -> llIIlIlIIl
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
com.microblink.activity.BaseScanActivity$9 -> com.microblink.activity.BaseScanActivity$9:
    com.microblink.activity.BaseScanActivity llIIlIlIIl -> llIIlIlIIl
    void onClick(android.content.DialogInterface,int) -> onClick
com.microblink.activity.Pdf417ScanActivity -> com.microblink.activity.Pdf417ScanActivity:
    java.lang.String EXTRAS_SHOW_DIALOG_AFTER_SCAN -> EXTRAS_SHOW_DIALOG_AFTER_SCAN
    int RESULT_OK -> RESULT_OK
    int RESULT_OK_DATA_COPIED -> RESULT_OK_DATA_COPIED
    boolean mShowDialog -> mShowDialog
    void addChildViews(com.microblink.view.recognition.RecognizerView) -> addChildViews
    void onConfigureRecognizerView(com.microblink.view.recognition.RecognizerView,android.os.Bundle) -> onConfigureRecognizerView
    void onBackPressed() -> onBackPressed
    void setResultAndFinish(com.microblink.recognizers.BaseRecognitionResult[],int) -> setResultAndFinish
    void onScanningDone(com.microblink.recognizers.BaseRecognitionResult[],com.microblink.view.recognition.RecognitionType) -> onScanningDone
    void llIIlIlIIl(com.microblink.recognizers.BaseRecognitionResult[]) -> llIIlIlIIl
    void llIIlIlIIl(com.microblink.recognizers.BaseRecognitionResult) -> llIIlIlIIl
com.microblink.activity.Pdf417ScanActivity$1 -> com.microblink.activity.Pdf417ScanActivity$1:
    com.microblink.activity.Pdf417ScanActivity llIIlIlIIl -> llIIlIlIIl
    void onClick(android.view.View) -> onClick
com.microblink.activity.Pdf417ScanActivity$2 -> com.microblink.activity.Pdf417ScanActivity$2:
    java.lang.String IlIllIlIIl -> IlIllIlIIl
    com.microblink.recognizers.BaseRecognitionResult[] llIIlIlIIl -> llIIlIlIIl
    com.microblink.activity.Pdf417ScanActivity llIIlIlIIl -> llIIlIlIIl
    void onClick(android.content.DialogInterface,int) -> onClick
com.microblink.activity.Pdf417ScanActivity$3 -> com.microblink.activity.Pdf417ScanActivity$3:
    com.microblink.activity.Pdf417ScanActivity llIIlIlIIl -> llIIlIlIIl
    void onClick(android.content.DialogInterface,int) -> onClick
com.microblink.activity.Pdf417ScanActivity$4 -> com.microblink.activity.Pdf417ScanActivity$4:
    com.microblink.recognizers.BaseRecognitionResult[] llIIlIlIIl -> llIIlIlIIl
    com.microblink.activity.Pdf417ScanActivity llIIlIlIIl -> llIIlIlIIl
    void onClick(android.content.DialogInterface,int) -> onClick
com.microblink.activity.Pdf417ScanActivity$5 -> com.microblink.activity.Pdf417ScanActivity$5:
    com.microblink.recognizers.BaseRecognitionResult llIIlIlIIl -> llIIlIlIIl
    com.microblink.activity.Pdf417ScanActivity llIIlIlIIl -> llIIlIlIIl
    void onClick(android.content.DialogInterface,int) -> onClick
com.microblink.activity.Pdf417ScanActivity$6 -> com.microblink.activity.Pdf417ScanActivity$6:
    com.microblink.activity.Pdf417ScanActivity llIIlIlIIl -> llIIlIlIIl
    void onClick(android.content.DialogInterface,int) -> onClick
com.microblink.activity.Pdf417ScanActivity$7 -> com.microblink.activity.Pdf417ScanActivity$7:
    com.microblink.recognizers.BaseRecognitionResult llIIlIlIIl -> llIIlIlIIl
    com.microblink.activity.Pdf417ScanActivity llIIlIlIIl -> llIIlIlIIl
    void onClick(android.content.DialogInterface,int) -> onClick
com.microblink.config.llIIlIlIIl -> com.microblink.config.llIIlIlIIl:
    java.lang.String[] llIIlIlIIl -> llIIlIlIIl
com.microblink.directApi.Recognizer -> com.microblink.directApi.Recognizer:
    com.microblink.recognition.NativeRecognizerWrapper llIIlIlIIl -> llIIlIlIIl
    com.microblink.view.recognition.ScanResultListener llIIlIlIIl -> llIIlIlIIl
    com.microblink.image.ImageListener mImageListener -> mImageListener
    com.microblink.directApi.Recognizer$State llIIlIlIIl -> llIIlIlIIl
    com.microblink.directApi.Recognizer llIIlIlIIl -> llIIlIlIIl
    com.microblink.recognition.RecognizerDelegate llIIlIlIIl -> llIIlIlIIl
    com.microblink.recognition.NativeRecognizerWrapper$llIIlIlIIl llIIlIlIIl -> llIIlIlIIl
    com.microblink.directApi.Recognizer getSingletonInstance() -> getSingletonInstance
    com.microblink.directApi.Recognizer$State getCurrentState() -> getCurrentState
    boolean setLicenseKey(android.content.Context,java.lang.String) -> setLicenseKey
    boolean setLicenseKey(java.lang.String,java.lang.String) -> setLicenseKey
    void initialize(android.content.Context,com.microblink.recognizers.settings.GenericRecognizerSettings,com.microblink.recognizers.settings.RecognizerSettings[]) -> initialize
    void recognize(android.graphics.Bitmap,com.microblink.view.recognition.ScanResultListener) -> recognize
    void recognize(android.graphics.Bitmap,com.microblink.geometry.Rectangle,com.microblink.view.recognition.ScanResultListener) -> recognize
    void terminate() -> terminate
    void IlIllIlIIl(com.microblink.recognizers.BaseRecognitionResult[]) -> IlIllIlIIl
    void setImageListener(com.microblink.image.ImageListener) -> setImageListener
    com.microblink.image.ImageListener llIIlIlIIl(com.microblink.directApi.Recognizer) -> llIIlIlIIl
    void llIIlIlIIl(com.microblink.directApi.Recognizer,com.microblink.recognizers.BaseRecognitionResult[]) -> llIIlIlIIl
com.microblink.directApi.Recognizer$1 -> com.microblink.directApi.Recognizer$1:
    boolean IllIIIIllI -> IllIIIIllI
    com.microblink.directApi.Recognizer IlIllIlIIl -> IlIllIlIIl
    void onDetectionStarted() -> onDetectionStarted
    void onDetectionFailed() -> onDetectionFailed
    boolean onDetectedForm(float[],int,int) -> onDetectedForm
    void setScanningRegion(com.microblink.geometry.Rectangle) -> setScanningRegion
    boolean shouldRecognitionStop() -> shouldRecognitionStop
    void onRecognitionStarted() -> onRecognitionStarted
    void onRecognitionFinished(boolean) -> onRecognitionFinished
    void setPaused(boolean) -> setPaused
    void onDisplayOcrResult(com.microblink.results.ocr.OcrResult) -> onDisplayOcrResult
    void onDisplayLineDetectionResult(com.microblink.results.lines.LineDetectionResult) -> onDisplayLineDetectionResult
    boolean isImageCallbackAvailable() -> isImageCallbackAvailable
    void onImageAvailable(com.microblink.image.Image) -> onImageAvailable
com.microblink.directApi.Recognizer$2 -> com.microblink.directApi.Recognizer$2:
    com.microblink.directApi.Recognizer IlIllIlIIl -> IlIllIlIIl
    void onRecognitionDone(com.microblink.recognizers.BaseRecognitionResult[]) -> onRecognitionDone
    void onRecognitionDoneWithTimeout(com.microblink.recognizers.BaseRecognitionResult[]) -> onRecognitionDoneWithTimeout
com.microblink.directApi.Recognizer$State -> com.microblink.directApi.Recognizer$State:
    com.microblink.directApi.Recognizer$State OFFLINE -> OFFLINE
    com.microblink.directApi.Recognizer$State UNLOCKED -> UNLOCKED
    com.microblink.directApi.Recognizer$State READY -> READY
    com.microblink.directApi.Recognizer$State WORKING -> WORKING
    com.microblink.directApi.Recognizer$State[] $VALUES -> $VALUES
    com.microblink.directApi.Recognizer$State[] values() -> values
    com.microblink.directApi.Recognizer$State valueOf(java.lang.String) -> valueOf
com.microblink.geometry.LineSegment -> com.microblink.geometry.LineSegment:
    com.microblink.geometry.Point llIIlIlIIl -> llIIlIlIIl
    com.microblink.geometry.Point IlIllIlIIl -> IlIllIlIIl
    com.microblink.geometry.Point getStart() -> getStart
    void setStart(com.microblink.geometry.Point) -> setStart
    com.microblink.geometry.Point getEnd() -> getEnd
    void setEnd(com.microblink.geometry.Point) -> setEnd
    void log() -> log
    void draw(android.graphics.Canvas,android.graphics.Paint) -> draw
com.microblink.geometry.Point -> com.microblink.geometry.Point:
    float mX -> mX
    float mY -> mY
    float mNorm -> mNorm
    com.microblink.geometry.Point operatorPlus(com.microblink.geometry.Point) -> operatorPlus
    void operatorPlusEquals(com.microblink.geometry.Point) -> operatorPlusEquals
    com.microblink.geometry.Point operatorMinus(com.microblink.geometry.Point) -> operatorMinus
    com.microblink.geometry.Point operatorMinusEquals(com.microblink.geometry.Point) -> operatorMinusEquals
    com.microblink.geometry.Point operatorMultiply(float) -> operatorMultiply
    com.microblink.geometry.Point operatorMultiplyEquals(float) -> operatorMultiplyEquals
    com.microblink.geometry.Point negativeClone() -> negativeClone
    com.microblink.geometry.Point negative() -> negative
    float norm() -> norm
    com.microblink.geometry.Point normalize() -> normalize
    com.microblink.geometry.Point normalize(float) -> normalize
    com.microblink.geometry.Point clamp(float) -> clamp
    com.microblink.geometry.Point clamp(float,float) -> clamp
    com.microblink.geometry.Point mirrorX(float) -> mirrorX
    com.microblink.geometry.Point mirrorY(float) -> mirrorY
    com.microblink.geometry.Point mirrorXY(float,float) -> mirrorXY
    com.microblink.geometry.Point clone() -> clone
    boolean equals(java.lang.Object) -> equals
    float distance(com.microblink.geometry.Point) -> distance
    void log() -> log
    void draw(android.graphics.Canvas,android.graphics.Paint,int) -> draw
    float getX() -> getX
    float getY() -> getY
    java.lang.Object clone() -> clone
com.microblink.geometry.PointSet -> com.microblink.geometry.PointSet:
    java.util.ArrayList mPoints -> mPoints
    boolean $assertionsDisabled -> $assertionsDisabled
    void mirror(int,int,int) -> mirror
    void draw(android.graphics.Canvas,android.graphics.Paint,int) -> draw
    int getNumberOfPoints() -> getNumberOfPoints
    com.microblink.geometry.Point getPoint(int) -> getPoint
    java.util.List getPoints() -> getPoints
com.microblink.geometry.QuadrangleEvaluator -> com.microblink.geometry.QuadrangleEvaluator:
    com.microblink.nineoldandroids.animation.ArgbEvaluator mColorEval -> mColorEval
    com.microblink.geometry.Quadrilateral mCurrentQuad -> mCurrentQuad
    com.microblink.geometry.Quadrilateral evaluate(float,com.microblink.geometry.Quadrilateral,com.microblink.geometry.Quadrilateral) -> evaluate
    java.lang.Object evaluate(float,java.lang.Object,java.lang.Object) -> evaluate
com.microblink.geometry.Quadrilateral -> com.microblink.geometry.Quadrilateral:
    com.microblink.geometry.Point mUpperLeft -> mUpperLeft
    com.microblink.geometry.Point mUpperRight -> mUpperRight
    com.microblink.geometry.Point mLowerLeft -> mLowerLeft
    com.microblink.geometry.Point mLowerRight -> mLowerRight
    int mColor -> mColor
    int mRealUpperLeftIndex -> mRealUpperLeftIndex
    boolean mDefaultQuad -> mDefaultQuad
    void setMargins(int,int,int,int,int) -> setMargins
    boolean matchesMargins(int,int,int,int,int) -> matchesMargins
    void setPoints(com.microblink.geometry.Point,com.microblink.geometry.Point,com.microblink.geometry.Point,com.microblink.geometry.Point) -> setPoints
    com.microblink.geometry.Quadrilateral fromPointsAndCanvasSize(com.microblink.geometry.Point,com.microblink.geometry.Point,com.microblink.geometry.Point,com.microblink.geometry.Point,int,int,int) -> fromPointsAndCanvasSize
    void mirror(int,int,int) -> mirror
    com.microblink.geometry.Point getUpperLeft() -> getUpperLeft
    com.microblink.geometry.Point getRealUpperLeft() -> getRealUpperLeft
    com.microblink.geometry.Point getUpperRight() -> getUpperRight
    com.microblink.geometry.Point getRealUpperRight() -> getRealUpperRight
    com.microblink.geometry.Point getLowerLeft() -> getLowerLeft
    com.microblink.geometry.Point getRealLowerLeft() -> getRealLowerLeft
    com.microblink.geometry.Point getLowerRight() -> getLowerRight
    com.microblink.geometry.Point getRealLowerRight() -> getRealLowerRight
    int getColor() -> getColor
    void setColor(int) -> setColor
    void setRealUpperLeftIndex(int) -> setRealUpperLeftIndex
    int getRealUpperLeftIndex() -> getRealUpperLeftIndex
    boolean isDefaultQuad() -> isDefaultQuad
    void setIsDefaultQuad(boolean) -> setIsDefaultQuad
    com.microblink.geometry.Quadrilateral clone() -> clone
    java.lang.Object clone() -> clone
com.microblink.geometry.Rectangle -> com.microblink.geometry.Rectangle:
    float mX -> mX
    float mY -> mY
    float mWidth -> mWidth
    float mHeight -> mHeight
    android.os.Parcelable$Creator CREATOR -> CREATOR
    com.microblink.geometry.Rectangle getDefaultROI() -> getDefaultROI
    java.lang.String toString() -> toString
    void log() -> log
    void normalizeToUnitRectangle() -> normalizeToUnitRectangle
    float getX() -> getX
    float getY() -> getY
    float getWidth() -> getWidth
    float getHeight() -> getHeight
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
com.microblink.geometry.Rectangle$1 -> com.microblink.geometry.Rectangle$1:
    com.microblink.geometry.Rectangle[] llIIlIlIIl(int) -> llIIlIlIIl
    com.microblink.geometry.Rectangle llIIlIlIIl(android.os.Parcel) -> llIIlIlIIl
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
com.microblink.geometry.quadDrawers.FOVQuadDrawer -> com.microblink.geometry.quadDrawers.FOVQuadDrawer:
    android.graphics.Paint mPaint -> mPaint
    void drawQuadWithPaint(com.microblink.geometry.Quadrilateral,android.graphics.Canvas,android.graphics.Paint) -> drawQuadWithPaint
    void drawQuad(com.microblink.geometry.Quadrilateral,android.graphics.Canvas) -> drawQuad
    android.graphics.Paint getPaint() -> getPaint
com.microblink.geometry.quadDrawers.IQuadrilateralDrawer -> com.microblink.geometry.quadDrawers.IQuadrilateralDrawer:
    void drawQuad(com.microblink.geometry.Quadrilateral,android.graphics.Canvas) -> drawQuad
    android.graphics.Paint getPaint() -> getPaint
com.microblink.geometry.quadDrawers.IdQuadDrawer -> com.microblink.geometry.quadDrawers.IdQuadDrawer:
    android.graphics.Paint mOuterPaint -> mOuterPaint
    android.graphics.Paint mInnerPaint -> mInnerPaint
    com.microblink.geometry.quadTransform.llIIlIlIIl mQuadTransformer -> mQuadTransformer
    com.microblink.geometry.quadTransform.llIIlIlIIl getQuadTransformer() -> getQuadTransformer
    void drawQuad(com.microblink.geometry.Quadrilateral,android.graphics.Canvas) -> drawQuad
com.microblink.geometry.quadDrawers.QuadrilateralDrawer -> com.microblink.geometry.quadDrawers.QuadrilateralDrawer:
    float mLineLengthPerc -> mLineLengthPerc
    int mDesiredLength -> mDesiredLength
    android.graphics.Paint mPaint -> mPaint
    android.graphics.Paint getPaint() -> getPaint
    void setDesiredLength(int) -> setDesiredLength
    void setLineLengthPerc(float) -> setLineLengthPerc
    void drawQuad(com.microblink.geometry.Quadrilateral,android.graphics.Canvas) -> drawQuad
com.microblink.geometry.quadTransform.llIIlIlIIl -> com.microblink.geometry.quadTransform.llIIlIlIIl:
    com.microblink.geometry.Quadrilateral llIIlIlIIl(com.microblink.geometry.Quadrilateral) -> llIIlIlIIl
com.microblink.hardware.DeviceManager -> com.microblink.hardware.DeviceManager:
    android.content.Context mContext -> mContext
    java.util.Set llIIlIlIIl -> llIIlIlIIl
    java.util.Set IlIllIlIIl -> IlIllIlIIl
    java.util.Set IllIIIllII -> IllIIIllII
    java.util.Set llIIIlllll -> llIIIlllll
    java.util.Set IllIIIIllI -> IllIIIIllI
    java.util.Set lIlIIIIlIl -> lIlIIIIlIl
    java.util.Set llIIlIIlll -> llIIlIIlll
    java.util.Set IIlIIIllIl -> IIlIIIllIl
    java.util.Set lIIIIIllll -> lIIIIIllll
    java.util.Set lllIIIlIlI -> lllIIIlIlI
    int IlIllIlIIl -> IlIllIlIIl
    int IllIIIllII -> IllIIIllII
    boolean $assertionsDisabled -> $assertionsDisabled
    java.util.Set llIIlIlIIl() -> llIIlIlIIl
    java.util.Set IlIllIlIIl() -> IlIllIlIIl
    java.util.Set IllIIIllII() -> IllIIIllII
    java.util.Set llIIIlllll() -> llIIIlllll
    java.util.Set IllIIIIllI() -> IllIIIIllI
    java.util.Set lIlIIIIlIl() -> lIlIIIIlIl
    java.util.Set llIIlIIlll() -> llIIlIIlll
    java.util.Set IIlIIIllIl() -> IIlIIIllIl
    java.util.Set lIIIIIllll() -> lIIIIIllll
    java.util.Set lllIIIlIlI() -> lllIIIlIlI
    android.content.Context getContext() -> getContext
    int getSdkVersion() -> getSdkVersion
    java.lang.String getProcessorABI() -> getProcessorABI
    java.lang.String getModel() -> getModel
    java.lang.String getDevice() -> getDevice
    java.lang.String getManufacturer() -> getManufacturer
    java.lang.String getAndroidRelease() -> getAndroidRelease
    boolean deviceHasCamera() -> deviceHasCamera
    boolean deviceHasAutofocus() -> deviceHasAutofocus
    com.microblink.hardware.llIIlIlIIl getDeviceInfo() -> getDeviceInfo
    boolean isDeviceOnBlackList() -> isDeviceOnBlackList
    boolean isDeviceOnOCRBlackList() -> isDeviceOnOCRBlackList
    boolean isDeviceOnBarcodeBlackList() -> isDeviceOnBarcodeBlackList
    boolean isDeviceOnWhiteList() -> isDeviceOnWhiteList
    boolean isDeviceHQ() -> isDeviceHQ
    boolean isDisplayOrientationBlacklisted() -> isDisplayOrientationBlacklisted
    boolean isFocusCallbackUntrusty() -> isFocusCallbackUntrusty
    boolean isAllowedToUseZeroCopyBuffer() -> isAllowedToUseZeroCopyBuffer
    boolean isDeviceLandscapeLeftTablet() -> isDeviceLandscapeLeftTablet
    boolean isDeviceHavingUpsideDownPortraitCamera() -> isDeviceHavingUpsideDownPortraitCamera
    boolean isDeviceSupported() -> isDeviceSupported
    com.microblink.view.NotSupportedReason getReasonForLackOfSupport(boolean) -> getReasonForLackOfSupport
    int getNumberOfCores() -> getNumberOfCores
    int getMaxCPUFrequency() -> getMaxCPUFrequency
    int llIIlIlIIl() -> llIIlIlIIl
    int IlIllIlIIl() -> IlIllIlIIl
com.microblink.hardware.DeviceManager$1 -> com.microblink.hardware.DeviceManager$1:
    boolean accept(java.io.File) -> accept
com.microblink.hardware.SuccessCallback -> com.microblink.hardware.SuccessCallback:
    void onOperationDone(boolean) -> onOperationDone
com.microblink.hardware.accelerometer.IlIllIlIIl -> com.microblink.hardware.accelerometer.IlIllIlIIl:
    float llIIIlllll -> llIIIlllll
    float IllIIIIllI -> IllIIIIllI
    float lIlIIIIlIl -> lIlIIIIlIl
    float llIIlIIlll -> llIIlIIlll
    float IIlIIIllIl -> IIlIIIllIl
    float lIIIIIllll -> lIIIIIllll
    float lllIIIlIlI -> lllIIIlIlI
    float IlIllIlllI -> IlIllIlllI
    float lllIlIlIIl -> lllIlIlIIl
    float getX() -> getX
    float getY() -> getY
    float getZ() -> getZ
    void llIIlIlIIl(float,float,float) -> llIIlIlIIl
    void llIIlIlIIl(float) -> llIIlIlIIl
com.microblink.hardware.accelerometer.IllIIIllII -> com.microblink.hardware.accelerometer.IllIIIllII:
    void IIlIIIllIl() -> IIlIIIllIl
    void lIIIIIllll() -> lIIIIIllll
com.microblink.hardware.accelerometer.llIIIlllll -> com.microblink.hardware.accelerometer.llIIIlllll:
    float getX() -> getX
    float getY() -> getY
    float getZ() -> getZ
    void llIIlIlIIl(float) -> llIIlIlIIl
    void llIIlIlIIl(float,float,float) -> llIIlIlIIl
com.microblink.hardware.accelerometer.llIIlIlIIl -> com.microblink.hardware.accelerometer.llIIlIlIIl:
    float llIIlIlIIl -> llIIlIlIIl
    float IlIllIlIIl -> IlIllIlIIl
    float IllIIIllII -> IllIIIllII
    com.microblink.hardware.accelerometer.llIIIlllll llIIlIlIIl -> llIIlIlIIl
    com.microblink.hardware.accelerometer.IllIIIllII llIIlIlIIl -> llIIlIlIIl
    boolean lIlIIIIlIl -> lIlIIIIlIl
    android.hardware.Sensor llIIlIlIIl -> llIIlIlIIl
    android.hardware.SensorManager llIIlIlIIl -> llIIlIlIIl
    int llIIIlllll -> llIIIlllll
    long llIIlIlIIl -> llIIlIlIIl
    void llIIlIlIIl(com.microblink.hardware.accelerometer.IllIIIllII) -> llIIlIlIIl
    void lIlIIIIlIl() -> lIlIIIIlIl
    void llIIlIIlll() -> llIIlIIlll
    boolean llIIlIlIIl() -> llIIlIlIIl
    float llIIlIlIIl() -> llIIlIlIIl
    boolean IlIllIlIIl() -> IlIllIlIIl
    boolean IllIIIllII() -> IllIIIllII
    void onAccuracyChanged(android.hardware.Sensor,int) -> onAccuracyChanged
    void onSensorChanged(android.hardware.SensorEvent) -> onSensorChanged
com.microblink.hardware.camera.CameraDataFormat -> com.microblink.hardware.camera.CameraDataFormat:
    com.microblink.hardware.camera.CameraDataFormat PREVIEW_FRAME -> PREVIEW_FRAME
    com.microblink.hardware.camera.CameraDataFormat PHOTO_FRAME -> PHOTO_FRAME
    com.microblink.hardware.camera.CameraDataFormat FILENAME -> FILENAME
    com.microblink.hardware.camera.CameraDataFormat UNKNOWN -> UNKNOWN
    com.microblink.hardware.camera.CameraDataFormat MULTI_PLANAR_YUV_420_888 -> MULTI_PLANAR_YUV_420_888
    com.microblink.hardware.camera.CameraDataFormat ARGB -> ARGB
    int mValue -> mValue
    com.microblink.hardware.camera.CameraDataFormat[] $VALUES -> $VALUES
    com.microblink.hardware.camera.CameraDataFormat[] values() -> values
    com.microblink.hardware.camera.CameraDataFormat valueOf(java.lang.String) -> valueOf
    int toIntValue() -> toIntValue
com.microblink.hardware.camera.CameraListener -> com.microblink.hardware.camera.CameraListener:
    void onCameraFrame(com.microblink.hardware.camera.IlIllIlIIl) -> onCameraFrame
    void onTakePictureFail() -> onTakePictureFail
com.microblink.hardware.camera.CameraType -> com.microblink.hardware.camera.CameraType:
    com.microblink.hardware.camera.CameraType CAMERA_DEFAULT -> CAMERA_DEFAULT
    com.microblink.hardware.camera.CameraType CAMERA_BACKFACE -> CAMERA_BACKFACE
    com.microblink.hardware.camera.CameraType CAMERA_FRONTFACE -> CAMERA_FRONTFACE
    android.os.Parcelable$Creator CREATOR -> CREATOR
    com.microblink.hardware.camera.CameraType[] $VALUES -> $VALUES
    com.microblink.hardware.camera.CameraType[] values() -> values
    com.microblink.hardware.camera.CameraType valueOf(java.lang.String) -> valueOf
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
com.microblink.hardware.camera.CameraType$1 -> com.microblink.hardware.camera.CameraType$1:
    com.microblink.hardware.camera.CameraType llIIlIlIIl(android.os.Parcel) -> llIIlIlIIl
    com.microblink.hardware.camera.CameraType[] llIIlIlIIl(int) -> llIIlIlIIl
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
com.microblink.hardware.camera.IIlIIIllIl -> com.microblink.hardware.camera.IIlIIIllIl:
    com.microblink.hardware.accelerometer.IllIIIllII IlIllIlIIl -> IlIllIlIIl
    android.hardware.Camera$PreviewCallback llIIlIlIIl -> llIIlIlIIl
    com.microblink.hardware.camera.focus.IllIIIllII llIIlIlIIl(android.hardware.Camera$Parameters) -> llIIlIlIIl
    void IIlIIIllIl() -> IIlIIIllIl
    void lIIIIIllll() -> lIIIIIllll
    android.hardware.Camera$PreviewCallback llIIlIlIIl() -> llIIlIlIIl
com.microblink.hardware.camera.IIlIIIllIl$1 -> com.microblink.hardware.camera.IIlIIIllIl$1:
    com.microblink.hardware.camera.IIlIIIllIl llIIlIlIIl -> llIIlIlIIl
    void onPreviewFrame(byte[],android.hardware.Camera) -> onPreviewFrame
com.microblink.hardware.camera.IlIllIlIIl -> com.microblink.hardware.camera.IlIllIlIIl:
    java.nio.ByteBuffer[] llIIlIlIIl -> llIIlIlIIl
    int[] IllIIIllII -> IllIIIllII
    int[] llIIIlllll -> llIIIlllll
    int llIIlIIlll -> llIIlIIlll
    int IIlIIIllIl -> IIlIIIllIl
    com.microblink.hardware.camera.CameraDataFormat llIIlIlIIl -> llIIlIlIIl
    boolean IllIIlIIII -> IllIIlIIII
    boolean lIIIIIlIlI -> lIIIIIlIlI
    com.microblink.geometry.Rectangle llIIlIlIIl -> llIIlIlIIl
    java.lang.String toString() -> toString
    void llIIlIlIIl(java.nio.ByteBuffer[],int[],int[],com.microblink.hardware.camera.CameraDataFormat,int,int,boolean,boolean) -> llIIlIlIIl
    void llIIlIlIIl(com.microblink.geometry.Rectangle) -> llIIlIlIIl
    java.nio.ByteBuffer[] llIIlIlIIl() -> llIIlIlIIl
    int[] llIIlIlIIl() -> llIIlIlIIl
    int[] IlIllIlIIl() -> IlIllIlIIl
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    com.microblink.hardware.camera.CameraDataFormat llIIlIlIIl() -> llIIlIlIIl
    boolean IIlIIIllIl() -> IIlIIIllIl
    boolean lIIIIIllll() -> lIIIIIllll
    com.microblink.geometry.Rectangle getVisiblePart() -> getVisiblePart
    void IlIIlllIIl() -> IlIIlllIIl
    void llIllIIlll() -> llIllIIlll
    void recycle() -> recycle
com.microblink.hardware.camera.IllIIIIllI -> com.microblink.hardware.camera.IllIIIIllI:
    int lIIIIIllll -> lIIIIIllll
    int mHeight -> mHeight
    android.view.SurfaceHolder llIIlIlIIl -> llIIlIlIIl
    android.graphics.SurfaceTexture llIIlIlIIl -> llIIlIlIIl
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    android.view.SurfaceHolder getSurfaceHolder() -> getSurfaceHolder
    android.graphics.SurfaceTexture getSurfaceTexture() -> getSurfaceTexture
    boolean lllIIIlIlI() -> lllIIIlIlI
com.microblink.hardware.camera.IllIIIllII -> com.microblink.hardware.camera.IllIIIllII:
    com.microblink.util.pool.llIIlIlIIl llIIlIlIIl -> llIIlIlIIl
    com.microblink.hardware.camera.IlIllIlIIl llIIlIlIIl() -> llIIlIlIIl
    void llIIlIlIIl(com.microblink.hardware.camera.IlIllIlIIl) -> llIIlIlIIl
com.microblink.hardware.camera.IllIIIllII$1 -> com.microblink.hardware.camera.IllIIIllII$1:
    com.microblink.util.pool.IlIllIlIIl llIIlIlIIl() -> llIIlIlIIl
com.microblink.hardware.camera.ResumeGrabberCaller -> com.microblink.hardware.camera.ResumeGrabberCaller:
    com.microblink.hardware.camera.ResumeGrabberCaller PREVIEW_CALLBACK -> PREVIEW_CALLBACK
    com.microblink.hardware.camera.ResumeGrabberCaller RECOGNITION_CALLBACK -> RECOGNITION_CALLBACK
    com.microblink.hardware.camera.ResumeGrabberCaller PHOTO_RECOGNITION_CALLBACK -> PHOTO_RECOGNITION_CALLBACK
    com.microblink.hardware.camera.ResumeGrabberCaller PICTURE_CALLBACK -> PICTURE_CALLBACK
    com.microblink.hardware.camera.ResumeGrabberCaller[] $VALUES -> $VALUES
    com.microblink.hardware.camera.ResumeGrabberCaller[] values() -> values
    com.microblink.hardware.camera.ResumeGrabberCaller valueOf(java.lang.String) -> valueOf
com.microblink.hardware.camera.factory.llIIlIlIIl -> com.microblink.hardware.camera.factory.llIIlIlIIl:
    com.microblink.hardware.DeviceManager IlIllIlIIl -> IlIllIlIIl
    com.microblink.hardware.camera.lIlIIIIlIl llIIlIlIIl(com.microblink.hardware.camera.CameraListener,com.microblink.hardware.camera.strategy.llIIlIlIIl) -> llIIlIlIIl
com.microblink.hardware.camera.focus.AutofocusListener -> com.microblink.hardware.camera.focus.AutofocusListener:
    void onAutofocusFailed() -> onAutofocusFailed
    void onAutofocusStarted(android.graphics.Rect[]) -> onAutofocusStarted
    void onAutofocusStopped(android.graphics.Rect[]) -> onAutofocusStopped
com.microblink.hardware.camera.focus.IlIllIlIIl -> com.microblink.hardware.camera.focus.IlIllIlIIl:
    android.hardware.Camera llIIlIlIIl -> llIIlIlIIl
    boolean llIllIIlll -> llIllIIlll
    com.microblink.hardware.camera.focus.AutofocusListener IlIllIlIIl -> IlIllIlIIl
    boolean lllllIlIll -> lllllIlIll
    android.graphics.Rect[] IlIllIlIIl -> IlIllIlIIl
    boolean lIlllIlIlI -> lIlllIlIlI
    boolean isCameraFocused() -> isCameraFocused
    boolean IlIllIlllI() -> IlIllIlllI
    void lIlllIlIlI() -> lIlllIlIlI
    void llIIlIlIIl(boolean) -> llIIlIlIIl
    void lIllIIlIIl() -> lIllIIlIIl
    void lllIIlIIlI() -> lllIIlIIlI
    void IlIIlIIIII() -> IlIIlIIIII
    void setCamera(android.hardware.Camera) -> setCamera
    void llIIlIlIIl(android.graphics.Rect[]) -> llIIlIlIIl
    boolean llIIlIlIIl(com.microblink.hardware.camera.focus.IlIllIlIIl,boolean) -> llIIlIlIIl
    com.microblink.hardware.camera.focus.AutofocusListener llIIlIlIIl(com.microblink.hardware.camera.focus.IlIllIlIIl) -> llIIlIlIIl
    android.graphics.Rect[] llIIlIlIIl(com.microblink.hardware.camera.focus.IlIllIlIIl) -> llIIlIlIIl
    boolean IlIllIlIIl(com.microblink.hardware.camera.focus.IlIllIlIIl,boolean) -> IlIllIlIIl
com.microblink.hardware.camera.focus.IlIllIlIIl$1 -> com.microblink.hardware.camera.focus.IlIllIlIIl$1:
    com.microblink.hardware.camera.focus.IlIllIlIIl llIIlIlIIl -> llIIlIlIIl
    void onAutoFocus(boolean,android.hardware.Camera) -> onAutoFocus
com.microblink.hardware.camera.focus.IlIllIlIIl$2 -> com.microblink.hardware.camera.focus.IlIllIlIIl$2:
    com.microblink.hardware.camera.focus.IlIllIlIIl llIIlIlIIl -> llIIlIlIIl
    void onAutoFocusMoving(boolean,android.hardware.Camera) -> onAutoFocusMoving
com.microblink.hardware.camera.focus.IllIIIllII -> com.microblink.hardware.camera.focus.IllIIIllII:
    boolean isCameraFocused() -> isCameraFocused
    boolean IlIllIlllI() -> IlIllIlllI
    void lIlllIlIlI() -> lIlllIlIlI
    void llIIlIlIIl(boolean) -> llIIlIlIIl
    void lIllIIlIIl() -> lIllIIlIIl
    void lllIIlIIlI() -> lllIIlIIlI
    void IlIIlIIIII() -> IlIIlIIIII
    void setCamera(android.hardware.Camera) -> setCamera
    void llIIlIlIIl(android.graphics.Rect[]) -> llIIlIlIIl
com.microblink.hardware.camera.focus.llIIIlllll -> com.microblink.hardware.camera.focus.llIIIlllll:
    boolean llIllIIlll -> llIllIIlll
    boolean isCameraFocused() -> isCameraFocused
    boolean IlIllIlllI() -> IlIllIlllI
    void lIlllIlIlI() -> lIlllIlIlI
    void llIIlIlIIl(boolean) -> llIIlIlIIl
    void lIllIIlIIl() -> lIllIIlIIl
    void lllIIlIIlI() -> lllIIlIIlI
    void IlIIlIIIII() -> IlIIlIIIII
    void setCamera(android.hardware.Camera) -> setCamera
    void llIIlIlIIl(android.graphics.Rect[]) -> llIIlIlIIl
com.microblink.hardware.camera.focus.llIIlIlIIl -> com.microblink.hardware.camera.focus.llIIlIlIIl:
    android.hardware.Camera llIIlIlIIl -> llIIlIlIIl
    boolean llIIlIIIll -> llIIlIIIll
    boolean IlIIlllIIl -> IlIIlllIIl
    java.util.Timer IlIllIlIIl -> IlIllIlIIl
    boolean llIllIIlll -> llIllIIlll
    int lllIIIlIlI -> lllIIIlIlI
    com.microblink.hardware.camera.focus.AutofocusListener llIIlIlIIl -> llIIlIlIIl
    android.graphics.Rect[] IlIllIlIIl -> IlIllIlIIl
    int IlIllIlllI -> IlIllIlllI
    android.hardware.Camera$AutoFocusCallback llIIlIlIIl -> llIIlIlIIl
    void setCamera(android.hardware.Camera) -> setCamera
    boolean isCameraFocused() -> isCameraFocused
    void lIlllIlIlI() -> lIlllIlIlI
    boolean IlIllIlllI() -> IlIllIlllI
    void llIIlIlIIl(boolean,android.hardware.Camera$AutoFocusCallback) -> llIIlIlIIl
    void llIIlIlIIl(boolean) -> llIIlIlIIl
    void lIllIIlIIl() -> lIllIIlIIl
    void lllIIlIIlI() -> lllIIlIIlI
    void IlIIlIIIII() -> IlIIlIIIII
    void IlIllIlIIl(int) -> IlIllIlIIl
    void llIIlIlIIl(android.graphics.Rect[]) -> llIIlIlIIl
    com.microblink.hardware.camera.focus.AutofocusListener llIIlIlIIl(com.microblink.hardware.camera.focus.llIIlIlIIl) -> llIIlIlIIl
    android.graphics.Rect[] llIIlIlIIl(com.microblink.hardware.camera.focus.llIIlIlIIl) -> llIIlIlIIl
    int llIIlIlIIl(com.microblink.hardware.camera.focus.llIIlIlIIl) -> llIIlIlIIl
    int IlIllIlIIl(com.microblink.hardware.camera.focus.llIIlIlIIl) -> IlIllIlIIl
    void llIIlIlIIl(com.microblink.hardware.camera.focus.llIIlIlIIl,int) -> llIIlIlIIl
    int llIIlIlIIl(com.microblink.hardware.camera.focus.llIIlIlIIl,int) -> llIIlIlIIl
    boolean llIIlIlIIl(com.microblink.hardware.camera.focus.llIIlIlIIl) -> llIIlIlIIl
    int IllIIIllII(com.microblink.hardware.camera.focus.llIIlIlIIl) -> IllIIIllII
    int llIIIlllll(com.microblink.hardware.camera.focus.llIIlIlIIl) -> llIIIlllll
com.microblink.hardware.camera.focus.llIIlIlIIl$1 -> com.microblink.hardware.camera.focus.llIIlIlIIl$1:
    com.microblink.hardware.camera.focus.llIIlIlIIl llIIlIlIIl -> llIIlIlIIl
    void run() -> run
com.microblink.hardware.camera.focus.llIIlIlIIl$2 -> com.microblink.hardware.camera.focus.llIIlIlIIl$2:
    com.microblink.hardware.camera.focus.llIIlIlIIl llIIlIlIIl -> llIIlIlIIl
    void onAutoFocus(boolean,android.hardware.Camera) -> onAutoFocus
    void setFocusMode(java.lang.String) -> setFocusMode
    void IlllIIIllI() -> IlllIIIllI
com.microblink.hardware.camera.lIlIIIIlIl -> com.microblink.hardware.camera.lIlIIIIlIl:
    void lllIIIlIlI() -> lllIIIlIlI
    void llIIlIlIIl(com.microblink.hardware.DeviceManager,com.microblink.hardware.camera.strategy.llIIlIlIIl,com.microblink.hardware.camera.lIlIIIIlIl$llIIlIlIIl) -> llIIlIlIIl
    void stopPreview() -> stopPreview
    void lIIIIIlIlI() -> lIIIIIlIlI
    void llIIlIlIIl(com.microblink.hardware.camera.ResumeGrabberCaller) -> llIIlIlIIl
    void IlIlllllII() -> IlIlllllII
    boolean IllIIIIllI() -> IllIIIIllI
    boolean llIIlIIlll() -> llIIlIIlll
    void setTorchState(boolean,com.microblink.hardware.SuccessCallback) -> setTorchState
    boolean isDeviceShaking() -> isDeviceShaking
    void llIIlIlIIl(android.graphics.Rect[]) -> llIIlIlIIl
    com.microblink.hardware.camera.CameraType getOpenedCameraType() -> getOpenedCameraType
    android.view.SurfaceHolder$Callback llIIlIlIIl() -> llIIlIlIIl
com.microblink.hardware.camera.lIlIIIIlIl$llIIlIlIIl -> com.microblink.hardware.camera.lIlIIIIlIl$llIIlIlIIl:
    void llIIlIlIIl(java.lang.Throwable) -> llIIlIlIIl
    void lllllIlIll() -> lllllIlIll
    void llIIlIlIIl(int,int) -> llIIlIlIIl
com.microblink.hardware.camera.llIIIlllll -> com.microblink.hardware.camera.llIIIlllll:
com.microblink.hardware.camera.llIIlIIlll -> com.microblink.hardware.camera.llIIlIIlll:
    boolean IlIlllllII -> IlIlllllII
    android.hardware.Camera$ShutterCallback llIIlIlIIl -> llIIlIlIIl
    android.hardware.Camera$PictureCallback llIIlIlIIl -> llIIlIlIIl
    android.hardware.Camera$PreviewCallback llIIlIlIIl -> llIIlIlIIl
    com.microblink.hardware.camera.focus.IllIIIllII llIIlIlIIl(android.hardware.Camera$Parameters) -> llIIlIlIIl
    boolean llIIIlllll() -> llIIIlllll
    void lIIIIIllll() -> lIIIIIllll
    void llIIlIlIIl(com.microblink.hardware.camera.ResumeGrabberCaller) -> llIIlIlIIl
    android.hardware.Camera$PreviewCallback llIIlIlIIl() -> llIIlIlIIl
com.microblink.hardware.camera.llIIlIIlll$1 -> com.microblink.hardware.camera.llIIlIIlll$1:
    com.microblink.hardware.camera.llIIlIIlll llIIlIlIIl -> llIIlIlIIl
    void run() -> run
com.microblink.hardware.camera.llIIlIIlll$2 -> com.microblink.hardware.camera.llIIlIIlll$2:
    com.microblink.hardware.camera.llIIlIIlll llIIlIlIIl -> llIIlIlIIl
    void onShutter() -> onShutter
com.microblink.hardware.camera.llIIlIIlll$3 -> com.microblink.hardware.camera.llIIlIIlll$3:
    com.microblink.hardware.camera.llIIlIIlll llIIlIlIIl -> llIIlIlIIl
    void onPictureTaken(byte[],android.hardware.Camera) -> onPictureTaken
com.microblink.hardware.camera.llIIlIIlll$4 -> com.microblink.hardware.camera.llIIlIIlll$4:
    com.microblink.hardware.camera.llIIlIIlll llIIlIlIIl -> llIIlIlIIl
    void onPreviewFrame(byte[],android.hardware.Camera) -> onPreviewFrame
com.microblink.hardware.camera.llIIlIlIIl -> com.microblink.hardware.camera.llIIlIlIIl:
    android.hardware.Camera llIIlIlIIl -> llIIlIlIIl
    com.microblink.hardware.accelerometer.llIIlIlIIl llIIlIlIIl -> llIIlIlIIl
    com.microblink.hardware.camera.CameraListener llIIlIlIIl -> llIIlIlIIl
    com.microblink.hardware.camera.focus.IllIIIllII llIIlIlIIl -> llIIlIlIIl
    com.microblink.hardware.camera.strategy.factory.IlIllIlIIl llIIlIlIIl -> llIIlIlIIl
    com.microblink.hardware.camera.strategy.IlIllIlIIl llIIlIlIIl -> llIIlIlIIl
    com.microblink.hardware.camera.IllIIIIllI llIIlIlIIl -> llIIlIlIIl
    boolean llIIlIIlll -> llIIlIIlll
    boolean IIlIIIllIl -> IIlIIIllIl
    byte[] llIIlIlIIl -> llIIlIlIIl
    boolean lIIIIIllll -> lIIIIIllll
    com.microblink.hardware.camera.strategy.llIIlIlIIl llIIlIlIIl -> llIIlIlIIl
    android.hardware.Camera$Size llIIlIlIIl -> llIIlIlIIl
    com.microblink.hardware.camera.CameraType llIIlIlIIl -> llIIlIlIIl
    int IllIIIIllI -> IllIIIIllI
    com.microblink.util.llIIIlllll llIIlIlIIl -> llIIlIlIIl
    android.content.Context mContext -> mContext
    boolean lllIIIlIlI -> lllIIIlIlI
    com.microblink.hardware.camera.lIlIIIIlIl$llIIlIlIIl llIIlIlIIl -> llIIlIlIIl
    boolean IlIllIlllI -> IlIllIlllI
    java.lang.Boolean llIIlIlIIl -> llIIlIlIIl
    void finalize() -> finalize
    com.microblink.util.llIIIlllll llIIlIlIIl() -> llIIlIlIIl
    void lllIIIlIlI() -> lllIIIlIlI
    com.microblink.hardware.camera.focus.IllIIIllII llIIlIlIIl() -> llIIlIlIIl
    void IIlIIIllIl() -> IIlIIIllIl
    void lIIIIIllll() -> lIIIIIllll
    android.hardware.Camera llIIlIlIIl(com.microblink.hardware.camera.CameraType) -> llIIlIlIIl
    void llIIlIlIIl(com.microblink.hardware.DeviceManager,com.microblink.hardware.camera.strategy.llIIlIlIIl,com.microblink.hardware.camera.lIlIIIIlIl$llIIlIlIIl) -> llIIlIlIIl
    void IlIllIlllI() -> IlIllIlllI
    android.hardware.Camera$PreviewCallback llIIlIlIIl() -> llIIlIlIIl
    void lllIlIlIIl() -> lllIlIlIIl
    void stopPreview() -> stopPreview
    void IllIIlIIII() -> IllIIlIIII
    void lIIIIIlIlI() -> lIIIIIlIlI
    void llIIlIlIIl(com.microblink.hardware.camera.ResumeGrabberCaller) -> llIIlIlIIl
    int llIIlIlIIl(android.hardware.Camera$Size,int) -> llIIlIlIIl
    boolean llIIIlllll() -> llIIIlllll
    void llIIlIlIIl(int) -> llIIlIlIIl
    com.microblink.hardware.camera.focus.IllIIIllII llIIlIlIIl(android.hardware.Camera$Parameters) -> llIIlIlIIl
    void IlIlllllII() -> IlIlllllII
    boolean IllIIIIllI() -> IllIIIIllI
    boolean lIlIIIIlIl() -> lIlIIIIlIl
    void llIIlIIIll() -> llIIlIIIll
    boolean llIIlIIlll() -> llIIlIIlll
    void setTorchState(boolean,com.microblink.hardware.SuccessCallback) -> setTorchState
    boolean isDeviceShaking() -> isDeviceShaking
    void llIIlIlIIl(android.graphics.Rect[]) -> llIIlIlIIl
    com.microblink.hardware.camera.CameraType getOpenedCameraType() -> getOpenedCameraType
    android.view.SurfaceHolder$Callback llIIlIlIIl() -> llIIlIlIIl
    com.microblink.hardware.camera.focus.IllIIIllII llIIlIlIIl(com.microblink.hardware.camera.llIIlIlIIl) -> llIIlIlIIl
    android.hardware.Camera llIIlIlIIl(com.microblink.hardware.camera.llIIlIlIIl,com.microblink.hardware.camera.CameraType) -> llIIlIlIIl
    com.microblink.hardware.camera.strategy.factory.IlIllIlIIl llIIlIlIIl(com.microblink.hardware.camera.llIIlIlIIl) -> llIIlIlIIl
    int llIIlIlIIl(com.microblink.hardware.camera.llIIlIlIIl) -> llIIlIlIIl
    com.microblink.hardware.camera.lIlIIIIlIl$llIIlIlIIl llIIlIlIIl(com.microblink.hardware.camera.llIIlIlIIl) -> llIIlIlIIl
    void llIIlIlIIl(com.microblink.hardware.camera.llIIlIlIIl) -> llIIlIlIIl
    void IlIllIlIIl(com.microblink.hardware.camera.llIIlIlIIl) -> IlIllIlIIl
    boolean llIIlIlIIl(com.microblink.hardware.camera.llIIlIlIIl,boolean) -> llIIlIlIIl
    boolean llIIlIlIIl(com.microblink.hardware.camera.llIIlIlIIl) -> llIIlIlIIl
    int llIIlIlIIl(com.microblink.hardware.camera.llIIlIlIIl,int) -> llIIlIlIIl
    android.content.Context llIIlIlIIl(com.microblink.hardware.camera.llIIlIlIIl) -> llIIlIlIIl
    com.microblink.util.llIIIlllll llIIlIlIIl(com.microblink.hardware.camera.llIIlIlIIl) -> llIIlIlIIl
com.microblink.hardware.camera.llIIlIlIIl$1 -> com.microblink.hardware.camera.llIIlIlIIl$1:
    com.microblink.hardware.camera.llIIlIlIIl llIIlIlIIl -> llIIlIlIIl
    void run() -> run
com.microblink.hardware.camera.llIIlIlIIl$10 -> com.microblink.hardware.camera.llIIlIlIIl$10:
    com.microblink.hardware.camera.llIIlIlIIl llIIlIlIIl -> llIIlIlIIl
    void run() -> run
com.microblink.hardware.camera.llIIlIlIIl$11 -> com.microblink.hardware.camera.llIIlIlIIl$11:
    boolean lllIlIlIIl -> lllIlIlIIl
    com.microblink.hardware.SuccessCallback llIIlIlIIl -> llIIlIlIIl
    com.microblink.hardware.camera.llIIlIlIIl llIIlIlIIl -> llIIlIlIIl
    void run() -> run
com.microblink.hardware.camera.llIIlIlIIl$2 -> com.microblink.hardware.camera.llIIlIlIIl$2:
    android.graphics.Rect[] llIIlIlIIl -> llIIlIlIIl
    com.microblink.hardware.camera.llIIlIlIIl llIIlIlIIl -> llIIlIlIIl
    void run() -> run
com.microblink.hardware.camera.llIIlIlIIl$3 -> com.microblink.hardware.camera.llIIlIlIIl$3:
    com.microblink.hardware.camera.llIIlIlIIl llIIlIlIIl -> llIIlIlIIl
    void surfaceCreated(android.view.SurfaceHolder) -> surfaceCreated
    void surfaceDestroyed(android.view.SurfaceHolder) -> surfaceDestroyed
    void surfaceChanged(android.view.SurfaceHolder,int,int,int) -> surfaceChanged
com.microblink.hardware.camera.llIIlIlIIl$3$1 -> com.microblink.hardware.camera.llIIlIlIIl$3$1:
    com.microblink.hardware.camera.llIIlIlIIl$3 llIIlIlIIl -> llIIlIlIIl
    void run() -> run
com.microblink.hardware.camera.llIIlIlIIl$4 -> com.microblink.hardware.camera.llIIlIlIIl$4:
    com.microblink.hardware.camera.llIIlIlIIl llIIlIlIIl -> llIIlIlIIl
    void run() -> run
com.microblink.hardware.camera.llIIlIlIIl$5 -> com.microblink.hardware.camera.llIIlIlIIl$5:
    com.microblink.hardware.camera.strategy.llIIlIlIIl IlIllIlIIl -> IlIllIlIIl
    com.microblink.hardware.DeviceManager llIIlIlIIl -> llIIlIlIIl
    com.microblink.hardware.camera.llIIlIlIIl llIIlIlIIl -> llIIlIlIIl
    void run() -> run
com.microblink.hardware.camera.llIIlIlIIl$6 -> com.microblink.hardware.camera.llIIlIlIIl$6:
    com.microblink.hardware.camera.llIIlIlIIl llIIlIlIIl -> llIIlIlIIl
    void run() -> run
com.microblink.hardware.camera.llIIlIlIIl$7 -> com.microblink.hardware.camera.llIIlIlIIl$7:
    com.microblink.hardware.camera.llIIlIlIIl llIIlIlIIl -> llIIlIlIIl
    void run() -> run
com.microblink.hardware.camera.llIIlIlIIl$8 -> com.microblink.hardware.camera.llIIlIlIIl$8:
    com.microblink.hardware.camera.ResumeGrabberCaller llIIlIlIIl -> llIIlIlIIl
    com.microblink.hardware.camera.llIIlIlIIl llIIlIlIIl -> llIIlIlIIl
    void run() -> run
com.microblink.hardware.camera.llIIlIlIIl$9 -> com.microblink.hardware.camera.llIIlIlIIl$9:
    int lIlIIIIlIl -> lIlIIIIlIl
    com.microblink.hardware.camera.llIIlIlIIl llIIlIlIIl -> llIIlIlIIl
    void run() -> run
com.microblink.hardware.camera.strategy.IlIllIlIIl -> com.microblink.hardware.camera.strategy.IlIllIlIIl:
    android.hardware.Camera llIIlIlIIl -> llIIlIlIIl
    java.util.List llIIlIlIIl -> llIIlIlIIl
    int lIIIIIlIlI -> lIIIIIlIlI
    int IlIlllllII -> IlIlllllII
    java.util.Map llIIlIlIIl -> llIIlIlIIl
    android.hardware.Camera$Size llIIlIlIIl(int,int) -> llIIlIlIIl
    void log() -> log
    boolean llIIlIlIIl(android.hardware.Camera$Size) -> llIIlIlIIl
    android.hardware.Camera$Size llIIlIlIIl(java.util.Map) -> llIIlIlIIl
    double llIIlIlIIl(android.hardware.Camera$Size,double,long) -> llIIlIlIIl
    android.hardware.Camera$Size llIIlIlIIl(java.util.List,double,long) -> llIIlIlIIl
    int IllIIIIllI() -> IllIIIIllI
    void llIIIlllll(int) -> llIIIlllll
    java.util.Map llIIlIlIIl() -> llIIlIlIIl
com.microblink.hardware.camera.strategy.IlIllIlIIl$llIIlIlIIl -> com.microblink.hardware.camera.strategy.IlIllIlIIl$llIIlIlIIl:
    int lIIIIIllll -> lIIIIIllll
    int mHeight -> mHeight
    int getHeight() -> getHeight
    int getWidth() -> getWidth
com.microblink.hardware.camera.strategy.IllIIIIllI -> com.microblink.hardware.camera.strategy.IllIIIIllI:
    int llIIlIIIll -> llIIlIIIll
    java.util.Map IlIllIlIIl -> IlIllIlIIl
    void log() -> log
    java.lang.String toString() -> toString
    boolean llIIlIlIIl(android.hardware.Camera$Size) -> llIIlIlIIl
    android.hardware.Camera$Size IlIllIlIIl(int,int) -> IlIllIlIIl
    android.hardware.Camera$Size IlIllIlIIl(java.util.Map) -> IlIllIlIIl
    java.util.Map IlIllIlIIl() -> IlIllIlIIl
com.microblink.hardware.camera.strategy.IllIIIllII -> com.microblink.hardware.camera.strategy.IllIIIllII:
    void log() -> log
    java.lang.String toString() -> toString
    double llIIlIlIIl(android.hardware.Camera$Size,double,long) -> llIIlIlIIl
    android.hardware.Camera$Size llIIlIlIIl(int,int) -> llIIlIlIIl
com.microblink.hardware.camera.strategy.factory.IlIllIlIIl -> com.microblink.hardware.camera.strategy.factory.IlIllIlIIl:
    com.microblink.hardware.camera.strategy.IlIllIlIIl llIIlIlIIl(com.microblink.hardware.DeviceManager,android.hardware.Camera,com.microblink.hardware.camera.strategy.llIIlIlIIl) -> llIIlIlIIl
com.microblink.hardware.camera.strategy.factory.llIIlIlIIl -> com.microblink.hardware.camera.strategy.factory.llIIlIlIIl:
    boolean llIIlIlIIl(android.hardware.Camera) -> llIIlIlIIl
    com.microblink.hardware.camera.strategy.IlIllIlIIl llIIlIlIIl(com.microblink.hardware.DeviceManager,android.hardware.Camera,com.microblink.hardware.camera.strategy.llIIlIlIIl) -> llIIlIlIIl
com.microblink.hardware.camera.strategy.lIlIIIIlIl -> com.microblink.hardware.camera.strategy.lIlIIIIlIl:
    int IlIIlllIIl -> IlIIlllIIl
    android.hardware.Camera$Size IlIllIlIIl(int,int) -> IlIllIlIIl
com.microblink.hardware.camera.strategy.llIIIlllll -> com.microblink.hardware.camera.strategy.llIIIlllll:
    void log() -> log
    java.lang.String toString() -> toString
    double llIIlIlIIl(android.hardware.Camera$Size,double,long) -> llIIlIlIIl
    android.hardware.Camera$Size llIIlIlIIl(int,int) -> llIIlIlIIl
com.microblink.hardware.camera.strategy.llIIlIlIIl -> com.microblink.hardware.camera.strategy.llIIlIlIIl:
    boolean lIllIIlIIl -> lIllIIlIIl
    boolean lllIIlIIlI -> lllIIlIIlI
    boolean IlIIlIIIII -> IlIIlIIIII
    boolean IlllIIIllI -> IlllIIIllI
    boolean IlIlIlIIlI -> IlIlIlIIlI
    int lllIlIlIIl -> lllIlIlIIl
    int IllIIlIIII -> IllIIlIIII
    com.microblink.hardware.accelerometer.IllIIIllII IllIIIllII -> IllIIIllII
    com.microblink.hardware.camera.CameraType llIIlIlIIl -> llIIlIlIIl
    void IlIllIlIIl(com.microblink.hardware.accelerometer.IllIIIllII) -> IlIllIlIIl
    com.microblink.hardware.accelerometer.IllIIIllII llIIlIlIIl() -> llIIlIlIIl
    int IllIIIllII() -> IllIIIllII
    void IllIIIllII(int) -> IllIIIllII
    int llIIIlllll() -> llIIIlllll
    boolean lllIlIlIIl() -> lllIlIlIIl
    void IlIllIlIIl(boolean) -> IlIllIlIIl
    boolean IllIIlIIII() -> IllIIlIIII
    void IllIIIllII(boolean) -> IllIIIllII
    boolean lIIIIIlIlI() -> lIIIIIlIlI
    void llIIIlllll(boolean) -> llIIIlllll
    boolean IlIlllllII() -> IlIlllllII
    void IllIIIIllI(boolean) -> IllIIIIllI
    boolean llIIlIIIll() -> llIIlIIIll
    com.microblink.hardware.camera.CameraType llIIlIlIIl() -> llIIlIlIIl
    void setCameraType(com.microblink.hardware.camera.CameraType) -> setCameraType
com.microblink.hardware.llIIlIlIIl -> com.microblink.hardware.llIIlIlIIl:
    java.lang.String IllIIIllII -> IllIIIllII
    java.lang.String llIIIlllll -> llIIIlllll
    void IllIIIIllI() -> IllIIIIllI
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.microblink.hardware.orientation.Orientation -> com.microblink.hardware.orientation.Orientation:
    com.microblink.hardware.orientation.Orientation ORIENTATION_PORTRAIT -> ORIENTATION_PORTRAIT
    com.microblink.hardware.orientation.Orientation ORIENTATION_LANDSCAPE_RIGHT -> ORIENTATION_LANDSCAPE_RIGHT
    com.microblink.hardware.orientation.Orientation ORIENTATION_PORTRAIT_UPSIDE -> ORIENTATION_PORTRAIT_UPSIDE
    com.microblink.hardware.orientation.Orientation ORIENTATION_LANDSCAPE_LEFT -> ORIENTATION_LANDSCAPE_LEFT
    com.microblink.hardware.orientation.Orientation ORIENTATION_UNKNOWN -> ORIENTATION_UNKNOWN
    int value -> value
    boolean vertical -> vertical
    boolean horizontal -> horizontal
    com.microblink.hardware.orientation.Orientation[] $VALUES -> $VALUES
    com.microblink.hardware.orientation.Orientation[] values() -> values
    com.microblink.hardware.orientation.Orientation valueOf(java.lang.String) -> valueOf
    int intValue() -> intValue
    boolean isVertical() -> isVertical
    boolean isHorizontal() -> isHorizontal
    java.lang.String toString() -> toString
    com.microblink.hardware.orientation.Orientation fromInt(int) -> fromInt
com.microblink.hardware.orientation.OrientationChangeListener -> com.microblink.hardware.orientation.OrientationChangeListener:
    void onOrientationChange(com.microblink.hardware.orientation.Orientation) -> onOrientationChange
com.microblink.hardware.orientation.llIIlIlIIl -> com.microblink.hardware.orientation.llIIlIlIIl:
    com.microblink.hardware.orientation.OrientationChangeListener llIIlIlIIl -> llIIlIlIIl
    com.microblink.hardware.orientation.Orientation llIIlIlIIl -> llIIlIlIIl
    int llIllIIlll -> llIllIIlll
    com.microblink.hardware.orientation.Orientation llIIlIlIIl(int) -> llIIlIlIIl
    void onOrientationChanged(int) -> onOrientationChanged
com.microblink.hash.HashDumper -> com.microblink.hash.HashDumper:
    void dumpHashes() -> dumpHashes
com.microblink.image.Image -> com.microblink.image.Image:
    int lIIIIIllll -> lIIIIIllll
    int mHeight -> mHeight
    com.microblink.image.ImageType llIIlIlIIl -> llIIlIlIIl
    com.microblink.image.ImageFormat llIIlIlIIl -> llIIlIlIIl
    java.lang.String IllIIIIllI -> IllIIIIllI
    com.microblink.image.ImagePlane[] llIIlIlIIl -> llIIlIlIIl
    android.graphics.Rect llIIlIlIIl -> llIIlIlIIl
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    com.microblink.image.ImageType getImageType() -> getImageType
    com.microblink.image.ImageFormat getImageFormat() -> getImageFormat
    java.lang.String getImageName() -> getImageName
    com.microblink.image.ImagePlane[] getImagePlanes() -> getImagePlanes
    android.graphics.Rect getROI() -> getROI
com.microblink.image.ImageFormat -> com.microblink.image.ImageFormat:
    com.microblink.image.ImageFormat ALPHA_8 -> ALPHA_8
    com.microblink.image.ImageFormat BGRA_8888 -> BGRA_8888
    com.microblink.image.ImageFormat YUV_NV21 -> YUV_NV21
    com.microblink.image.ImageFormat[] $VALUES -> $VALUES
    com.microblink.image.ImageFormat[] values() -> values
    com.microblink.image.ImageFormat valueOf(java.lang.String) -> valueOf
com.microblink.image.ImageListener -> com.microblink.image.ImageListener:
    void onImageAvailable(com.microblink.image.Image) -> onImageAvailable
com.microblink.image.ImagePlane -> com.microblink.image.ImagePlane:
    java.nio.ByteBuffer llIIlIlIIl -> llIIlIlIIl
    int lllllIlIll -> lllllIlIll
    int lIlllIlIlI -> lIlllIlIlI
    java.nio.ByteBuffer getBuffer() -> getBuffer
    int getPixelStride() -> getPixelStride
    int getRowStride() -> getRowStride
com.microblink.image.ImageType -> com.microblink.image.ImageType:
    com.microblink.image.ImageType ORIGINAL -> ORIGINAL
    com.microblink.image.ImageType DEWARPED -> DEWARPED
    com.microblink.image.ImageType GRAYSCALE -> GRAYSCALE
    com.microblink.image.ImageType COLOR_DROP -> COLOR_DROP
    com.microblink.image.ImageType SUCCESSFUL_SCAN -> SUCCESSFUL_SCAN
    com.microblink.image.ImageType[] $VALUES -> $VALUES
    com.microblink.image.ImageType[] values() -> values
    com.microblink.image.ImageType valueOf(java.lang.String) -> valueOf
com.microblink.locale.Language -> com.microblink.locale.Language:
    com.microblink.locale.Language Croatian -> Croatian
    com.microblink.locale.Language Slovenian -> Slovenian
    com.microblink.locale.Language English -> English
    com.microblink.locale.Language German -> German
    com.microblink.locale.Language Dutch -> Dutch
    com.microblink.locale.Language Hungarian -> Hungarian
    com.microblink.locale.Language French -> French
    java.lang.String mLanguage -> mLanguage
    java.lang.String mCountry -> mCountry
    com.microblink.locale.Language[] $VALUES -> $VALUES
    com.microblink.locale.Language[] values() -> values
    com.microblink.locale.Language valueOf(java.lang.String) -> valueOf
    java.lang.String getLanguage() -> getLanguage
    java.lang.String getCountry() -> getCountry
com.microblink.locale.LanguageUtils -> com.microblink.locale.LanguageUtils:
    java.lang.String PREFS_COUNTRY -> PREFS_COUNTRY
    java.lang.String PREFS_LANGUAGE -> PREFS_LANGUAGE
    java.lang.String mLanguage -> mLanguage
    java.lang.String mCountry -> mCountry
    void setLanguage(com.microblink.locale.Language,android.content.Context) -> setLanguage
    void setLanguageAndCountry(java.lang.String,java.lang.String,android.content.Context) -> setLanguageAndCountry
    void setLanguageConfiguration(android.content.res.Resources) -> setLanguageConfiguration
com.microblink.nineoldandroids.animation.Animator -> com.microblink.nineoldandroids.animation.Animator:
    java.util.ArrayList mListeners -> mListeners
    void start() -> start
    void cancel() -> cancel
    void end() -> end
    long getStartDelay() -> getStartDelay
    void setStartDelay(long) -> setStartDelay
    com.microblink.nineoldandroids.animation.Animator setDuration(long) -> setDuration
    long getDuration() -> getDuration
    void setInterpolator(android.view.animation.Interpolator) -> setInterpolator
    boolean isRunning() -> isRunning
    boolean isStarted() -> isStarted
    void addListener(com.microblink.nineoldandroids.animation.Animator$AnimatorListener) -> addListener
    void removeListener(com.microblink.nineoldandroids.animation.Animator$AnimatorListener) -> removeListener
    java.util.ArrayList getListeners() -> getListeners
    void removeAllListeners() -> removeAllListeners
    com.microblink.nineoldandroids.animation.Animator clone() -> clone
    void setupStartValues() -> setupStartValues
    void setupEndValues() -> setupEndValues
    void setTarget(java.lang.Object) -> setTarget
    java.lang.Object clone() -> clone
com.microblink.nineoldandroids.animation.Animator$AnimatorListener -> com.microblink.nineoldandroids.animation.Animator$AnimatorListener:
    void onAnimationStart(com.microblink.nineoldandroids.animation.Animator) -> onAnimationStart
    void onAnimationEnd(com.microblink.nineoldandroids.animation.Animator) -> onAnimationEnd
    void onAnimationCancel(com.microblink.nineoldandroids.animation.Animator) -> onAnimationCancel
    void onAnimationRepeat(com.microblink.nineoldandroids.animation.Animator) -> onAnimationRepeat
com.microblink.nineoldandroids.animation.AnimatorInflater -> com.microblink.nineoldandroids.animation.AnimatorInflater:
    int[] AnimatorSet -> AnimatorSet
    int AnimatorSet_ordering -> AnimatorSet_ordering
    int[] PropertyAnimator -> PropertyAnimator
    int PropertyAnimator_propertyName -> PropertyAnimator_propertyName
    int[] Animator -> Animator
    int Animator_interpolator -> Animator_interpolator
    int Animator_duration -> Animator_duration
    int Animator_startOffset -> Animator_startOffset
    int Animator_repeatCount -> Animator_repeatCount
    int Animator_repeatMode -> Animator_repeatMode
    int Animator_valueFrom -> Animator_valueFrom
    int Animator_valueTo -> Animator_valueTo
    int Animator_valueType -> Animator_valueType
    int TOGETHER -> TOGETHER
    int VALUE_TYPE_FLOAT -> VALUE_TYPE_FLOAT
    com.microblink.nineoldandroids.animation.Animator loadAnimator(android.content.Context,int) -> loadAnimator
    com.microblink.nineoldandroids.animation.Animator createAnimatorFromXml(android.content.Context,org.xmlpull.v1.XmlPullParser) -> createAnimatorFromXml
    com.microblink.nineoldandroids.animation.Animator createAnimatorFromXml(android.content.Context,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,com.microblink.nineoldandroids.animation.AnimatorSet,int) -> createAnimatorFromXml
    com.microblink.nineoldandroids.animation.ObjectAnimator loadObjectAnimator(android.content.Context,android.util.AttributeSet) -> loadObjectAnimator
    com.microblink.nineoldandroids.animation.ValueAnimator loadAnimator(android.content.Context,android.util.AttributeSet,com.microblink.nineoldandroids.animation.ValueAnimator) -> loadAnimator
com.microblink.nineoldandroids.animation.AnimatorListenerAdapter -> com.microblink.nineoldandroids.animation.AnimatorListenerAdapter:
    void onAnimationCancel(com.microblink.nineoldandroids.animation.Animator) -> onAnimationCancel
    void onAnimationEnd(com.microblink.nineoldandroids.animation.Animator) -> onAnimationEnd
    void onAnimationRepeat(com.microblink.nineoldandroids.animation.Animator) -> onAnimationRepeat
    void onAnimationStart(com.microblink.nineoldandroids.animation.Animator) -> onAnimationStart
com.microblink.nineoldandroids.animation.AnimatorSet -> com.microblink.nineoldandroids.animation.AnimatorSet:
    java.util.ArrayList mPlayingSet -> mPlayingSet
    java.util.HashMap mNodeMap -> mNodeMap
    java.util.ArrayList mNodes -> mNodes
    java.util.ArrayList mSortedNodes -> mSortedNodes
    boolean mNeedsSort -> mNeedsSort
    com.microblink.nineoldandroids.animation.AnimatorSet$AnimatorSetListener mSetListener -> mSetListener
    boolean mTerminated -> mTerminated
    boolean mStarted -> mStarted
    long mStartDelay -> mStartDelay
    com.microblink.nineoldandroids.animation.ValueAnimator mDelayAnim -> mDelayAnim
    long mDuration -> mDuration
    void playTogether(com.microblink.nineoldandroids.animation.Animator[]) -> playTogether
    void playTogether(java.util.Collection) -> playTogether
    void playSequentially(com.microblink.nineoldandroids.animation.Animator[]) -> playSequentially
    void playSequentially(java.util.List) -> playSequentially
    java.util.ArrayList getChildAnimations() -> getChildAnimations
    void setTarget(java.lang.Object) -> setTarget
    void setInterpolator(android.view.animation.Interpolator) -> setInterpolator
    com.microblink.nineoldandroids.animation.AnimatorSet$Builder play(com.microblink.nineoldandroids.animation.Animator) -> play
    void cancel() -> cancel
    void end() -> end
    boolean isRunning() -> isRunning
    boolean isStarted() -> isStarted
    long getStartDelay() -> getStartDelay
    void setStartDelay(long) -> setStartDelay
    long getDuration() -> getDuration
    com.microblink.nineoldandroids.animation.AnimatorSet setDuration(long) -> setDuration
    void setupStartValues() -> setupStartValues
    void setupEndValues() -> setupEndValues
    void start() -> start
    com.microblink.nineoldandroids.animation.AnimatorSet clone() -> clone
    void sortNodes() -> sortNodes
    com.microblink.nineoldandroids.animation.Animator clone() -> clone
    com.microblink.nineoldandroids.animation.Animator setDuration(long) -> setDuration
    java.lang.Object clone() -> clone
    java.util.ArrayList access$000(com.microblink.nineoldandroids.animation.AnimatorSet) -> access$000
    java.util.HashMap access$100(com.microblink.nineoldandroids.animation.AnimatorSet) -> access$100
    java.util.ArrayList access$200(com.microblink.nineoldandroids.animation.AnimatorSet) -> access$200
    boolean access$302(com.microblink.nineoldandroids.animation.AnimatorSet,boolean) -> access$302
    java.util.ArrayList access$400(com.microblink.nineoldandroids.animation.AnimatorSet) -> access$400
com.microblink.nineoldandroids.animation.AnimatorSet$1 -> com.microblink.nineoldandroids.animation.AnimatorSet$1:
    boolean canceled -> canceled
    java.util.ArrayList val$nodesToStart -> val$nodesToStart
    com.microblink.nineoldandroids.animation.AnimatorSet this$0 -> this$0
    void onAnimationCancel(com.microblink.nineoldandroids.animation.Animator) -> onAnimationCancel
    void onAnimationEnd(com.microblink.nineoldandroids.animation.Animator) -> onAnimationEnd
com.microblink.nineoldandroids.animation.AnimatorSet$AnimatorSetListener -> com.microblink.nineoldandroids.animation.AnimatorSet$AnimatorSetListener:
    com.microblink.nineoldandroids.animation.AnimatorSet mAnimatorSet -> mAnimatorSet
    com.microblink.nineoldandroids.animation.AnimatorSet this$0 -> this$0
    void onAnimationCancel(com.microblink.nineoldandroids.animation.Animator) -> onAnimationCancel
    void onAnimationEnd(com.microblink.nineoldandroids.animation.Animator) -> onAnimationEnd
    void onAnimationRepeat(com.microblink.nineoldandroids.animation.Animator) -> onAnimationRepeat
    void onAnimationStart(com.microblink.nineoldandroids.animation.Animator) -> onAnimationStart
com.microblink.nineoldandroids.animation.AnimatorSet$Builder -> com.microblink.nineoldandroids.animation.AnimatorSet$Builder:
    com.microblink.nineoldandroids.animation.AnimatorSet$Node mCurrentNode -> mCurrentNode
    com.microblink.nineoldandroids.animation.AnimatorSet this$0 -> this$0
    com.microblink.nineoldandroids.animation.AnimatorSet$Builder with(com.microblink.nineoldandroids.animation.Animator) -> with
    com.microblink.nineoldandroids.animation.AnimatorSet$Builder before(com.microblink.nineoldandroids.animation.Animator) -> before
    com.microblink.nineoldandroids.animation.AnimatorSet$Builder after(com.microblink.nineoldandroids.animation.Animator) -> after
    com.microblink.nineoldandroids.animation.AnimatorSet$Builder after(long) -> after
com.microblink.nineoldandroids.animation.AnimatorSet$Dependency -> com.microblink.nineoldandroids.animation.AnimatorSet$Dependency:
    int WITH -> WITH
    int AFTER -> AFTER
    com.microblink.nineoldandroids.animation.AnimatorSet$Node node -> node
    int rule -> rule
com.microblink.nineoldandroids.animation.AnimatorSet$DependencyListener -> com.microblink.nineoldandroids.animation.AnimatorSet$DependencyListener:
    com.microblink.nineoldandroids.animation.AnimatorSet mAnimatorSet -> mAnimatorSet
    com.microblink.nineoldandroids.animation.AnimatorSet$Node mNode -> mNode
    int mRule -> mRule
    void onAnimationCancel(com.microblink.nineoldandroids.animation.Animator) -> onAnimationCancel
    void onAnimationEnd(com.microblink.nineoldandroids.animation.Animator) -> onAnimationEnd
    void onAnimationRepeat(com.microblink.nineoldandroids.animation.Animator) -> onAnimationRepeat
    void onAnimationStart(com.microblink.nineoldandroids.animation.Animator) -> onAnimationStart
    void startIfReady(com.microblink.nineoldandroids.animation.Animator) -> startIfReady
com.microblink.nineoldandroids.animation.AnimatorSet$Node -> com.microblink.nineoldandroids.animation.AnimatorSet$Node:
    com.microblink.nineoldandroids.animation.Animator animation -> animation
    java.util.ArrayList dependencies -> dependencies
    java.util.ArrayList tmpDependencies -> tmpDependencies
    java.util.ArrayList nodeDependencies -> nodeDependencies
    java.util.ArrayList nodeDependents -> nodeDependents
    boolean done -> done
    void addDependency(com.microblink.nineoldandroids.animation.AnimatorSet$Dependency) -> addDependency
    com.microblink.nineoldandroids.animation.AnimatorSet$Node clone() -> clone
    java.lang.Object clone() -> clone
com.microblink.nineoldandroids.animation.ArgbEvaluator -> com.microblink.nineoldandroids.animation.ArgbEvaluator:
    java.lang.Object evaluate(float,java.lang.Object,java.lang.Object) -> evaluate
com.microblink.nineoldandroids.animation.FloatEvaluator -> com.microblink.nineoldandroids.animation.FloatEvaluator:
    java.lang.Float evaluate(float,java.lang.Number,java.lang.Number) -> evaluate
    java.lang.Object evaluate(float,java.lang.Object,java.lang.Object) -> evaluate
com.microblink.nineoldandroids.animation.FloatKeyframeSet -> com.microblink.nineoldandroids.animation.FloatKeyframeSet:
    float firstValue -> firstValue
    float lastValue -> lastValue
    float deltaValue -> deltaValue
    boolean firstTime -> firstTime
    java.lang.Object getValue(float) -> getValue
    com.microblink.nineoldandroids.animation.FloatKeyframeSet clone() -> clone
    float getFloatValue(float) -> getFloatValue
    com.microblink.nineoldandroids.animation.KeyframeSet clone() -> clone
    java.lang.Object clone() -> clone
com.microblink.nineoldandroids.animation.IntEvaluator -> com.microblink.nineoldandroids.animation.IntEvaluator:
    java.lang.Integer evaluate(float,java.lang.Integer,java.lang.Integer) -> evaluate
    java.lang.Object evaluate(float,java.lang.Object,java.lang.Object) -> evaluate
com.microblink.nineoldandroids.animation.IntKeyframeSet -> com.microblink.nineoldandroids.animation.IntKeyframeSet:
    int firstValue -> firstValue
    int lastValue -> lastValue
    int deltaValue -> deltaValue
    boolean firstTime -> firstTime
    java.lang.Object getValue(float) -> getValue
    com.microblink.nineoldandroids.animation.IntKeyframeSet clone() -> clone
    int getIntValue(float) -> getIntValue
    com.microblink.nineoldandroids.animation.KeyframeSet clone() -> clone
    java.lang.Object clone() -> clone
com.microblink.nineoldandroids.animation.Keyframe -> com.microblink.nineoldandroids.animation.Keyframe:
    float mFraction -> mFraction
    java.lang.Class mValueType -> mValueType
    android.view.animation.Interpolator mInterpolator -> mInterpolator
    boolean mHasValue -> mHasValue
    com.microblink.nineoldandroids.animation.Keyframe ofInt(float,int) -> ofInt
    com.microblink.nineoldandroids.animation.Keyframe ofInt(float) -> ofInt
    com.microblink.nineoldandroids.animation.Keyframe ofFloat(float,float) -> ofFloat
    com.microblink.nineoldandroids.animation.Keyframe ofFloat(float) -> ofFloat
    com.microblink.nineoldandroids.animation.Keyframe ofObject(float,java.lang.Object) -> ofObject
    com.microblink.nineoldandroids.animation.Keyframe ofObject(float) -> ofObject
    boolean hasValue() -> hasValue
    java.lang.Object getValue() -> getValue
    void setValue(java.lang.Object) -> setValue
    float getFraction() -> getFraction
    void setFraction(float) -> setFraction
    android.view.animation.Interpolator getInterpolator() -> getInterpolator
    void setInterpolator(android.view.animation.Interpolator) -> setInterpolator
    java.lang.Class getType() -> getType
    com.microblink.nineoldandroids.animation.Keyframe clone() -> clone
    java.lang.Object clone() -> clone
com.microblink.nineoldandroids.animation.Keyframe$FloatKeyframe -> com.microblink.nineoldandroids.animation.Keyframe$FloatKeyframe:
    float mValue -> mValue
    float getFloatValue() -> getFloatValue
    java.lang.Object getValue() -> getValue
    void setValue(java.lang.Object) -> setValue
    com.microblink.nineoldandroids.animation.Keyframe$FloatKeyframe clone() -> clone
    com.microblink.nineoldandroids.animation.Keyframe clone() -> clone
    java.lang.Object clone() -> clone
com.microblink.nineoldandroids.animation.Keyframe$IntKeyframe -> com.microblink.nineoldandroids.animation.Keyframe$IntKeyframe:
    int mValue -> mValue
    int getIntValue() -> getIntValue
    java.lang.Object getValue() -> getValue
    void setValue(java.lang.Object) -> setValue
    com.microblink.nineoldandroids.animation.Keyframe$IntKeyframe clone() -> clone
    com.microblink.nineoldandroids.animation.Keyframe clone() -> clone
    java.lang.Object clone() -> clone
com.microblink.nineoldandroids.animation.Keyframe$ObjectKeyframe -> com.microblink.nineoldandroids.animation.Keyframe$ObjectKeyframe:
    java.lang.Object mValue -> mValue
    java.lang.Object getValue() -> getValue
    void setValue(java.lang.Object) -> setValue
    com.microblink.nineoldandroids.animation.Keyframe$ObjectKeyframe clone() -> clone
    com.microblink.nineoldandroids.animation.Keyframe clone() -> clone
    java.lang.Object clone() -> clone
com.microblink.nineoldandroids.animation.KeyframeSet -> com.microblink.nineoldandroids.animation.KeyframeSet:
    int mNumKeyframes -> mNumKeyframes
    com.microblink.nineoldandroids.animation.Keyframe mFirstKeyframe -> mFirstKeyframe
    com.microblink.nineoldandroids.animation.Keyframe mLastKeyframe -> mLastKeyframe
    android.view.animation.Interpolator mInterpolator -> mInterpolator
    java.util.ArrayList mKeyframes -> mKeyframes
    com.microblink.nineoldandroids.animation.TypeEvaluator mEvaluator -> mEvaluator
    com.microblink.nineoldandroids.animation.KeyframeSet ofInt(int[]) -> ofInt
    com.microblink.nineoldandroids.animation.KeyframeSet ofFloat(float[]) -> ofFloat
    com.microblink.nineoldandroids.animation.KeyframeSet ofKeyframe(com.microblink.nineoldandroids.animation.Keyframe[]) -> ofKeyframe
    com.microblink.nineoldandroids.animation.KeyframeSet ofObject(java.lang.Object[]) -> ofObject
    void setEvaluator(com.microblink.nineoldandroids.animation.TypeEvaluator) -> setEvaluator
    com.microblink.nineoldandroids.animation.KeyframeSet clone() -> clone
    java.lang.Object getValue(float) -> getValue
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
com.microblink.nineoldandroids.animation.ObjectAnimator -> com.microblink.nineoldandroids.animation.ObjectAnimator:
    boolean DBG -> DBG
    java.util.Map PROXY_PROPERTIES -> PROXY_PROPERTIES
    java.lang.Object mTarget -> mTarget
    java.lang.String mPropertyName -> mPropertyName
    com.microblink.nineoldandroids.util.Property mProperty -> mProperty
    void setPropertyName(java.lang.String) -> setPropertyName
    void setProperty(com.microblink.nineoldandroids.util.Property) -> setProperty
    java.lang.String getPropertyName() -> getPropertyName
    com.microblink.nineoldandroids.animation.ObjectAnimator ofInt(java.lang.Object,java.lang.String,int[]) -> ofInt
    com.microblink.nineoldandroids.animation.ObjectAnimator ofInt(java.lang.Object,com.microblink.nineoldandroids.util.Property,int[]) -> ofInt
    com.microblink.nineoldandroids.animation.ObjectAnimator ofFloat(java.lang.Object,java.lang.String,float[]) -> ofFloat
    com.microblink.nineoldandroids.animation.ObjectAnimator ofFloat(java.lang.Object,com.microblink.nineoldandroids.util.Property,float[]) -> ofFloat
    com.microblink.nineoldandroids.animation.ObjectAnimator ofObject(java.lang.Object,java.lang.String,com.microblink.nineoldandroids.animation.TypeEvaluator,java.lang.Object[]) -> ofObject
    com.microblink.nineoldandroids.animation.ObjectAnimator ofObject(java.lang.Object,com.microblink.nineoldandroids.util.Property,com.microblink.nineoldandroids.animation.TypeEvaluator,java.lang.Object[]) -> ofObject
    com.microblink.nineoldandroids.animation.ObjectAnimator ofPropertyValuesHolder(java.lang.Object,com.microblink.nineoldandroids.animation.PropertyValuesHolder[]) -> ofPropertyValuesHolder
    void setIntValues(int[]) -> setIntValues
    void setFloatValues(float[]) -> setFloatValues
    void setObjectValues(java.lang.Object[]) -> setObjectValues
    void start() -> start
    void initAnimation() -> initAnimation
    com.microblink.nineoldandroids.animation.ObjectAnimator setDuration(long) -> setDuration
    java.lang.Object getTarget() -> getTarget
    void setTarget(java.lang.Object) -> setTarget
    void setupStartValues() -> setupStartValues
    void setupEndValues() -> setupEndValues
    void animateValue(float) -> animateValue
    com.microblink.nineoldandroids.animation.ObjectAnimator clone() -> clone
    java.lang.String toString() -> toString
    com.microblink.nineoldandroids.animation.ValueAnimator clone() -> clone
    com.microblink.nineoldandroids.animation.ValueAnimator setDuration(long) -> setDuration
    com.microblink.nineoldandroids.animation.Animator clone() -> clone
    com.microblink.nineoldandroids.animation.Animator setDuration(long) -> setDuration
    java.lang.Object clone() -> clone
com.microblink.nineoldandroids.animation.PreHoneycombCompat -> com.microblink.nineoldandroids.animation.PreHoneycombCompat:
    com.microblink.nineoldandroids.util.Property ALPHA -> ALPHA
    com.microblink.nineoldandroids.util.Property PIVOT_X -> PIVOT_X
    com.microblink.nineoldandroids.util.Property PIVOT_Y -> PIVOT_Y
    com.microblink.nineoldandroids.util.Property TRANSLATION_X -> TRANSLATION_X
    com.microblink.nineoldandroids.util.Property TRANSLATION_Y -> TRANSLATION_Y
    com.microblink.nineoldandroids.util.Property ROTATION -> ROTATION
    com.microblink.nineoldandroids.util.Property ROTATION_X -> ROTATION_X
    com.microblink.nineoldandroids.util.Property ROTATION_Y -> ROTATION_Y
    com.microblink.nineoldandroids.util.Property SCALE_X -> SCALE_X
    com.microblink.nineoldandroids.util.Property SCALE_Y -> SCALE_Y
    com.microblink.nineoldandroids.util.Property SCROLL_X -> SCROLL_X
    com.microblink.nineoldandroids.util.Property SCROLL_Y -> SCROLL_Y
    com.microblink.nineoldandroids.util.Property X -> X
    com.microblink.nineoldandroids.util.Property Y -> Y
com.microblink.nineoldandroids.animation.PreHoneycombCompat$1 -> com.microblink.nineoldandroids.animation.PreHoneycombCompat$1:
    void setValue(android.view.View,float) -> setValue
    java.lang.Float get(android.view.View) -> get
    void setValue(java.lang.Object,float) -> setValue
    java.lang.Object get(java.lang.Object) -> get
com.microblink.nineoldandroids.animation.PreHoneycombCompat$10 -> com.microblink.nineoldandroids.animation.PreHoneycombCompat$10:
    void setValue(android.view.View,float) -> setValue
    java.lang.Float get(android.view.View) -> get
    void setValue(java.lang.Object,float) -> setValue
    java.lang.Object get(java.lang.Object) -> get
com.microblink.nineoldandroids.animation.PreHoneycombCompat$11 -> com.microblink.nineoldandroids.animation.PreHoneycombCompat$11:
    void setValue(android.view.View,int) -> setValue
    java.lang.Integer get(android.view.View) -> get
    void setValue(java.lang.Object,int) -> setValue
    java.lang.Object get(java.lang.Object) -> get
com.microblink.nineoldandroids.animation.PreHoneycombCompat$12 -> com.microblink.nineoldandroids.animation.PreHoneycombCompat$12:
    void setValue(android.view.View,int) -> setValue
    java.lang.Integer get(android.view.View) -> get
    void setValue(java.lang.Object,int) -> setValue
    java.lang.Object get(java.lang.Object) -> get
com.microblink.nineoldandroids.animation.PreHoneycombCompat$13 -> com.microblink.nineoldandroids.animation.PreHoneycombCompat$13:
    void setValue(android.view.View,float) -> setValue
    java.lang.Float get(android.view.View) -> get
    void setValue(java.lang.Object,float) -> setValue
    java.lang.Object get(java.lang.Object) -> get
com.microblink.nineoldandroids.animation.PreHoneycombCompat$14 -> com.microblink.nineoldandroids.animation.PreHoneycombCompat$14:
    void setValue(android.view.View,float) -> setValue
    java.lang.Float get(android.view.View) -> get
    void setValue(java.lang.Object,float) -> setValue
    java.lang.Object get(java.lang.Object) -> get
com.microblink.nineoldandroids.animation.PreHoneycombCompat$2 -> com.microblink.nineoldandroids.animation.PreHoneycombCompat$2:
    void setValue(android.view.View,float) -> setValue
    java.lang.Float get(android.view.View) -> get
    void setValue(java.lang.Object,float) -> setValue
    java.lang.Object get(java.lang.Object) -> get
com.microblink.nineoldandroids.animation.PreHoneycombCompat$3 -> com.microblink.nineoldandroids.animation.PreHoneycombCompat$3:
    void setValue(android.view.View,float) -> setValue
    java.lang.Float get(android.view.View) -> get
    void setValue(java.lang.Object,float) -> setValue
    java.lang.Object get(java.lang.Object) -> get
com.microblink.nineoldandroids.animation.PreHoneycombCompat$4 -> com.microblink.nineoldandroids.animation.PreHoneycombCompat$4:
    void setValue(android.view.View,float) -> setValue
    java.lang.Float get(android.view.View) -> get
    void setValue(java.lang.Object,float) -> setValue
    java.lang.Object get(java.lang.Object) -> get
com.microblink.nineoldandroids.animation.PreHoneycombCompat$5 -> com.microblink.nineoldandroids.animation.PreHoneycombCompat$5:
    void setValue(android.view.View,float) -> setValue
    java.lang.Float get(android.view.View) -> get
    void setValue(java.lang.Object,float) -> setValue
    java.lang.Object get(java.lang.Object) -> get
com.microblink.nineoldandroids.animation.PreHoneycombCompat$6 -> com.microblink.nineoldandroids.animation.PreHoneycombCompat$6:
    void setValue(android.view.View,float) -> setValue
    java.lang.Float get(android.view.View) -> get
    void setValue(java.lang.Object,float) -> setValue
    java.lang.Object get(java.lang.Object) -> get
com.microblink.nineoldandroids.animation.PreHoneycombCompat$7 -> com.microblink.nineoldandroids.animation.PreHoneycombCompat$7:
    void setValue(android.view.View,float) -> setValue
    java.lang.Float get(android.view.View) -> get
    void setValue(java.lang.Object,float) -> setValue
    java.lang.Object get(java.lang.Object) -> get
com.microblink.nineoldandroids.animation.PreHoneycombCompat$8 -> com.microblink.nineoldandroids.animation.PreHoneycombCompat$8:
    void setValue(android.view.View,float) -> setValue
    java.lang.Float get(android.view.View) -> get
    void setValue(java.lang.Object,float) -> setValue
    java.lang.Object get(java.lang.Object) -> get
com.microblink.nineoldandroids.animation.PreHoneycombCompat$9 -> com.microblink.nineoldandroids.animation.PreHoneycombCompat$9:
    void setValue(android.view.View,float) -> setValue
    java.lang.Float get(android.view.View) -> get
    void setValue(java.lang.Object,float) -> setValue
    java.lang.Object get(java.lang.Object) -> get
com.microblink.nineoldandroids.animation.PropertyValuesHolder -> com.microblink.nineoldandroids.animation.PropertyValuesHolder:
    java.lang.String mPropertyName -> mPropertyName
    com.microblink.nineoldandroids.util.Property mProperty -> mProperty
    java.lang.reflect.Method mSetter -> mSetter
    java.lang.reflect.Method mGetter -> mGetter
    java.lang.Class mValueType -> mValueType
    com.microblink.nineoldandroids.animation.KeyframeSet mKeyframeSet -> mKeyframeSet
    com.microblink.nineoldandroids.animation.TypeEvaluator sIntEvaluator -> sIntEvaluator
    com.microblink.nineoldandroids.animation.TypeEvaluator sFloatEvaluator -> sFloatEvaluator
    java.lang.Class[] FLOAT_VARIANTS -> FLOAT_VARIANTS
    java.lang.Class[] INTEGER_VARIANTS -> INTEGER_VARIANTS
    java.lang.Class[] DOUBLE_VARIANTS -> DOUBLE_VARIANTS
    java.util.HashMap sSetterPropertyMap -> sSetterPropertyMap
    java.util.HashMap sGetterPropertyMap -> sGetterPropertyMap
    java.util.concurrent.locks.ReentrantReadWriteLock mPropertyMapLock -> mPropertyMapLock
    java.lang.Object[] mTmpValueArray -> mTmpValueArray
    com.microblink.nineoldandroids.animation.TypeEvaluator mEvaluator -> mEvaluator
    java.lang.Object mAnimatedValue -> mAnimatedValue
    com.microblink.nineoldandroids.animation.PropertyValuesHolder ofInt(java.lang.String,int[]) -> ofInt
    com.microblink.nineoldandroids.animation.PropertyValuesHolder ofInt(com.microblink.nineoldandroids.util.Property,int[]) -> ofInt
    com.microblink.nineoldandroids.animation.PropertyValuesHolder ofFloat(java.lang.String,float[]) -> ofFloat
    com.microblink.nineoldandroids.animation.PropertyValuesHolder ofFloat(com.microblink.nineoldandroids.util.Property,float[]) -> ofFloat
    com.microblink.nineoldandroids.animation.PropertyValuesHolder ofObject(java.lang.String,com.microblink.nineoldandroids.animation.TypeEvaluator,java.lang.Object[]) -> ofObject
    com.microblink.nineoldandroids.animation.PropertyValuesHolder ofObject(com.microblink.nineoldandroids.util.Property,com.microblink.nineoldandroids.animation.TypeEvaluator,java.lang.Object[]) -> ofObject
    com.microblink.nineoldandroids.animation.PropertyValuesHolder ofKeyframe(java.lang.String,com.microblink.nineoldandroids.animation.Keyframe[]) -> ofKeyframe
    com.microblink.nineoldandroids.animation.PropertyValuesHolder ofKeyframe(com.microblink.nineoldandroids.util.Property,com.microblink.nineoldandroids.animation.Keyframe[]) -> ofKeyframe
    void setIntValues(int[]) -> setIntValues
    void setFloatValues(float[]) -> setFloatValues
    void setKeyframes(com.microblink.nineoldandroids.animation.Keyframe[]) -> setKeyframes
    void setObjectValues(java.lang.Object[]) -> setObjectValues
    java.lang.reflect.Method getPropertyFunction(java.lang.Class,java.lang.String,java.lang.Class) -> getPropertyFunction
    java.lang.reflect.Method setupSetterOrGetter(java.lang.Class,java.util.HashMap,java.lang.String,java.lang.Class) -> setupSetterOrGetter
    void setupSetter(java.lang.Class) -> setupSetter
    void setupGetter(java.lang.Class) -> setupGetter
    void setupSetterAndGetter(java.lang.Object) -> setupSetterAndGetter
    void setupValue(java.lang.Object,com.microblink.nineoldandroids.animation.Keyframe) -> setupValue
    void setupStartValue(java.lang.Object) -> setupStartValue
    void setupEndValue(java.lang.Object) -> setupEndValue
    com.microblink.nineoldandroids.animation.PropertyValuesHolder clone() -> clone
    void setAnimatedValue(java.lang.Object) -> setAnimatedValue
    void init() -> init
    void setEvaluator(com.microblink.nineoldandroids.animation.TypeEvaluator) -> setEvaluator
    void calculateValue(float) -> calculateValue
    void setPropertyName(java.lang.String) -> setPropertyName
    void setProperty(com.microblink.nineoldandroids.util.Property) -> setProperty
    java.lang.String getPropertyName() -> getPropertyName
    java.lang.Object getAnimatedValue() -> getAnimatedValue
    java.lang.String toString() -> toString
    java.lang.String getMethodName(java.lang.String,java.lang.String) -> getMethodName
    java.lang.Object clone() -> clone
com.microblink.nineoldandroids.animation.PropertyValuesHolder$1 -> com.microblink.nineoldandroids.animation.PropertyValuesHolder$1:
com.microblink.nineoldandroids.animation.PropertyValuesHolder$FloatPropertyValuesHolder -> com.microblink.nineoldandroids.animation.PropertyValuesHolder$FloatPropertyValuesHolder:
    com.microblink.nineoldandroids.util.FloatProperty mFloatProperty -> mFloatProperty
    com.microblink.nineoldandroids.animation.FloatKeyframeSet mFloatKeyframeSet -> mFloatKeyframeSet
    float mFloatAnimatedValue -> mFloatAnimatedValue
    void setFloatValues(float[]) -> setFloatValues
    void calculateValue(float) -> calculateValue
    java.lang.Object getAnimatedValue() -> getAnimatedValue
    com.microblink.nineoldandroids.animation.PropertyValuesHolder$FloatPropertyValuesHolder clone() -> clone
    void setAnimatedValue(java.lang.Object) -> setAnimatedValue
    void setupSetter(java.lang.Class) -> setupSetter
    com.microblink.nineoldandroids.animation.PropertyValuesHolder clone() -> clone
    java.lang.Object clone() -> clone
com.microblink.nineoldandroids.animation.PropertyValuesHolder$IntPropertyValuesHolder -> com.microblink.nineoldandroids.animation.PropertyValuesHolder$IntPropertyValuesHolder:
    com.microblink.nineoldandroids.util.IntProperty mIntProperty -> mIntProperty
    com.microblink.nineoldandroids.animation.IntKeyframeSet mIntKeyframeSet -> mIntKeyframeSet
    int mIntAnimatedValue -> mIntAnimatedValue
    void setIntValues(int[]) -> setIntValues
    void calculateValue(float) -> calculateValue
    java.lang.Object getAnimatedValue() -> getAnimatedValue
    com.microblink.nineoldandroids.animation.PropertyValuesHolder$IntPropertyValuesHolder clone() -> clone
    void setAnimatedValue(java.lang.Object) -> setAnimatedValue
    void setupSetter(java.lang.Class) -> setupSetter
    com.microblink.nineoldandroids.animation.PropertyValuesHolder clone() -> clone
    java.lang.Object clone() -> clone
com.microblink.nineoldandroids.animation.TimeAnimator -> com.microblink.nineoldandroids.animation.TimeAnimator:
    com.microblink.nineoldandroids.animation.TimeAnimator$TimeListener mListener -> mListener
    long mPreviousTime -> mPreviousTime
    boolean animationFrame(long) -> animationFrame
    void setTimeListener(com.microblink.nineoldandroids.animation.TimeAnimator$TimeListener) -> setTimeListener
    void animateValue(float) -> animateValue
    void initAnimation() -> initAnimation
com.microblink.nineoldandroids.animation.TimeAnimator$TimeListener -> com.microblink.nineoldandroids.animation.TimeAnimator$TimeListener:
    void onTimeUpdate(com.microblink.nineoldandroids.animation.TimeAnimator,long,long) -> onTimeUpdate
com.microblink.nineoldandroids.animation.TypeEvaluator -> com.microblink.nineoldandroids.animation.TypeEvaluator:
    java.lang.Object evaluate(float,java.lang.Object,java.lang.Object) -> evaluate
com.microblink.nineoldandroids.animation.ValueAnimator -> com.microblink.nineoldandroids.animation.ValueAnimator:
    long DEFAULT_FRAME_DELAY -> DEFAULT_FRAME_DELAY
    int ANIMATION_START -> ANIMATION_START
    int ANIMATION_FRAME -> ANIMATION_FRAME
    int STOPPED -> STOPPED
    int RUNNING -> RUNNING
    int SEEKED -> SEEKED
    long mStartTime -> mStartTime
    long mSeekTime -> mSeekTime
    java.lang.ThreadLocal sAnimationHandler -> sAnimationHandler
    java.lang.ThreadLocal sAnimations -> sAnimations
    java.lang.ThreadLocal sPendingAnimations -> sPendingAnimations
    java.lang.ThreadLocal sDelayedAnims -> sDelayedAnims
    java.lang.ThreadLocal sEndingAnims -> sEndingAnims
    java.lang.ThreadLocal sReadyAnims -> sReadyAnims
    android.view.animation.Interpolator sDefaultInterpolator -> sDefaultInterpolator
    com.microblink.nineoldandroids.animation.TypeEvaluator sIntEvaluator -> sIntEvaluator
    com.microblink.nineoldandroids.animation.TypeEvaluator sFloatEvaluator -> sFloatEvaluator
    boolean mPlayingBackwards -> mPlayingBackwards
    int mCurrentIteration -> mCurrentIteration
    float mCurrentFraction -> mCurrentFraction
    boolean mStartedDelay -> mStartedDelay
    long mDelayStartTime -> mDelayStartTime
    int mPlayingState -> mPlayingState
    boolean mRunning -> mRunning
    boolean mStarted -> mStarted
    boolean mInitialized -> mInitialized
    long mDuration -> mDuration
    long mStartDelay -> mStartDelay
    long sFrameDelay -> sFrameDelay
    int mRepeatCount -> mRepeatCount
    int mRepeatMode -> mRepeatMode
    android.view.animation.Interpolator mInterpolator -> mInterpolator
    java.util.ArrayList mUpdateListeners -> mUpdateListeners
    com.microblink.nineoldandroids.animation.PropertyValuesHolder[] mValues -> mValues
    java.util.HashMap mValuesMap -> mValuesMap
    int RESTART -> RESTART
    int REVERSE -> REVERSE
    int INFINITE -> INFINITE
    com.microblink.nineoldandroids.animation.ValueAnimator ofInt(int[]) -> ofInt
    com.microblink.nineoldandroids.animation.ValueAnimator ofFloat(float[]) -> ofFloat
    com.microblink.nineoldandroids.animation.ValueAnimator ofPropertyValuesHolder(com.microblink.nineoldandroids.animation.PropertyValuesHolder[]) -> ofPropertyValuesHolder
    com.microblink.nineoldandroids.animation.ValueAnimator ofObject(com.microblink.nineoldandroids.animation.TypeEvaluator,java.lang.Object[]) -> ofObject
    void setIntValues(int[]) -> setIntValues
    void setFloatValues(float[]) -> setFloatValues
    void setObjectValues(java.lang.Object[]) -> setObjectValues
    void setValues(com.microblink.nineoldandroids.animation.PropertyValuesHolder[]) -> setValues
    com.microblink.nineoldandroids.animation.PropertyValuesHolder[] getValues() -> getValues
    void initAnimation() -> initAnimation
    com.microblink.nineoldandroids.animation.ValueAnimator setDuration(long) -> setDuration
    long getDuration() -> getDuration
    void setCurrentPlayTime(long) -> setCurrentPlayTime
    long getCurrentPlayTime() -> getCurrentPlayTime
    long getStartDelay() -> getStartDelay
    void setStartDelay(long) -> setStartDelay
    long getFrameDelay() -> getFrameDelay
    void setFrameDelay(long) -> setFrameDelay
    java.lang.Object getAnimatedValue() -> getAnimatedValue
    java.lang.Object getAnimatedValue(java.lang.String) -> getAnimatedValue
    void setRepeatCount(int) -> setRepeatCount
    int getRepeatCount() -> getRepeatCount
    void setRepeatMode(int) -> setRepeatMode
    int getRepeatMode() -> getRepeatMode
    void addUpdateListener(com.microblink.nineoldandroids.animation.ValueAnimator$AnimatorUpdateListener) -> addUpdateListener
    void removeAllUpdateListeners() -> removeAllUpdateListeners
    void removeUpdateListener(com.microblink.nineoldandroids.animation.ValueAnimator$AnimatorUpdateListener) -> removeUpdateListener
    void setInterpolator(android.view.animation.Interpolator) -> setInterpolator
    android.view.animation.Interpolator getInterpolator() -> getInterpolator
    void setEvaluator(com.microblink.nineoldandroids.animation.TypeEvaluator) -> setEvaluator
    void start(boolean) -> start
    void start() -> start
    void cancel() -> cancel
    void end() -> end
    boolean isRunning() -> isRunning
    boolean isStarted() -> isStarted
    void reverse() -> reverse
    void endAnimation() -> endAnimation
    void startAnimation() -> startAnimation
    boolean delayedAnimationFrame(long) -> delayedAnimationFrame
    boolean animationFrame(long) -> animationFrame
    float getAnimatedFraction() -> getAnimatedFraction
    void animateValue(float) -> animateValue
    com.microblink.nineoldandroids.animation.ValueAnimator clone() -> clone
    int getCurrentAnimationsCount() -> getCurrentAnimationsCount
    void clearAllAnimations() -> clearAllAnimations
    java.lang.String toString() -> toString
    com.microblink.nineoldandroids.animation.Animator clone() -> clone
    com.microblink.nineoldandroids.animation.Animator setDuration(long) -> setDuration
    java.lang.Object clone() -> clone
    java.lang.ThreadLocal access$000() -> access$000
    java.lang.ThreadLocal access$100() -> access$100
    java.lang.ThreadLocal access$200() -> access$200
    long access$300(com.microblink.nineoldandroids.animation.ValueAnimator) -> access$300
    void access$400(com.microblink.nineoldandroids.animation.ValueAnimator) -> access$400
    java.lang.ThreadLocal access$500() -> access$500
    java.lang.ThreadLocal access$600() -> access$600
    boolean access$700(com.microblink.nineoldandroids.animation.ValueAnimator,long) -> access$700
    boolean access$802(com.microblink.nineoldandroids.animation.ValueAnimator,boolean) -> access$802
    void access$900(com.microblink.nineoldandroids.animation.ValueAnimator) -> access$900
    long access$1000() -> access$1000
com.microblink.nineoldandroids.animation.ValueAnimator$1 -> com.microblink.nineoldandroids.animation.ValueAnimator$1:
    java.util.ArrayList initialValue() -> initialValue
    java.lang.Object initialValue() -> initialValue
com.microblink.nineoldandroids.animation.ValueAnimator$2 -> com.microblink.nineoldandroids.animation.ValueAnimator$2:
    java.util.ArrayList initialValue() -> initialValue
    java.lang.Object initialValue() -> initialValue
com.microblink.nineoldandroids.animation.ValueAnimator$3 -> com.microblink.nineoldandroids.animation.ValueAnimator$3:
    java.util.ArrayList initialValue() -> initialValue
    java.lang.Object initialValue() -> initialValue
com.microblink.nineoldandroids.animation.ValueAnimator$4 -> com.microblink.nineoldandroids.animation.ValueAnimator$4:
    java.util.ArrayList initialValue() -> initialValue
    java.lang.Object initialValue() -> initialValue
com.microblink.nineoldandroids.animation.ValueAnimator$5 -> com.microblink.nineoldandroids.animation.ValueAnimator$5:
    java.util.ArrayList initialValue() -> initialValue
    java.lang.Object initialValue() -> initialValue
com.microblink.nineoldandroids.animation.ValueAnimator$AnimationHandler -> com.microblink.nineoldandroids.animation.ValueAnimator$AnimationHandler:
    void handleMessage(android.os.Message) -> handleMessage
com.microblink.nineoldandroids.animation.ValueAnimator$AnimatorUpdateListener -> com.microblink.nineoldandroids.animation.ValueAnimator$AnimatorUpdateListener:
    void onAnimationUpdate(com.microblink.nineoldandroids.animation.ValueAnimator) -> onAnimationUpdate
com.microblink.nineoldandroids.util.FloatProperty -> com.microblink.nineoldandroids.util.FloatProperty:
    void setValue(java.lang.Object,float) -> setValue
    void set(java.lang.Object,java.lang.Float) -> set
    void set(java.lang.Object,java.lang.Object) -> set
com.microblink.nineoldandroids.util.IntProperty -> com.microblink.nineoldandroids.util.IntProperty:
    void setValue(java.lang.Object,int) -> setValue
    void set(java.lang.Object,java.lang.Integer) -> set
    void set(java.lang.Object,java.lang.Object) -> set
com.microblink.nineoldandroids.util.NoSuchPropertyException -> com.microblink.nineoldandroids.util.NoSuchPropertyException:
com.microblink.nineoldandroids.util.Property -> com.microblink.nineoldandroids.util.Property:
    java.lang.String mName -> mName
    java.lang.Class mType -> mType
    com.microblink.nineoldandroids.util.Property of(java.lang.Class,java.lang.Class,java.lang.String) -> of
    boolean isReadOnly() -> isReadOnly
    void set(java.lang.Object,java.lang.Object) -> set
    java.lang.Object get(java.lang.Object) -> get
    java.lang.String getName() -> getName
    java.lang.Class getType() -> getType
com.microblink.nineoldandroids.util.ReflectiveProperty -> com.microblink.nineoldandroids.util.ReflectiveProperty:
    java.lang.String PREFIX_GET -> PREFIX_GET
    java.lang.String PREFIX_IS -> PREFIX_IS
    java.lang.String PREFIX_SET -> PREFIX_SET
    java.lang.reflect.Method mSetter -> mSetter
    java.lang.reflect.Method mGetter -> mGetter
    java.lang.reflect.Field mField -> mField
    boolean typesMatch(java.lang.Class,java.lang.Class) -> typesMatch
    void set(java.lang.Object,java.lang.Object) -> set
    java.lang.Object get(java.lang.Object) -> get
    boolean isReadOnly() -> isReadOnly
com.microblink.nineoldandroids.view.ViewHelper -> com.microblink.nineoldandroids.view.ViewHelper:
    float getAlpha(android.view.View) -> getAlpha
    void setAlpha(android.view.View,float) -> setAlpha
    float getPivotX(android.view.View) -> getPivotX
    void setPivotX(android.view.View,float) -> setPivotX
    float getPivotY(android.view.View) -> getPivotY
    void setPivotY(android.view.View,float) -> setPivotY
    float getRotation(android.view.View) -> getRotation
    void setRotation(android.view.View,float) -> setRotation
    float getRotationX(android.view.View) -> getRotationX
    void setRotationX(android.view.View,float) -> setRotationX
    float getRotationY(android.view.View) -> getRotationY
    void setRotationY(android.view.View,float) -> setRotationY
    float getScaleX(android.view.View) -> getScaleX
    void setScaleX(android.view.View,float) -> setScaleX
    float getScaleY(android.view.View) -> getScaleY
    void setScaleY(android.view.View,float) -> setScaleY
    float getScrollX(android.view.View) -> getScrollX
    void setScrollX(android.view.View,int) -> setScrollX
    float getScrollY(android.view.View) -> getScrollY
    void setScrollY(android.view.View,int) -> setScrollY
    float getTranslationX(android.view.View) -> getTranslationX
    void setTranslationX(android.view.View,float) -> setTranslationX
    float getTranslationY(android.view.View) -> getTranslationY
    void setTranslationY(android.view.View,float) -> setTranslationY
    float getX(android.view.View) -> getX
    void setX(android.view.View,float) -> setX
    float getY(android.view.View) -> getY
    void setY(android.view.View,float) -> setY
com.microblink.nineoldandroids.view.ViewHelper$Honeycomb -> com.microblink.nineoldandroids.view.ViewHelper$Honeycomb:
    float getAlpha(android.view.View) -> getAlpha
    void setAlpha(android.view.View,float) -> setAlpha
    float getPivotX(android.view.View) -> getPivotX
    void setPivotX(android.view.View,float) -> setPivotX
    float getPivotY(android.view.View) -> getPivotY
    void setPivotY(android.view.View,float) -> setPivotY
    float getRotation(android.view.View) -> getRotation
    void setRotation(android.view.View,float) -> setRotation
    float getRotationX(android.view.View) -> getRotationX
    void setRotationX(android.view.View,float) -> setRotationX
    float getRotationY(android.view.View) -> getRotationY
    void setRotationY(android.view.View,float) -> setRotationY
    float getScaleX(android.view.View) -> getScaleX
    void setScaleX(android.view.View,float) -> setScaleX
    float getScaleY(android.view.View) -> getScaleY
    void setScaleY(android.view.View,float) -> setScaleY
    float getScrollX(android.view.View) -> getScrollX
    void setScrollX(android.view.View,int) -> setScrollX
    float getScrollY(android.view.View) -> getScrollY
    void setScrollY(android.view.View,int) -> setScrollY
    float getTranslationX(android.view.View) -> getTranslationX
    void setTranslationX(android.view.View,float) -> setTranslationX
    float getTranslationY(android.view.View) -> getTranslationY
    void setTranslationY(android.view.View,float) -> setTranslationY
    float getX(android.view.View) -> getX
    void setX(android.view.View,float) -> setX
    float getY(android.view.View) -> getY
    void setY(android.view.View,float) -> setY
com.microblink.nineoldandroids.view.ViewPropertyAnimator -> com.microblink.nineoldandroids.view.ViewPropertyAnimator:
    java.util.WeakHashMap ANIMATORS -> ANIMATORS
    com.microblink.nineoldandroids.view.ViewPropertyAnimator animate(android.view.View) -> animate
    com.microblink.nineoldandroids.view.ViewPropertyAnimator setDuration(long) -> setDuration
    long getDuration() -> getDuration
    long getStartDelay() -> getStartDelay
    com.microblink.nineoldandroids.view.ViewPropertyAnimator setStartDelay(long) -> setStartDelay
    com.microblink.nineoldandroids.view.ViewPropertyAnimator setInterpolator(android.view.animation.Interpolator) -> setInterpolator
    com.microblink.nineoldandroids.view.ViewPropertyAnimator setListener(com.microblink.nineoldandroids.animation.Animator$AnimatorListener) -> setListener
    void start() -> start
    void cancel() -> cancel
    com.microblink.nineoldandroids.view.ViewPropertyAnimator x(float) -> x
    com.microblink.nineoldandroids.view.ViewPropertyAnimator xBy(float) -> xBy
    com.microblink.nineoldandroids.view.ViewPropertyAnimator y(float) -> y
    com.microblink.nineoldandroids.view.ViewPropertyAnimator yBy(float) -> yBy
    com.microblink.nineoldandroids.view.ViewPropertyAnimator rotation(float) -> rotation
    com.microblink.nineoldandroids.view.ViewPropertyAnimator rotationBy(float) -> rotationBy
    com.microblink.nineoldandroids.view.ViewPropertyAnimator rotationX(float) -> rotationX
    com.microblink.nineoldandroids.view.ViewPropertyAnimator rotationXBy(float) -> rotationXBy
    com.microblink.nineoldandroids.view.ViewPropertyAnimator rotationY(float) -> rotationY
    com.microblink.nineoldandroids.view.ViewPropertyAnimator rotationYBy(float) -> rotationYBy
    com.microblink.nineoldandroids.view.ViewPropertyAnimator translationX(float) -> translationX
    com.microblink.nineoldandroids.view.ViewPropertyAnimator translationXBy(float) -> translationXBy
    com.microblink.nineoldandroids.view.ViewPropertyAnimator translationY(float) -> translationY
    com.microblink.nineoldandroids.view.ViewPropertyAnimator translationYBy(float) -> translationYBy
    com.microblink.nineoldandroids.view.ViewPropertyAnimator scaleX(float) -> scaleX
    com.microblink.nineoldandroids.view.ViewPropertyAnimator scaleXBy(float) -> scaleXBy
    com.microblink.nineoldandroids.view.ViewPropertyAnimator scaleY(float) -> scaleY
    com.microblink.nineoldandroids.view.ViewPropertyAnimator scaleYBy(float) -> scaleYBy
    com.microblink.nineoldandroids.view.ViewPropertyAnimator alpha(float) -> alpha
    com.microblink.nineoldandroids.view.ViewPropertyAnimator alphaBy(float) -> alphaBy
com.microblink.nineoldandroids.view.ViewPropertyAnimatorHC -> com.microblink.nineoldandroids.view.ViewPropertyAnimatorHC:
    java.lang.ref.WeakReference mView -> mView
    long mDuration -> mDuration
    boolean mDurationSet -> mDurationSet
    long mStartDelay -> mStartDelay
    boolean mStartDelaySet -> mStartDelaySet
    android.view.animation.Interpolator mInterpolator -> mInterpolator
    boolean mInterpolatorSet -> mInterpolatorSet
    com.microblink.nineoldandroids.animation.Animator$AnimatorListener mListener -> mListener
    com.microblink.nineoldandroids.view.ViewPropertyAnimatorHC$AnimatorEventListener mAnimatorEventListener -> mAnimatorEventListener
    java.util.ArrayList mPendingAnimations -> mPendingAnimations
    int NONE -> NONE
    int TRANSLATION_X -> TRANSLATION_X
    int TRANSLATION_Y -> TRANSLATION_Y
    int SCALE_X -> SCALE_X
    int SCALE_Y -> SCALE_Y
    int ROTATION -> ROTATION
    int ROTATION_X -> ROTATION_X
    int ROTATION_Y -> ROTATION_Y
    int X -> X
    int Y -> Y
    int ALPHA -> ALPHA
    int TRANSFORM_MASK -> TRANSFORM_MASK
    java.lang.Runnable mAnimationStarter -> mAnimationStarter
    java.util.HashMap mAnimatorMap -> mAnimatorMap
    com.microblink.nineoldandroids.view.ViewPropertyAnimator setDuration(long) -> setDuration
    long getDuration() -> getDuration
    long getStartDelay() -> getStartDelay
    com.microblink.nineoldandroids.view.ViewPropertyAnimator setStartDelay(long) -> setStartDelay
    com.microblink.nineoldandroids.view.ViewPropertyAnimator setInterpolator(android.view.animation.Interpolator) -> setInterpolator
    com.microblink.nineoldandroids.view.ViewPropertyAnimator setListener(com.microblink.nineoldandroids.animation.Animator$AnimatorListener) -> setListener
    void start() -> start
    void cancel() -> cancel
    com.microblink.nineoldandroids.view.ViewPropertyAnimator x(float) -> x
    com.microblink.nineoldandroids.view.ViewPropertyAnimator xBy(float) -> xBy
    com.microblink.nineoldandroids.view.ViewPropertyAnimator y(float) -> y
    com.microblink.nineoldandroids.view.ViewPropertyAnimator yBy(float) -> yBy
    com.microblink.nineoldandroids.view.ViewPropertyAnimator rotation(float) -> rotation
    com.microblink.nineoldandroids.view.ViewPropertyAnimator rotationBy(float) -> rotationBy
    com.microblink.nineoldandroids.view.ViewPropertyAnimator rotationX(float) -> rotationX
    com.microblink.nineoldandroids.view.ViewPropertyAnimator rotationXBy(float) -> rotationXBy
    com.microblink.nineoldandroids.view.ViewPropertyAnimator rotationY(float) -> rotationY
    com.microblink.nineoldandroids.view.ViewPropertyAnimator rotationYBy(float) -> rotationYBy
    com.microblink.nineoldandroids.view.ViewPropertyAnimator translationX(float) -> translationX
    com.microblink.nineoldandroids.view.ViewPropertyAnimator translationXBy(float) -> translationXBy
    com.microblink.nineoldandroids.view.ViewPropertyAnimator translationY(float) -> translationY
    com.microblink.nineoldandroids.view.ViewPropertyAnimator translationYBy(float) -> translationYBy
    com.microblink.nineoldandroids.view.ViewPropertyAnimator scaleX(float) -> scaleX
    com.microblink.nineoldandroids.view.ViewPropertyAnimator scaleXBy(float) -> scaleXBy
    com.microblink.nineoldandroids.view.ViewPropertyAnimator scaleY(float) -> scaleY
    com.microblink.nineoldandroids.view.ViewPropertyAnimator scaleYBy(float) -> scaleYBy
    com.microblink.nineoldandroids.view.ViewPropertyAnimator alpha(float) -> alpha
    com.microblink.nineoldandroids.view.ViewPropertyAnimator alphaBy(float) -> alphaBy
    void startAnimation() -> startAnimation
    void animateProperty(int,float) -> animateProperty
    void animatePropertyBy(int,float) -> animatePropertyBy
    void animatePropertyBy(int,float,float) -> animatePropertyBy
    void setValue(int,float) -> setValue
    float getValue(int) -> getValue
    void access$100(com.microblink.nineoldandroids.view.ViewPropertyAnimatorHC) -> access$100
    com.microblink.nineoldandroids.animation.Animator$AnimatorListener access$200(com.microblink.nineoldandroids.view.ViewPropertyAnimatorHC) -> access$200
    java.util.HashMap access$300(com.microblink.nineoldandroids.view.ViewPropertyAnimatorHC) -> access$300
    com.microblink.nineoldandroids.animation.Animator$AnimatorListener access$202(com.microblink.nineoldandroids.view.ViewPropertyAnimatorHC,com.microblink.nineoldandroids.animation.Animator$AnimatorListener) -> access$202
    java.lang.ref.WeakReference access$400(com.microblink.nineoldandroids.view.ViewPropertyAnimatorHC) -> access$400
    void access$500(com.microblink.nineoldandroids.view.ViewPropertyAnimatorHC,int,float) -> access$500
com.microblink.nineoldandroids.view.ViewPropertyAnimatorHC$1 -> com.microblink.nineoldandroids.view.ViewPropertyAnimatorHC$1:
    com.microblink.nineoldandroids.view.ViewPropertyAnimatorHC this$0 -> this$0
    void run() -> run
com.microblink.nineoldandroids.view.ViewPropertyAnimatorHC$AnimatorEventListener -> com.microblink.nineoldandroids.view.ViewPropertyAnimatorHC$AnimatorEventListener:
    com.microblink.nineoldandroids.view.ViewPropertyAnimatorHC this$0 -> this$0
    void onAnimationStart(com.microblink.nineoldandroids.animation.Animator) -> onAnimationStart
    void onAnimationCancel(com.microblink.nineoldandroids.animation.Animator) -> onAnimationCancel
    void onAnimationRepeat(com.microblink.nineoldandroids.animation.Animator) -> onAnimationRepeat
    void onAnimationEnd(com.microblink.nineoldandroids.animation.Animator) -> onAnimationEnd
    void onAnimationUpdate(com.microblink.nineoldandroids.animation.ValueAnimator) -> onAnimationUpdate
com.microblink.nineoldandroids.view.ViewPropertyAnimatorHC$NameValuesHolder -> com.microblink.nineoldandroids.view.ViewPropertyAnimatorHC$NameValuesHolder:
    int mNameConstant -> mNameConstant
    float mFromValue -> mFromValue
    float mDeltaValue -> mDeltaValue
com.microblink.nineoldandroids.view.ViewPropertyAnimatorHC$PropertyBundle -> com.microblink.nineoldandroids.view.ViewPropertyAnimatorHC$PropertyBundle:
    int mPropertyMask -> mPropertyMask
    java.util.ArrayList mNameValuesHolder -> mNameValuesHolder
    boolean cancel(int) -> cancel
com.microblink.nineoldandroids.view.ViewPropertyAnimatorICS -> com.microblink.nineoldandroids.view.ViewPropertyAnimatorICS:
    long RETURN_WHEN_NULL -> RETURN_WHEN_NULL
    java.lang.ref.WeakReference mNative -> mNative
    com.microblink.nineoldandroids.view.ViewPropertyAnimator setDuration(long) -> setDuration
    long getDuration() -> getDuration
    com.microblink.nineoldandroids.view.ViewPropertyAnimator setStartDelay(long) -> setStartDelay
    long getStartDelay() -> getStartDelay
    com.microblink.nineoldandroids.view.ViewPropertyAnimator setInterpolator(android.view.animation.Interpolator) -> setInterpolator
    com.microblink.nineoldandroids.view.ViewPropertyAnimator setListener(com.microblink.nineoldandroids.animation.Animator$AnimatorListener) -> setListener
    void start() -> start
    void cancel() -> cancel
    com.microblink.nineoldandroids.view.ViewPropertyAnimator x(float) -> x
    com.microblink.nineoldandroids.view.ViewPropertyAnimator xBy(float) -> xBy
    com.microblink.nineoldandroids.view.ViewPropertyAnimator y(float) -> y
    com.microblink.nineoldandroids.view.ViewPropertyAnimator yBy(float) -> yBy
    com.microblink.nineoldandroids.view.ViewPropertyAnimator rotation(float) -> rotation
    com.microblink.nineoldandroids.view.ViewPropertyAnimator rotationBy(float) -> rotationBy
    com.microblink.nineoldandroids.view.ViewPropertyAnimator rotationX(float) -> rotationX
    com.microblink.nineoldandroids.view.ViewPropertyAnimator rotationXBy(float) -> rotationXBy
    com.microblink.nineoldandroids.view.ViewPropertyAnimator rotationY(float) -> rotationY
    com.microblink.nineoldandroids.view.ViewPropertyAnimator rotationYBy(float) -> rotationYBy
    com.microblink.nineoldandroids.view.ViewPropertyAnimator translationX(float) -> translationX
    com.microblink.nineoldandroids.view.ViewPropertyAnimator translationXBy(float) -> translationXBy
    com.microblink.nineoldandroids.view.ViewPropertyAnimator translationY(float) -> translationY
    com.microblink.nineoldandroids.view.ViewPropertyAnimator translationYBy(float) -> translationYBy
    com.microblink.nineoldandroids.view.ViewPropertyAnimator scaleX(float) -> scaleX
    com.microblink.nineoldandroids.view.ViewPropertyAnimator scaleXBy(float) -> scaleXBy
    com.microblink.nineoldandroids.view.ViewPropertyAnimator scaleY(float) -> scaleY
    com.microblink.nineoldandroids.view.ViewPropertyAnimator scaleYBy(float) -> scaleYBy
    com.microblink.nineoldandroids.view.ViewPropertyAnimator alpha(float) -> alpha
    com.microblink.nineoldandroids.view.ViewPropertyAnimator alphaBy(float) -> alphaBy
com.microblink.nineoldandroids.view.ViewPropertyAnimatorICS$1 -> com.microblink.nineoldandroids.view.ViewPropertyAnimatorICS$1:
    com.microblink.nineoldandroids.animation.Animator$AnimatorListener val$listener -> val$listener
    com.microblink.nineoldandroids.view.ViewPropertyAnimatorICS this$0 -> this$0
    void onAnimationStart(android.animation.Animator) -> onAnimationStart
    void onAnimationRepeat(android.animation.Animator) -> onAnimationRepeat
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
    void onAnimationCancel(android.animation.Animator) -> onAnimationCancel
com.microblink.nineoldandroids.view.ViewPropertyAnimatorPreHC -> com.microblink.nineoldandroids.view.ViewPropertyAnimatorPreHC:
    com.microblink.nineoldandroids.view.animation.AnimatorProxy mProxy -> mProxy
    java.lang.ref.WeakReference mView -> mView
    long mDuration -> mDuration
    boolean mDurationSet -> mDurationSet
    long mStartDelay -> mStartDelay
    boolean mStartDelaySet -> mStartDelaySet
    android.view.animation.Interpolator mInterpolator -> mInterpolator
    boolean mInterpolatorSet -> mInterpolatorSet
    com.microblink.nineoldandroids.animation.Animator$AnimatorListener mListener -> mListener
    com.microblink.nineoldandroids.view.ViewPropertyAnimatorPreHC$AnimatorEventListener mAnimatorEventListener -> mAnimatorEventListener
    java.util.ArrayList mPendingAnimations -> mPendingAnimations
    int NONE -> NONE
    int TRANSLATION_X -> TRANSLATION_X
    int TRANSLATION_Y -> TRANSLATION_Y
    int SCALE_X -> SCALE_X
    int SCALE_Y -> SCALE_Y
    int ROTATION -> ROTATION
    int ROTATION_X -> ROTATION_X
    int ROTATION_Y -> ROTATION_Y
    int X -> X
    int Y -> Y
    int ALPHA -> ALPHA
    int TRANSFORM_MASK -> TRANSFORM_MASK
    java.lang.Runnable mAnimationStarter -> mAnimationStarter
    java.util.HashMap mAnimatorMap -> mAnimatorMap
    com.microblink.nineoldandroids.view.ViewPropertyAnimator setDuration(long) -> setDuration
    long getDuration() -> getDuration
    long getStartDelay() -> getStartDelay
    com.microblink.nineoldandroids.view.ViewPropertyAnimator setStartDelay(long) -> setStartDelay
    com.microblink.nineoldandroids.view.ViewPropertyAnimator setInterpolator(android.view.animation.Interpolator) -> setInterpolator
    com.microblink.nineoldandroids.view.ViewPropertyAnimator setListener(com.microblink.nineoldandroids.animation.Animator$AnimatorListener) -> setListener
    void start() -> start
    void cancel() -> cancel
    com.microblink.nineoldandroids.view.ViewPropertyAnimator x(float) -> x
    com.microblink.nineoldandroids.view.ViewPropertyAnimator xBy(float) -> xBy
    com.microblink.nineoldandroids.view.ViewPropertyAnimator y(float) -> y
    com.microblink.nineoldandroids.view.ViewPropertyAnimator yBy(float) -> yBy
    com.microblink.nineoldandroids.view.ViewPropertyAnimator rotation(float) -> rotation
    com.microblink.nineoldandroids.view.ViewPropertyAnimator rotationBy(float) -> rotationBy
    com.microblink.nineoldandroids.view.ViewPropertyAnimator rotationX(float) -> rotationX
    com.microblink.nineoldandroids.view.ViewPropertyAnimator rotationXBy(float) -> rotationXBy
    com.microblink.nineoldandroids.view.ViewPropertyAnimator rotationY(float) -> rotationY
    com.microblink.nineoldandroids.view.ViewPropertyAnimator rotationYBy(float) -> rotationYBy
    com.microblink.nineoldandroids.view.ViewPropertyAnimator translationX(float) -> translationX
    com.microblink.nineoldandroids.view.ViewPropertyAnimator translationXBy(float) -> translationXBy
    com.microblink.nineoldandroids.view.ViewPropertyAnimator translationY(float) -> translationY
    com.microblink.nineoldandroids.view.ViewPropertyAnimator translationYBy(float) -> translationYBy
    com.microblink.nineoldandroids.view.ViewPropertyAnimator scaleX(float) -> scaleX
    com.microblink.nineoldandroids.view.ViewPropertyAnimator scaleXBy(float) -> scaleXBy
    com.microblink.nineoldandroids.view.ViewPropertyAnimator scaleY(float) -> scaleY
    com.microblink.nineoldandroids.view.ViewPropertyAnimator scaleYBy(float) -> scaleYBy
    com.microblink.nineoldandroids.view.ViewPropertyAnimator alpha(float) -> alpha
    com.microblink.nineoldandroids.view.ViewPropertyAnimator alphaBy(float) -> alphaBy
    void startAnimation() -> startAnimation
    void animateProperty(int,float) -> animateProperty
    void animatePropertyBy(int,float) -> animatePropertyBy
    void animatePropertyBy(int,float,float) -> animatePropertyBy
    void setValue(int,float) -> setValue
    float getValue(int) -> getValue
    void access$100(com.microblink.nineoldandroids.view.ViewPropertyAnimatorPreHC) -> access$100
    com.microblink.nineoldandroids.animation.Animator$AnimatorListener access$200(com.microblink.nineoldandroids.view.ViewPropertyAnimatorPreHC) -> access$200
    java.util.HashMap access$300(com.microblink.nineoldandroids.view.ViewPropertyAnimatorPreHC) -> access$300
    com.microblink.nineoldandroids.animation.Animator$AnimatorListener access$202(com.microblink.nineoldandroids.view.ViewPropertyAnimatorPreHC,com.microblink.nineoldandroids.animation.Animator$AnimatorListener) -> access$202
    java.lang.ref.WeakReference access$400(com.microblink.nineoldandroids.view.ViewPropertyAnimatorPreHC) -> access$400
    void access$500(com.microblink.nineoldandroids.view.ViewPropertyAnimatorPreHC,int,float) -> access$500
com.microblink.nineoldandroids.view.ViewPropertyAnimatorPreHC$1 -> com.microblink.nineoldandroids.view.ViewPropertyAnimatorPreHC$1:
    com.microblink.nineoldandroids.view.ViewPropertyAnimatorPreHC this$0 -> this$0
    void run() -> run
com.microblink.nineoldandroids.view.ViewPropertyAnimatorPreHC$AnimatorEventListener -> com.microblink.nineoldandroids.view.ViewPropertyAnimatorPreHC$AnimatorEventListener:
    com.microblink.nineoldandroids.view.ViewPropertyAnimatorPreHC this$0 -> this$0
    void onAnimationStart(com.microblink.nineoldandroids.animation.Animator) -> onAnimationStart
    void onAnimationCancel(com.microblink.nineoldandroids.animation.Animator) -> onAnimationCancel
    void onAnimationRepeat(com.microblink.nineoldandroids.animation.Animator) -> onAnimationRepeat
    void onAnimationEnd(com.microblink.nineoldandroids.animation.Animator) -> onAnimationEnd
    void onAnimationUpdate(com.microblink.nineoldandroids.animation.ValueAnimator) -> onAnimationUpdate
com.microblink.nineoldandroids.view.ViewPropertyAnimatorPreHC$NameValuesHolder -> com.microblink.nineoldandroids.view.ViewPropertyAnimatorPreHC$NameValuesHolder:
    int mNameConstant -> mNameConstant
    float mFromValue -> mFromValue
    float mDeltaValue -> mDeltaValue
com.microblink.nineoldandroids.view.ViewPropertyAnimatorPreHC$PropertyBundle -> com.microblink.nineoldandroids.view.ViewPropertyAnimatorPreHC$PropertyBundle:
    int mPropertyMask -> mPropertyMask
    java.util.ArrayList mNameValuesHolder -> mNameValuesHolder
    boolean cancel(int) -> cancel
com.microblink.nineoldandroids.view.animation.AnimatorProxy -> com.microblink.nineoldandroids.view.animation.AnimatorProxy:
    boolean NEEDS_PROXY -> NEEDS_PROXY
    java.util.WeakHashMap PROXIES -> PROXIES
    java.lang.ref.WeakReference mView -> mView
    android.graphics.Camera mCamera -> mCamera
    boolean mHasPivot -> mHasPivot
    float mAlpha -> mAlpha
    float mPivotX -> mPivotX
    float mPivotY -> mPivotY
    float mRotationX -> mRotationX
    float mRotationY -> mRotationY
    float mRotationZ -> mRotationZ
    float mScaleX -> mScaleX
    float mScaleY -> mScaleY
    float mTranslationX -> mTranslationX
    float mTranslationY -> mTranslationY
    android.graphics.RectF mBefore -> mBefore
    android.graphics.RectF mAfter -> mAfter
    android.graphics.Matrix mTempMatrix -> mTempMatrix
    com.microblink.nineoldandroids.view.animation.AnimatorProxy wrap(android.view.View) -> wrap
    float getAlpha() -> getAlpha
    void setAlpha(float) -> setAlpha
    float getPivotX() -> getPivotX
    void setPivotX(float) -> setPivotX
    float getPivotY() -> getPivotY
    void setPivotY(float) -> setPivotY
    float getRotation() -> getRotation
    void setRotation(float) -> setRotation
    float getRotationX() -> getRotationX
    void setRotationX(float) -> setRotationX
    float getRotationY() -> getRotationY
    void setRotationY(float) -> setRotationY
    float getScaleX() -> getScaleX
    void setScaleX(float) -> setScaleX
    float getScaleY() -> getScaleY
    void setScaleY(float) -> setScaleY
    int getScrollX() -> getScrollX
    void setScrollX(int) -> setScrollX
    int getScrollY() -> getScrollY
    void setScrollY(int) -> setScrollY
    float getTranslationX() -> getTranslationX
    void setTranslationX(float) -> setTranslationX
    float getTranslationY() -> getTranslationY
    void setTranslationY(float) -> setTranslationY
    float getX() -> getX
    void setX(float) -> setX
    float getY() -> getY
    void setY(float) -> setY
    void prepareForUpdate() -> prepareForUpdate
    void invalidateAfterUpdate() -> invalidateAfterUpdate
    void computeRect(android.graphics.RectF,android.view.View) -> computeRect
    void transformMatrix(android.graphics.Matrix,android.view.View) -> transformMatrix
    void applyTransformation(float,android.view.animation.Transformation) -> applyTransformation
com.microblink.recognition.NativeRecognizerWrapper -> com.microblink.recognition.NativeRecognizerWrapper:
    com.microblink.recognizers.settings.RecognizerSettings[] mSettings -> mSettings
    com.microblink.recognizers.settings.GenericRecognizerSettings mGenericRecognizerSettings -> mGenericRecognizerSettings
    com.microblink.recognition.RecognizerDelegate IlIllIlIIl -> IlIllIlIIl
    com.microblink.recognition.RecognizerState llIIlIlIIl -> llIIlIlIIl
    com.microblink.recognition.NativeRecognizerWrapper IlIllIlIIl -> IlIllIlIIl
    boolean IlIIIIIlll -> IlIIIIIlll
    java.lang.Throwable llIIlIlIIl -> llIIlIlIIl
    com.microblink.recognition.NativeRecognizerWrapper$llIIlIlIIl llIIlIlIIl -> llIIlIlIIl
    int lIllIIlIIl -> lIllIIlIIl
    boolean IIIIIIIIII -> IIIIIIIIII
    java.util.Timer IlIllIlIIl -> IlIllIlIIl
    com.microblink.settings.NativeLibraryInfo llIIlIlIIl -> llIIlIlIIl
    com.microblink.util.IllIIIIllI llIIlIlIIl -> llIIlIlIIl
    int lllIIlIIlI -> lllIIlIIlI
    com.microblink.geometry.Rectangle IlIllIlIIl -> IlIllIlIIl
    com.microblink.recognition.NativeRecognizerWrapper llIIlIlIIl() -> llIIlIlIIl
    void llIIlIlIIl(com.microblink.recognition.RecognizerDelegate,com.microblink.recognizers.settings.RecognizerSettings[],com.microblink.recognizers.settings.GenericRecognizerSettings) -> llIIlIlIIl
    void llIIlIlIIl(android.content.Context) -> llIIlIlIIl
    void reconfigureRecognizers(com.microblink.recognizers.settings.RecognizerSettings[],com.microblink.recognizers.settings.GenericRecognizerSettings) -> reconfigureRecognizers
    void IlIlIlIIlI() -> IlIlIlIIlI
    void IlIllIlIIl(com.microblink.hardware.camera.IlIllIlIIl) -> IlIllIlIIl
    void IlIIIIIlll() -> IlIIIIIlll
    void reset() -> reset
    void llIIlIlIIl(com.microblink.hardware.orientation.Orientation) -> llIIlIlIIl
    void IlIllIlIIl(com.microblink.geometry.Rectangle) -> IlIllIlIIl
    com.microblink.geometry.Rectangle llIIlIlIIl(com.microblink.geometry.Rectangle) -> llIIlIlIIl
    void terminate() -> terminate
    void IllIIIIllI(int) -> IllIIIIllI
    void llIIlIlIIl(com.microblink.recognition.NativeRecognizerWrapper$llIIlIlIIl) -> llIIlIlIIl
    com.microblink.recognition.RightsManager llIIlIlIIl() -> llIIlIlIIl
    boolean llIIlIlIIl(java.lang.String,android.content.Context) -> llIIlIlIIl
    boolean llIIlIlIIl(java.lang.String,java.lang.String) -> llIIlIlIIl
    void IIIIIIIIII() -> IIIIIIIIII
    com.microblink.settings.NativeLibraryInfo llIIlIlIIl() -> llIIlIlIIl
    com.microblink.recognition.RecognizerState llIIlIlIIl() -> llIIlIlIIl
    boolean IlIIlllIIl() -> IlIIlllIIl
    com.microblink.recognizers.BaseRecognitionResult[] recognize(java.nio.ByteBuffer[],int[],int[],byte[],int,int,int,boolean,boolean,float,float,float,float,com.microblink.recognition.RecognizerDelegate) -> recognize
    com.microblink.settings.NativeLibraryInfo initPhotoPay(android.os.Bundle,android.os.Bundle[]) -> initPhotoPay
    void updateRecognizers(android.os.Bundle,android.os.Bundle[]) -> updateRecognizers
    void terminatePhotoPay() -> terminatePhotoPay
    void resetRecognizers() -> resetRecognizers
    void setOrientation(int) -> setOrientation
    com.microblink.settings.NativeLibraryInfo obtainDraftLibInfo() -> obtainDraftLibInfo
    boolean nativeCheckLicenseKey(java.lang.String,android.content.Context) -> nativeCheckLicenseKey
    boolean nativeCheckLibraryLicenseKey(java.lang.String,java.lang.String) -> nativeCheckLibraryLicenseKey
    void invalidateLicense() -> invalidateLicense
    com.microblink.recognition.RightsManager nativeObtainRights() -> nativeObtainRights
    boolean isProtectionEnabled() -> isProtectionEnabled
    com.microblink.recognition.RecognizerState llIIlIlIIl(com.microblink.recognition.NativeRecognizerWrapper) -> llIIlIlIIl
    boolean llIllIIlll() -> llIllIIlll
    int llIIlIlIIl(com.microblink.recognition.NativeRecognizerWrapper) -> llIIlIlIIl
    com.microblink.recognition.RecognizerState llIIlIlIIl(com.microblink.recognition.NativeRecognizerWrapper,com.microblink.recognition.RecognizerState) -> llIIlIlIIl
    com.microblink.recognizers.settings.RecognizerSettings[] llIIlIlIIl(com.microblink.recognition.NativeRecognizerWrapper) -> llIIlIlIIl
    com.microblink.settings.NativeLibraryInfo llIIlIlIIl(com.microblink.recognition.NativeRecognizerWrapper,com.microblink.settings.NativeLibraryInfo) -> llIIlIlIIl
    com.microblink.recognizers.settings.GenericRecognizerSettings llIIlIlIIl(com.microblink.recognition.NativeRecognizerWrapper) -> llIIlIlIIl
    com.microblink.settings.NativeLibraryInfo llIIlIlIIl(com.microblink.recognition.NativeRecognizerWrapper,android.os.Bundle,android.os.Bundle[]) -> llIIlIlIIl
    com.microblink.settings.NativeLibraryInfo llIIlIlIIl(com.microblink.recognition.NativeRecognizerWrapper) -> llIIlIlIIl
    void llIIlIlIIl(com.microblink.recognition.NativeRecognizerWrapper) -> llIIlIlIIl
    boolean llIIlIlIIl(boolean) -> llIIlIlIIl
    int IlIllIlIIl(com.microblink.recognition.NativeRecognizerWrapper) -> IlIllIlIIl
    void llIIlIlIIl(com.microblink.recognition.NativeRecognizerWrapper,android.os.Bundle,android.os.Bundle[]) -> llIIlIlIIl
    com.microblink.geometry.Rectangle llIIlIlIIl(com.microblink.recognition.NativeRecognizerWrapper,com.microblink.geometry.Rectangle) -> llIIlIlIIl
    com.microblink.recognition.RecognizerDelegate llIIlIlIIl(com.microblink.recognition.NativeRecognizerWrapper) -> llIIlIlIIl
    com.microblink.recognizers.BaseRecognitionResult[] llIIlIlIIl(com.microblink.recognition.NativeRecognizerWrapper,java.nio.ByteBuffer[],int[],int[],byte[],int,int,int,boolean,boolean,float,float,float,float,com.microblink.recognition.RecognizerDelegate) -> llIIlIlIIl
    com.microblink.recognition.NativeRecognizerWrapper$llIIlIlIIl llIIlIlIIl(com.microblink.recognition.NativeRecognizerWrapper) -> llIIlIlIIl
    boolean llIIlIlIIl(com.microblink.recognition.NativeRecognizerWrapper) -> llIIlIlIIl
    void IlIllIlIIl(com.microblink.recognition.NativeRecognizerWrapper) -> IlIllIlIIl
    java.util.Timer llIIlIlIIl(com.microblink.recognition.NativeRecognizerWrapper) -> llIIlIlIIl
    boolean llIIlIlIIl(com.microblink.recognition.NativeRecognizerWrapper,boolean) -> llIIlIlIIl
    java.util.Timer llIIlIlIIl(com.microblink.recognition.NativeRecognizerWrapper,java.util.Timer) -> llIIlIlIIl
    void llIIlIlIIl(com.microblink.recognition.NativeRecognizerWrapper,int) -> llIIlIlIIl
com.microblink.recognition.NativeRecognizerWrapper$1 -> com.microblink.recognition.NativeRecognizerWrapper$1:
    android.content.Context llIIlIlIIl -> llIIlIlIIl
    com.microblink.recognition.NativeRecognizerWrapper IllIIIllII -> IllIIIllII
    void run() -> run
com.microblink.recognition.NativeRecognizerWrapper$2 -> com.microblink.recognition.NativeRecognizerWrapper$2:
    com.microblink.recognition.NativeRecognizerWrapper IllIIIllII -> IllIIIllII
    void run() -> run
com.microblink.recognition.NativeRecognizerWrapper$3 -> com.microblink.recognition.NativeRecognizerWrapper$3:
    com.microblink.hardware.camera.IlIllIlIIl llIIlIlIIl -> llIIlIlIIl
    com.microblink.recognition.NativeRecognizerWrapper IllIIIllII -> IllIIIllII
    void run() -> run
com.microblink.recognition.NativeRecognizerWrapper$4 -> com.microblink.recognition.NativeRecognizerWrapper$4:
    com.microblink.recognition.NativeRecognizerWrapper IllIIIllII -> IllIIIllII
    void run() -> run
com.microblink.recognition.NativeRecognizerWrapper$5 -> com.microblink.recognition.NativeRecognizerWrapper$5:
    com.microblink.recognition.NativeRecognizerWrapper IllIIIllII -> IllIIIllII
    void run() -> run
com.microblink.recognition.NativeRecognizerWrapper$6 -> com.microblink.recognition.NativeRecognizerWrapper$6:
    com.microblink.hardware.orientation.Orientation IlIllIlIIl -> IlIllIlIIl
    com.microblink.recognition.NativeRecognizerWrapper IllIIIllII -> IllIIIllII
    void run() -> run
com.microblink.recognition.NativeRecognizerWrapper$7 -> com.microblink.recognition.NativeRecognizerWrapper$7:
    com.microblink.recognition.NativeRecognizerWrapper IllIIIllII -> IllIIIllII
    void run() -> run
com.microblink.recognition.NativeRecognizerWrapper$8 -> com.microblink.recognition.NativeRecognizerWrapper$8:
    com.microblink.recognition.NativeRecognizerWrapper IllIIIllII -> IllIIIllII
    void run() -> run
com.microblink.recognition.NativeRecognizerWrapper$llIIlIlIIl -> com.microblink.recognition.NativeRecognizerWrapper$llIIlIlIIl:
    void onRecognitionDone(com.microblink.recognizers.BaseRecognitionResult[]) -> onRecognitionDone
    void onRecognitionDoneWithTimeout(com.microblink.recognizers.BaseRecognitionResult[]) -> onRecognitionDoneWithTimeout
com.microblink.recognition.RecognizerDelegate -> com.microblink.recognition.RecognizerDelegate:
    void onDetectionStarted() -> onDetectionStarted
    void onDetectionFailed() -> onDetectionFailed
    boolean onDetectedForm(float[],int,int) -> onDetectedForm
    void setScanningRegion(com.microblink.geometry.Rectangle) -> setScanningRegion
    boolean shouldRecognitionStop() -> shouldRecognitionStop
    void onRecognitionStarted() -> onRecognitionStarted
    void onRecognitionFinished(boolean) -> onRecognitionFinished
    void setPaused(boolean) -> setPaused
    void onDisplayOcrResult(com.microblink.results.ocr.OcrResult) -> onDisplayOcrResult
    void onDisplayLineDetectionResult(com.microblink.results.lines.LineDetectionResult) -> onDisplayLineDetectionResult
    boolean isImageCallbackAvailable() -> isImageCallbackAvailable
    void onImageAvailable(com.microblink.image.Image) -> onImageAvailable
com.microblink.recognition.RecognizerState -> com.microblink.recognition.RecognizerState:
    com.microblink.recognition.RecognizerState UNINITIALIZED -> UNINITIALIZED
    com.microblink.recognition.RecognizerState INITIALIZING -> INITIALIZING
    com.microblink.recognition.RecognizerState READY -> READY
    com.microblink.recognition.RecognizerState WORKING -> WORKING
    com.microblink.recognition.RecognizerState DONE -> DONE
    com.microblink.recognition.RecognizerState[] $VALUES -> $VALUES
    com.microblink.recognition.RecognizerState[] values() -> values
    com.microblink.recognition.RecognizerState valueOf(java.lang.String) -> valueOf
com.microblink.recognition.ResourceManager -> com.microblink.recognition.ResourceManager:
    com.microblink.recognition.ResourceManager INSTANCE -> INSTANCE
    java.util.Map mResources -> mResources
    com.microblink.recognition.ResourceManager[] $VALUES -> $VALUES
    com.microblink.recognition.ResourceManager[] values() -> values
    com.microblink.recognition.ResourceManager valueOf(java.lang.String) -> valueOf
    void loadAllResources(android.content.Context) -> loadAllResources
    void addResourceIfExists(android.content.Context,java.lang.String) -> addResourceIfExists
    void unloadAllResources() -> unloadAllResources
    void nativeAddResource(java.lang.String,java.nio.ByteBuffer) -> nativeAddResource
    void nativeClearResources() -> nativeClearResources
com.microblink.recognition.Right -> com.microblink.recognition.Right:
    com.microblink.recognition.Right ALLOW_CUSTOM_UI -> ALLOW_CUSTOM_UI
    com.microblink.recognition.Right PDF417_ALLOW_USDL -> PDF417_ALLOW_USDL
    com.microblink.recognition.Right ALLOW_MULTIPLE_APPS -> ALLOW_MULTIPLE_APPS
    com.microblink.recognition.Right USE_TIMESTAMP -> USE_TIMESTAMP
    int mValue -> mValue
    java.lang.String mDescription -> mDescription
    com.microblink.recognition.Right[] $VALUES -> $VALUES
    com.microblink.recognition.Right[] values() -> values
    com.microblink.recognition.Right valueOf(java.lang.String) -> valueOf
    int intValue() -> intValue
    java.lang.String toString() -> toString
    com.microblink.recognition.Right fromIntValue(int) -> fromIntValue
com.microblink.recognition.RightsManager -> com.microblink.recognition.RightsManager:
    java.util.Set IlIllIlllI -> IlIllIlllI
    boolean IIIllIlIIl -> IIIllIlIIl
    boolean llIIlIlIIl(com.microblink.recognition.Right) -> llIIlIlIIl
    boolean lllllIlIll() -> lllllIlIll
com.microblink.recognition.StringConstants -> com.microblink.recognition.StringConstants:
com.microblink.recognition.StringConstants$Croatia -> com.microblink.recognition.StringConstants$Croatia:
    java.lang.String SLIP_ID_HUB1_RIGHT -> SLIP_ID_HUB1_RIGHT
    java.lang.String SLIP_ID_HUB3_RIGHT -> SLIP_ID_HUB3_RIGHT
    java.lang.String SLIP_ID_HUB1_LEFT -> SLIP_ID_HUB1_LEFT
    java.lang.String SLIP_ID_HUB3_LEFT -> SLIP_ID_HUB3_LEFT
    java.lang.String REFERENCE_STATUS_INVALID -> REFERENCE_STATUS_INVALID
    java.lang.String REFERENCE_STATUS_VALID -> REFERENCE_STATUS_VALID
    java.lang.String REFERENCE_STATUS_MODEL_UNKNOWN -> REFERENCE_STATUS_MODEL_UNKNOWN
    java.lang.String REFERENCE_STATUS_NO_CHECKSUM -> REFERENCE_STATUS_NO_CHECKSUM
    java.lang.String REFERENCE_STATUS_INVALID_CHECKSUM -> REFERENCE_STATUS_INVALID_CHECKSUM
com.microblink.recognition.StringConstants$RecognitionDataType -> com.microblink.recognition.StringConstants$RecognitionDataType:
    java.lang.String AUSTRIAN_QR_CODE -> AUSTRIAN_QR_CODE
    java.lang.String AUSTRIAN_SLIP -> AUSTRIAN_SLIP
    java.lang.String BELGIAN_SLIP -> BELGIAN_SLIP
    java.lang.String CROATIAN_PDF417_BARCODE -> CROATIAN_PDF417_BARCODE
    java.lang.String CROATIAN_QR_CODE -> CROATIAN_QR_CODE
    java.lang.String CROATIAN_SLIP -> CROATIAN_SLIP
    java.lang.String GERMAN_QR_CODE -> GERMAN_QR_CODE
    java.lang.String GERMAN_SLIP -> GERMAN_SLIP
    java.lang.String HUNGARIAN_SLIP -> HUNGARIAN_SLIP
    java.lang.String SLOVENIAN_SLIP -> SLOVENIAN_SLIP
    java.lang.String DUTCH_OCR_LINE -> DUTCH_OCR_LINE
    java.lang.String UK_GIRO_OCR_LINE -> UK_GIRO_OCR_LINE
    java.lang.String UK_QR_CODE -> UK_QR_CODE
    java.lang.String KOSOVO_CODE128_BARCODE -> KOSOVO_CODE128_BARCODE
    java.lang.String KOSOVO_OCR_LINE -> KOSOVO_OCR_LINE
    java.lang.String SWISS_OCR_LINE -> SWISS_OCR_LINE
    java.lang.String US_DRIVER_LICENSE -> US_DRIVER_LICENSE
    java.lang.String MRTD_DATA -> MRTD_DATA
com.microblink.recognition.llIIlIlIIl -> com.microblink.recognition.llIIlIlIIl:
    boolean IIlIlllIIl -> IIlIlllIIl
    int IlIIlIIIII -> IlIIlIIIII
    com.microblink.recognition.llIIlIlIIl$llIIlIlIIl llIIlIlIIl -> llIIlIlIIl
    java.lang.String lIlIIIIlIl -> lIlIIIIlIl
    com.microblink.view.recognition.RecognizerView llIIlIlIIl -> llIIlIlIIl
    com.microblink.view.recognition.RecognizerViewEventListener llIIlIlIIl -> llIIlIlIIl
    com.microblink.geometry.Rectangle IlIllIlIIl -> IlIllIlIIl
    com.microblink.image.ImageListener mImageListener -> mImageListener
    void onDetectionStarted() -> onDetectionStarted
    void onDetectionFailed() -> onDetectionFailed
    void llIIlIlIIl(float[]) -> llIIlIlIIl
    boolean onDetectedForm(float[],int,int) -> onDetectedForm
    void setScanningRegion(com.microblink.geometry.Rectangle) -> setScanningRegion
    boolean shouldRecognitionStop() -> shouldRecognitionStop
    void onRecognitionStarted() -> onRecognitionStarted
    void onRecognitionFinished(boolean) -> onRecognitionFinished
    void onDisplayOcrResult(com.microblink.results.ocr.OcrResult) -> onDisplayOcrResult
    void onDisplayLineDetectionResult(com.microblink.results.lines.LineDetectionResult) -> onDisplayLineDetectionResult
    boolean isImageCallbackAvailable() -> isImageCallbackAvailable
    void onImageAvailable(com.microblink.image.Image) -> onImageAvailable
    void setPaused(boolean) -> setPaused
com.microblink.recognition.llIIlIlIIl$1 -> com.microblink.recognition.llIIlIlIIl$1:
com.microblink.recognition.llIIlIlIIl$llIIlIlIIl -> com.microblink.recognition.llIIlIlIIl$llIIlIlIIl:
    int IlllIIIllI -> IlllIIIllI
    int IlIlIlIIlI -> IlIlIlIIlI
    int IlIIIIIlll -> IlIIIIIlll
    com.microblink.recognition.llIIlIlIIl llIIlIlIIl -> llIIlIlIIl
com.microblink.recognizers.BaseRecognitionResult -> com.microblink.recognizers.BaseRecognitionResult:
    boolean mValid -> mValid
    boolean mEmpty -> mEmpty
    android.os.Bundle mData -> mData
    android.os.Parcelable$Creator CREATOR -> CREATOR
    android.os.Bundle getData() -> getData
    java.lang.String getTitle() -> getTitle
    java.lang.String toString() -> toString
    void log() -> log
    java.lang.String getStringElement(java.lang.String) -> getStringElement
    int getIntElement(java.lang.String) -> getIntElement
    boolean isValid() -> isValid
    boolean isEmpty() -> isEmpty
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    int describeContents() -> describeContents
com.microblink.recognizers.BaseRecognitionResult$1 -> com.microblink.recognizers.BaseRecognitionResult$1:
    com.microblink.recognizers.BaseRecognitionResult[] llIIlIlIIl(int) -> llIIlIlIIl
    com.microblink.recognizers.BaseRecognitionResult llIIlIlIIl(android.os.Parcel) -> llIIlIlIIl
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
com.microblink.recognizers.LibraryInfoResult -> com.microblink.recognizers.LibraryInfoResult:
    android.os.Parcelable$Creator CREATOR -> CREATOR
    java.lang.String getLibraryInformationString() -> getLibraryInformationString
    java.lang.String toString() -> toString
    java.lang.String getTitle() -> getTitle
com.microblink.recognizers.LibraryInfoResult$1 -> com.microblink.recognizers.LibraryInfoResult$1:
    com.microblink.recognizers.LibraryInfoResult[] llIIlIlIIl(int) -> llIIlIlIIl
    com.microblink.recognizers.LibraryInfoResult llIIlIlIIl(android.os.Parcel) -> llIIlIlIIl
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
com.microblink.recognizers.barcode.BarcodeType -> com.microblink.recognizers.barcode.BarcodeType:
    com.microblink.recognizers.barcode.BarcodeType AZTEC -> AZTEC
    com.microblink.recognizers.barcode.BarcodeType CODE128 -> CODE128
    com.microblink.recognizers.barcode.BarcodeType CODE39 -> CODE39
    com.microblink.recognizers.barcode.BarcodeType DATA_MATRIX -> DATA_MATRIX
    com.microblink.recognizers.barcode.BarcodeType EAN13 -> EAN13
    com.microblink.recognizers.barcode.BarcodeType EAN8 -> EAN8
    com.microblink.recognizers.barcode.BarcodeType ITF -> ITF
    com.microblink.recognizers.barcode.BarcodeType QR -> QR
    com.microblink.recognizers.barcode.BarcodeType UPCA -> UPCA
    com.microblink.recognizers.barcode.BarcodeType UPCE -> UPCE
    com.microblink.recognizers.barcode.BarcodeType PDF417 -> PDF417
    com.microblink.recognizers.barcode.BarcodeType[] $VALUES -> $VALUES
    com.microblink.recognizers.barcode.BarcodeType[] values() -> values
    com.microblink.recognizers.barcode.BarcodeType valueOf(java.lang.String) -> valueOf
com.microblink.recognizers.barcode.bardecoder.BarDecoderRecognizerSettings -> com.microblink.recognizers.barcode.bardecoder.BarDecoderRecognizerSettings:
    android.os.Parcelable$Creator CREATOR -> CREATOR
    boolean shouldScanCode128() -> shouldScanCode128
    void setScanCode128(boolean) -> setScanCode128
    boolean shouldScanCode39() -> shouldScanCode39
    void setScanCode39(boolean) -> setScanCode39
    void setInverseScanning(boolean) -> setInverseScanning
    boolean isInverseScanMode() -> isInverseScanMode
    void setAutoScaleDetection(boolean) -> setAutoScaleDetection
    boolean isAutoScaleDetectionEnabled() -> isAutoScaleDetectionEnabled
    void setTryHarder(boolean) -> setTryHarder
    boolean isTryingHarder() -> isTryingHarder
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
com.microblink.recognizers.barcode.bardecoder.BarDecoderRecognizerSettings$1 -> com.microblink.recognizers.barcode.bardecoder.BarDecoderRecognizerSettings$1:
    com.microblink.recognizers.barcode.bardecoder.BarDecoderRecognizerSettings createFromParcel(android.os.Parcel) -> createFromParcel
    com.microblink.recognizers.barcode.bardecoder.BarDecoderRecognizerSettings[] newArray(int) -> newArray
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
com.microblink.recognizers.barcode.bardecoder.BarDecoderScanResult -> com.microblink.recognizers.barcode.bardecoder.BarDecoderScanResult:
    android.os.Parcelable$Creator CREATOR -> CREATOR
    com.microblink.recognizers.barcode.BarcodeType getBarcodeType() -> getBarcodeType
    java.lang.String getBarcodeTypeString() -> getBarcodeTypeString
    java.lang.String getStringData() -> getStringData
    java.lang.String getExtendedStringData() -> getExtendedStringData
    java.lang.String toString() -> toString
    com.microblink.results.barcode.BarcodeDetailedData getRawData() -> getRawData
    com.microblink.results.barcode.BarcodeDetailedData getExtendedRawData() -> getExtendedRawData
    java.lang.String getTitle() -> getTitle
com.microblink.recognizers.barcode.bardecoder.BarDecoderScanResult$1 -> com.microblink.recognizers.barcode.bardecoder.BarDecoderScanResult$1:
    com.microblink.recognizers.barcode.bardecoder.BarDecoderScanResult[] newArray(int) -> newArray
    com.microblink.recognizers.barcode.bardecoder.BarDecoderScanResult createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
com.microblink.recognizers.barcode.pdf417.Pdf417RecognizerSettings -> com.microblink.recognizers.barcode.pdf417.Pdf417RecognizerSettings:
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void setUncertainScanning(boolean) -> setUncertainScanning
    boolean isUncertainScanMode() -> isUncertainScanMode
    void setNullQuietZoneAllowed(boolean) -> setNullQuietZoneAllowed
    boolean isNullQuietZoneAllowed() -> isNullQuietZoneAllowed
    void setInverseScanning(boolean) -> setInverseScanning
    boolean isInverseScanMode() -> isInverseScanMode
    void setAutoScaleDetection(boolean) -> setAutoScaleDetection
    boolean isAutoScaleDetectionEnabled() -> isAutoScaleDetectionEnabled
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
com.microblink.recognizers.barcode.pdf417.Pdf417RecognizerSettings$1 -> com.microblink.recognizers.barcode.pdf417.Pdf417RecognizerSettings$1:
    com.microblink.recognizers.barcode.pdf417.Pdf417RecognizerSettings createFromParcel(android.os.Parcel) -> createFromParcel
    com.microblink.recognizers.barcode.pdf417.Pdf417RecognizerSettings[] newArray(int) -> newArray
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
com.microblink.recognizers.barcode.pdf417.Pdf417ScanResult -> com.microblink.recognizers.barcode.pdf417.Pdf417ScanResult:
    android.os.Parcelable$Creator CREATOR -> CREATOR
    java.lang.String getStringData() -> getStringData
    com.microblink.results.barcode.BarcodeDetailedData getRawData() -> getRawData
    boolean isUncertain() -> isUncertain
    java.lang.String getTitle() -> getTitle
    java.lang.String toString() -> toString
com.microblink.recognizers.barcode.pdf417.Pdf417ScanResult$1 -> com.microblink.recognizers.barcode.pdf417.Pdf417ScanResult$1:
    com.microblink.recognizers.barcode.pdf417.Pdf417ScanResult[] newArray(int) -> newArray
    com.microblink.recognizers.barcode.pdf417.Pdf417ScanResult createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
com.microblink.recognizers.barcode.usdl.USDLRecognizerSettings -> com.microblink.recognizers.barcode.usdl.USDLRecognizerSettings:
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void setUncertainScanning(boolean) -> setUncertainScanning
    boolean isUncertainScanMode() -> isUncertainScanMode
    void setAutoScaleDetection(boolean) -> setAutoScaleDetection
    boolean isAutoScaleDetectionEnabled() -> isAutoScaleDetectionEnabled
    void setNullQuietZoneAllowed(boolean) -> setNullQuietZoneAllowed
    boolean isNullQuietZoneAllowed() -> isNullQuietZoneAllowed
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
com.microblink.recognizers.barcode.usdl.USDLRecognizerSettings$1 -> com.microblink.recognizers.barcode.usdl.USDLRecognizerSettings$1:
    com.microblink.recognizers.barcode.usdl.USDLRecognizerSettings createFromParcel(android.os.Parcel) -> createFromParcel
    com.microblink.recognizers.barcode.usdl.USDLRecognizerSettings[] newArray(int) -> newArray
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
com.microblink.recognizers.barcode.usdl.USDLScanResult -> com.microblink.recognizers.barcode.usdl.USDLScanResult:
    java.lang.String kAamvaVersionNumber -> kAamvaVersionNumber
    java.lang.String kCustomerFamilyName -> kCustomerFamilyName
    java.lang.String kCustomerFirstName -> kCustomerFirstName
    java.lang.String kDateOfBirth -> kDateOfBirth
    java.lang.String kSex -> kSex
    java.lang.String kEyeColor -> kEyeColor
    java.lang.String kAddressStreet -> kAddressStreet
    java.lang.String kAddressCity -> kAddressCity
    java.lang.String kAddressJurisdictionCode -> kAddressJurisdictionCode
    java.lang.String kAddressPostalCode -> kAddressPostalCode
    java.lang.String kIssuerIdentificationNumber -> kIssuerIdentificationNumber
    java.lang.String kDocumentIssueDate -> kDocumentIssueDate
    java.lang.String kDocumentExpirationDate -> kDocumentExpirationDate
    java.lang.String kJurisdictionVersionNumber -> kJurisdictionVersionNumber
    java.lang.String kJurisdictionVehicleClass -> kJurisdictionVehicleClass
    java.lang.String kJurisdictionRestrictionCodes -> kJurisdictionRestrictionCodes
    java.lang.String kJurisdictionEndorsementCodes -> kJurisdictionEndorsementCodes
    java.lang.String kCustomerIdNumber -> kCustomerIdNumber
    java.lang.String kHairColor -> kHairColor
    java.lang.String kNameSuffix -> kNameSuffix
    java.lang.String kAddressStreet2 -> kAddressStreet2
    java.lang.String kIssuingJurisdiction -> kIssuingJurisdiction
    java.lang.String kStandardVehicleClassification -> kStandardVehicleClassification
    java.lang.String kStandardEndorsementCode -> kStandardEndorsementCode
    java.lang.String kStandardRestrictionCode -> kStandardRestrictionCode
    java.lang.String kCustomerMiddleName -> kCustomerMiddleName
    java.lang.String kHeight -> kHeight
    java.lang.String kCustomerFullName -> kCustomerFullName
    java.lang.String kFullAddress -> kFullAddress
    java.lang.String kFamilyNameTruncation -> kFamilyNameTruncation
    java.lang.String kFirstNameTruncation -> kFirstNameTruncation
    java.lang.String kMiddleNameTruncation -> kMiddleNameTruncation
    java.lang.String kFederalCommercialVehicleCodes -> kFederalCommercialVehicleCodes
    java.lang.String kPlaceOfBirth -> kPlaceOfBirth
    java.lang.String kWeightRange -> kWeightRange
    java.lang.String kWeightPounds -> kWeightPounds
    java.lang.String kWeightKilograms -> kWeightKilograms
    java.lang.String kRaceEthnicity -> kRaceEthnicity
    java.lang.String kNamePrefix -> kNamePrefix
    java.lang.String kCountryIdentification -> kCountryIdentification
    java.lang.String kResidenceStreetAddress -> kResidenceStreetAddress
    java.lang.String kResidenceStreetAddress2 -> kResidenceStreetAddress2
    java.lang.String kResidenceCity -> kResidenceCity
    java.lang.String kResidenceJurisdictionCode -> kResidenceJurisdictionCode
    java.lang.String kResidencePostalCode -> kResidencePostalCode
    java.lang.String kHeightIn -> kHeightIn
    java.lang.String kHeightCm -> kHeightCm
    java.lang.String kUnder18 -> kUnder18
    java.lang.String kUnder19 -> kUnder19
    java.lang.String kUnder21 -> kUnder21
    java.lang.String kSocialSecurityNumber -> kSocialSecurityNumber
    java.lang.String kAKASocialSecurityNumber -> kAKASocialSecurityNumber
    java.lang.String kAKAFullName -> kAKAFullName
    java.lang.String kAKAFamilyName -> kAKAFamilyName
    java.lang.String kAKAMiddleName -> kAKAMiddleName
    java.lang.String kAKAGivenName -> kAKAGivenName
    java.lang.String kAKAPrefixName -> kAKAPrefixName
    java.lang.String kAKASuffixName -> kAKASuffixName
    java.lang.String kOrganDonor -> kOrganDonor
    java.lang.String kVeteran -> kVeteran
    java.lang.String kAKADateOfBirth -> kAKADateOfBirth
    java.lang.String kImageTimestamp -> kImageTimestamp
    java.lang.String kImageType -> kImageType
    java.lang.String kPortraitImage -> kPortraitImage
    java.lang.String kBDBFormatOwner -> kBDBFormatOwner
    java.lang.String kBDBFormatType -> kBDBFormatType
    java.lang.String kBiometricDataLength -> kBiometricDataLength
    java.lang.String kBiometricData -> kBiometricData
    java.lang.String kJurisdictionVehicleClassificationDescription -> kJurisdictionVehicleClassificationDescription
    java.lang.String kJurisdictionEndorsmentCodeDescription -> kJurisdictionEndorsmentCodeDescription
    java.lang.String kJurisdictionRestrictionCodeDescription -> kJurisdictionRestrictionCodeDescription
    java.lang.String kInventoryControlNumber -> kInventoryControlNumber
    java.lang.String kCardRevisionDate -> kCardRevisionDate
    java.lang.String kDocumentDiscriminator -> kDocumentDiscriminator
    java.lang.String kLimitedDurationDocument -> kLimitedDurationDocument
    java.lang.String kIssueTimestamp -> kIssueTimestamp
    java.lang.String kPermitExpirationDate -> kPermitExpirationDate
    java.lang.String kPermitIdentifier -> kPermitIdentifier
    java.lang.String kPermitIssueDate -> kPermitIssueDate
    java.lang.String kNumberOfDuplicates -> kNumberOfDuplicates
    java.lang.String kAuditInformation -> kAuditInformation
    java.lang.String kComplianceType -> kComplianceType
    java.lang.String kHAZMATExpirationDate -> kHAZMATExpirationDate
    java.lang.String kMedicalIndicator -> kMedicalIndicator
    java.lang.String kNonResident -> kNonResident
    java.lang.String kUniqueCustomerId -> kUniqueCustomerId
    java.lang.String kDataDiscriminator -> kDataDiscriminator
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String getField(java.lang.String) -> getField
    boolean isUncertain() -> isUncertain
    com.microblink.results.barcode.BarcodeDetailedData getRawData() -> getRawData
    java.lang.String getStringData() -> getStringData
    java.lang.String getTitle() -> getTitle
    java.lang.String toString() -> toString
com.microblink.recognizers.barcode.usdl.USDLScanResult$1 -> com.microblink.recognizers.barcode.usdl.USDLScanResult$1:
    com.microblink.recognizers.barcode.usdl.USDLScanResult[] newArray(int) -> newArray
    com.microblink.recognizers.barcode.usdl.USDLScanResult createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
com.microblink.recognizers.barcode.zxing.ZXingRecognizerSettings -> com.microblink.recognizers.barcode.zxing.ZXingRecognizerSettings:
    android.os.Parcelable$Creator CREATOR -> CREATOR
    boolean shouldScanAztecCode() -> shouldScanAztecCode
    void setScanAztecCode(boolean) -> setScanAztecCode
    boolean shouldScanCode128() -> shouldScanCode128
    void setScanCode128(boolean) -> setScanCode128
    boolean shouldScanCode39() -> shouldScanCode39
    void setScanCode39(boolean) -> setScanCode39
    boolean shouldScanDataMatrixCode() -> shouldScanDataMatrixCode
    void setScanDataMatrixCode(boolean) -> setScanDataMatrixCode
    boolean shouldScanEAN13Code() -> shouldScanEAN13Code
    void setScanEAN13Code(boolean) -> setScanEAN13Code
    boolean shouldScanEAN8Code() -> shouldScanEAN8Code
    void setScanEAN8Code(boolean) -> setScanEAN8Code
    boolean shouldScanITFCode() -> shouldScanITFCode
    void setScanITFCode(boolean) -> setScanITFCode
    boolean shouldScanQRCode() -> shouldScanQRCode
    void setScanQRCode(boolean) -> setScanQRCode
    boolean shouldScanUPCACode() -> shouldScanUPCACode
    void setScanUPCACode(boolean) -> setScanUPCACode
    boolean shouldScanUPCECode() -> shouldScanUPCECode
    void setScanUPCECode(boolean) -> setScanUPCECode
    void setInverseScanning(boolean) -> setInverseScanning
    boolean isInverseScanMode() -> isInverseScanMode
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
com.microblink.recognizers.barcode.zxing.ZXingRecognizerSettings$1 -> com.microblink.recognizers.barcode.zxing.ZXingRecognizerSettings$1:
    com.microblink.recognizers.barcode.zxing.ZXingRecognizerSettings createFromParcel(android.os.Parcel) -> createFromParcel
    com.microblink.recognizers.barcode.zxing.ZXingRecognizerSettings[] newArray(int) -> newArray
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
com.microblink.recognizers.barcode.zxing.ZXingScanResult -> com.microblink.recognizers.barcode.zxing.ZXingScanResult:
    android.os.Parcelable$Creator CREATOR -> CREATOR
    com.microblink.recognizers.barcode.BarcodeType getBarcodeType() -> getBarcodeType
    java.lang.String getStringData() -> getStringData
    java.lang.String getExtendedStringData() -> getExtendedStringData
    com.microblink.results.barcode.BarcodeDetailedData getRawData() -> getRawData
    com.microblink.results.barcode.BarcodeDetailedData getExtendedRawData() -> getExtendedRawData
    java.lang.String getBarcodeTypeString() -> getBarcodeTypeString
    java.lang.String toString() -> toString
    java.lang.String getTitle() -> getTitle
com.microblink.recognizers.barcode.zxing.ZXingScanResult$1 -> com.microblink.recognizers.barcode.zxing.ZXingScanResult$1:
    com.microblink.recognizers.barcode.zxing.ZXingScanResult[] newArray(int) -> newArray
    com.microblink.recognizers.barcode.zxing.ZXingScanResult createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
com.microblink.recognizers.settings.GenericRecognizerSettings -> com.microblink.recognizers.settings.GenericRecognizerSettings:
    int RECOGNITION_MODE -> RECOGNITION_MODE
    int RECOGNITION_TEST_MODE -> RECOGNITION_TEST_MODE
    int DETECTION_TEST_MODE -> DETECTION_TEST_MODE
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int getRecognitionMode() -> getRecognitionMode
    void setRecognitionMode(int) -> setRecognitionMode
    boolean shouldAllowMultipleScanResultsOnSingleImage() -> shouldAllowMultipleScanResultsOnSingleImage
    void setAllowMultipleScanResultsOnSingleImage(boolean) -> setAllowMultipleScanResultsOnSingleImage
    void setNumMsBeforeTimeout(int) -> setNumMsBeforeTimeout
    int getNumMsBeforeTimeout() -> getNumMsBeforeTimeout
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
com.microblink.recognizers.settings.GenericRecognizerSettings$1 -> com.microblink.recognizers.settings.GenericRecognizerSettings$1:
    com.microblink.recognizers.settings.GenericRecognizerSettings llIIlIlIIl(android.os.Parcel) -> llIIlIlIIl
    com.microblink.recognizers.settings.GenericRecognizerSettings[] llIIlIlIIl(int) -> llIIlIlIIl
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
com.microblink.recognizers.settings.RecognizerSettings -> com.microblink.recognizers.settings.RecognizerSettings:
    android.os.Bundle mSettingsBundle -> mSettingsBundle
    boolean requiresAutofocus() -> requiresAutofocus
    boolean requiresLandscapeMode() -> requiresLandscapeMode
    void setEnabled(boolean) -> setEnabled
    boolean isEnabled() -> isEnabled
    void log() -> log
    android.os.Bundle getAsBundle() -> getAsBundle
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
com.microblink.recognizers.settings.RecognizerSettingsStatus -> com.microblink.recognizers.settings.RecognizerSettingsStatus:
    com.microblink.recognizers.settings.RecognizerSettingsStatus EVERYTHING -> EVERYTHING
    com.microblink.recognizers.settings.RecognizerSettingsStatus OCR -> OCR
    com.microblink.recognizers.settings.RecognizerSettingsStatus BARCODE -> BARCODE
    com.microblink.recognizers.settings.RecognizerSettingsStatus NOTHING -> NOTHING
    com.microblink.recognizers.settings.RecognizerSettingsStatus[] $VALUES -> $VALUES
    com.microblink.recognizers.settings.RecognizerSettingsStatus[] values() -> values
    com.microblink.recognizers.settings.RecognizerSettingsStatus valueOf(java.lang.String) -> valueOf
com.microblink.results.barcode.BarcodeDetailedData -> com.microblink.results.barcode.BarcodeDetailedData:
    java.util.List mElements -> mElements
    byte[] mMergedData -> mMergedData
    android.os.Parcelable$Creator CREATOR -> CREATOR
    java.util.List getElements() -> getElements
    void addElement(com.microblink.results.barcode.BarcodeElement) -> addElement
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    byte[] getAllData() -> getAllData
    java.lang.String toString() -> toString
com.microblink.results.barcode.BarcodeDetailedData$1 -> com.microblink.results.barcode.BarcodeDetailedData$1:
    com.microblink.results.barcode.BarcodeDetailedData[] newArray(int) -> newArray
    com.microblink.results.barcode.BarcodeDetailedData createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
com.microblink.results.barcode.BarcodeElement -> com.microblink.results.barcode.BarcodeElement:
    com.microblink.results.barcode.ElementType mElementType -> mElementType
    byte[] mElementBytes -> mElementBytes
    android.os.Parcelable$Creator CREATOR -> CREATOR
    com.microblink.results.barcode.ElementType getElementType() -> getElementType
    byte[] getElementBytes() -> getElementBytes
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
com.microblink.results.barcode.BarcodeElement$1 -> com.microblink.results.barcode.BarcodeElement$1:
    com.microblink.results.barcode.BarcodeElement[] newArray(int) -> newArray
    com.microblink.results.barcode.BarcodeElement createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
com.microblink.results.barcode.ElementType -> com.microblink.results.barcode.ElementType:
    com.microblink.results.barcode.ElementType TEXT_DATA -> TEXT_DATA
    com.microblink.results.barcode.ElementType BYTE_DATA -> BYTE_DATA
    com.microblink.results.barcode.ElementType[] $VALUES -> $VALUES
    com.microblink.results.barcode.ElementType[] values() -> values
    com.microblink.results.barcode.ElementType valueOf(java.lang.String) -> valueOf
com.microblink.results.lines.LineDetectionResult -> com.microblink.results.lines.LineDetectionResult:
    java.util.List mLines -> mLines
    java.lang.String mName -> mName
    android.graphics.Matrix mTransformation -> mTransformation
    java.util.List getLines() -> getLines
    java.lang.String getName() -> getName
    android.graphics.Matrix getTransformation() -> getTransformation
com.microblink.results.ocr.OcrBlock -> com.microblink.results.ocr.OcrBlock:
    com.microblink.geometry.Rectangle mPosition -> mPosition
    com.microblink.results.ocr.OcrLine[] mLines -> mLines
    android.os.Parcelable$Creator CREATOR -> CREATOR
    com.microblink.geometry.Rectangle getPosition() -> getPosition
    com.microblink.results.ocr.OcrLine[] getLines() -> getLines
    java.lang.String toString() -> toString
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
com.microblink.results.ocr.OcrBlock$1 -> com.microblink.results.ocr.OcrBlock$1:
    com.microblink.results.ocr.OcrBlock createFromParcel(android.os.Parcel) -> createFromParcel
    com.microblink.results.ocr.OcrBlock[] newArray(int) -> newArray
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
com.microblink.results.ocr.OcrChar -> com.microblink.results.ocr.OcrChar:
    char mValue -> mValue
    int mHeight -> mHeight
    boolean mBold -> mBold
    boolean mItalic -> mItalic
    boolean mUncertain -> mUncertain
    int mQuality -> mQuality
    com.microblink.geometry.Rectangle mPosition -> mPosition
    android.os.Parcelable$Creator CREATOR -> CREATOR
    char getValue() -> getValue
    void setValue(char) -> setValue
    int getHeight() -> getHeight
    void setHeight(int) -> setHeight
    boolean isBold() -> isBold
    void setBold(boolean) -> setBold
    boolean isItalic() -> isItalic
    void setItalic(boolean) -> setItalic
    boolean isUncertain() -> isUncertain
    void setUncertain(boolean) -> setUncertain
    int getQuality() -> getQuality
    void setQuality(int) -> setQuality
    com.microblink.geometry.Rectangle getPosition() -> getPosition
    void setPosition(com.microblink.geometry.Rectangle) -> setPosition
    java.lang.String toString() -> toString
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
com.microblink.results.ocr.OcrChar$1 -> com.microblink.results.ocr.OcrChar$1:
    com.microblink.results.ocr.OcrChar createFromParcel(android.os.Parcel) -> createFromParcel
    com.microblink.results.ocr.OcrChar[] newArray(int) -> newArray
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
com.microblink.results.ocr.OcrLine -> com.microblink.results.ocr.OcrLine:
    com.microblink.geometry.Rectangle mPosition -> mPosition
    com.microblink.results.ocr.OcrChar[] mChars -> mChars
    android.os.Parcelable$Creator CREATOR -> CREATOR
    com.microblink.geometry.Rectangle getPosition() -> getPosition
    com.microblink.results.ocr.OcrChar[] getChars() -> getChars
    java.lang.String toString() -> toString
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
com.microblink.results.ocr.OcrLine$1 -> com.microblink.results.ocr.OcrLine$1:
    com.microblink.results.ocr.OcrLine createFromParcel(android.os.Parcel) -> createFromParcel
    com.microblink.results.ocr.OcrLine[] newArray(int) -> newArray
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
com.microblink.results.ocr.OcrResult -> com.microblink.results.ocr.OcrResult:
    com.microblink.results.ocr.OcrBlock[] mBlocks -> mBlocks
    java.lang.String mResultName -> mResultName
    android.graphics.Matrix mTransformation -> mTransformation
    android.os.Parcelable$Creator CREATOR -> CREATOR
    com.microblink.results.ocr.OcrBlock[] getBlocks() -> getBlocks
    java.lang.String getResultName() -> getResultName
    android.graphics.Matrix getTransformation() -> getTransformation
    void setTransformation(android.graphics.Matrix) -> setTransformation
    java.lang.String toString() -> toString
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
com.microblink.results.ocr.OcrResult$1 -> com.microblink.results.ocr.OcrResult$1:
    com.microblink.results.ocr.OcrResult createFromParcel(android.os.Parcel) -> createFromParcel
    com.microblink.results.ocr.OcrResult[] newArray(int) -> newArray
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
com.microblink.security.llIIlIlIIl -> com.microblink.security.llIIlIlIIl:
    byte[] llIIlIlIIl(java.lang.String) -> llIIlIlIIl
com.microblink.settings.NativeLibraryInfo -> com.microblink.settings.NativeLibraryInfo:
    android.os.Bundle llIIlIlIIl -> llIIlIlIIl
    boolean $assertionsDisabled -> $assertionsDisabled
    void log() -> log
    android.os.Bundle getAsBundle() -> getAsBundle
    boolean isLibrarySuccessfultInitialized() -> isLibrarySuccessfultInitialized
    java.lang.String getAvailableOCREngines() -> getAvailableOCREngines
    boolean isGpuActive() -> isGpuActive
    int getMaxImageSize() -> getMaxImageSize
    boolean isAusSlipEnabled() -> isAusSlipEnabled
    boolean isAusQRCodeEnabled() -> isAusQRCodeEnabled
    boolean isCroSlipEnabled() -> isCroSlipEnabled
    boolean isCroPdf417Enabled() -> isCroPdf417Enabled
    boolean isDeSlipEnabled() -> isDeSlipEnabled
    boolean isDeQRCodeEnabled() -> isDeQRCodeEnabled
    boolean isHuSlipEnabled() -> isHuSlipEnabled
    boolean isSloSlipEnabled() -> isSloSlipEnabled
    boolean isPhotoBullEnabled() -> isPhotoBullEnabled
    boolean isOcrOnlyEnabled() -> isOcrOnlyEnabled
    java.lang.String getBuildVersion() -> getBuildVersion
    boolean isBeSlipEnabled() -> isBeSlipEnabled
    boolean isPdf417ReaderEnabled() -> isPdf417ReaderEnabled
    boolean isUSDriverLicenseEnabled() -> isUSDriverLicenseEnabled
    boolean areZxingReadersEnabled() -> areZxingReadersEnabled
    boolean isNlSlipEnabled() -> isNlSlipEnabled
    boolean isUKSlipEnabled() -> isUKSlipEnabled
    boolean isKosSlipEnabled() -> isKosSlipEnabled
    boolean isKosCode128Enabled() -> isKosCode128Enabled
    boolean isSwissSlipEnabled() -> isSwissSlipEnabled
    boolean isPhotoMathEnabled() -> isPhotoMathEnabled
    boolean isMRTDSmallEnabled() -> isMRTDSmallEnabled
    java.lang.String getErrorList() -> getErrorList
    com.microblink.settings.NativeLibraryInfo getThinClientLibInfo() -> getThinClientLibInfo
com.microblink.util.DeviceInformation -> com.microblink.util.DeviceInformation:
    java.lang.String deviceModel -> deviceModel
    java.lang.String deviceName -> deviceName
    java.lang.String manufacturer -> manufacturer
    java.lang.String androidRelease -> androidRelease
    int apiLevel -> apiLevel
    boolean autofocusSupported -> autofocusSupported
    boolean cameraHasFlash -> cameraHasFlash
    java.lang.String chosenCameraStrategy -> chosenCameraStrategy
    android.hardware.Camera$Parameters preparedCameraParameters -> preparedCameraParameters
    int screenWidth -> screenWidth
    int screenHeight -> screenHeight
    java.lang.String getDeviceModel() -> getDeviceModel
    java.lang.String getDeviceName() -> getDeviceName
    java.lang.String getManufacturer() -> getManufacturer
    java.lang.String getAndroidRelease() -> getAndroidRelease
    int getApiLevel() -> getApiLevel
    boolean isAutofocusSupported() -> isAutofocusSupported
    boolean isCameraHasFlash() -> isCameraHasFlash
    java.lang.String getChosenCameraStrategy() -> getChosenCameraStrategy
    android.hardware.Camera$Parameters getPreparedCameraParameters() -> getPreparedCameraParameters
    int getScreenWidth() -> getScreenWidth
    int getScreenHeight() -> getScreenHeight
com.microblink.util.FakeR -> com.microblink.util.FakeR:
    android.content.Context mContext -> mContext
    java.lang.String mPackageName -> mPackageName
    int getId(java.lang.String,java.lang.String) -> getId
    int getId(android.content.Context,java.lang.String,java.lang.String) -> getId
com.microblink.util.IlIllIlIIl -> com.microblink.util.IlIllIlIIl:
    void llIIlIlIIl(float[],int,float,float) -> llIIlIlIIl
    void IlIllIlIIl(float[],int,float,float) -> IlIllIlIIl
    void llIIlIlIIl(float[],float,float) -> llIIlIlIIl
    void IlIllIlIIl(float[],float,float) -> IlIllIlIIl
com.microblink.util.IllIIIIllI -> com.microblink.util.IllIIIIllI:
    android.os.Handler mHandler -> mHandler
    android.os.Looper llIIlIlIIl -> llIIlIlIIl
    boolean llIlIlIlIl -> llIlIlIlIl
    java.lang.String mName -> mName
    boolean lIlIIlIIll -> lIlIIlIIll
    java.util.concurrent.CountDownLatch llIIlIlIIl -> llIIlIlIIl
    boolean IlIlIIllll -> IlIlIIllll
    void run() -> run
    void IIIllIlIIl() -> IIIllIlIIl
    void llIIlIlIIl(java.lang.Runnable) -> llIIlIlIIl
    void llIIlIlIIl(java.lang.Runnable,long) -> llIIlIlIIl
    void IIlIlllIIl() -> IIlIlllIIl
    void llIIlIlIIl(long) -> llIIlIlIIl
    android.os.Looper llIIlIlIIl(com.microblink.util.IllIIIIllI) -> llIIlIlIIl
com.microblink.util.IllIIIIllI$1 -> com.microblink.util.IllIIIIllI$1:
    com.microblink.util.IllIIIIllI IlIllIlIIl -> IlIllIlIIl
    void run() -> run
com.microblink.util.IllIIIllII -> com.microblink.util.IllIIIllII:
    java.nio.ByteBuffer llIIlIlIIl(android.content.res.Resources,int) -> llIIlIlIIl
com.microblink.util.Log -> com.microblink.util.Log:
    java.io.PrintWriter mLogWriter -> mLogWriter
    java.lang.String NEW_LINE -> NEW_LINE
    java.lang.String mLogFolder -> mLogFolder
    android.content.Context mAppContext -> mAppContext
    int kLogLevel -> kLogLevel
    void setLogLevel(com.microblink.util.Log$LogLevel) -> setLogLevel
    com.microblink.util.Log$LogLevel getCurrentLogLevel() -> getCurrentLogLevel
    void setApplicationContext(android.content.Context) -> setApplicationContext
    java.lang.String getLogFolder() -> getLogFolder
    void enableFileLogging() -> enableFileLogging
    void disableFileLogging() -> disableFileLogging
    java.lang.String format(java.lang.String,java.lang.Object[]) -> format
    int getLineNumber() -> getLineNumber
    java.lang.String getTag(java.lang.Object) -> getTag
    void printToWriter(java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable) -> printToWriter
    void d(java.lang.Object,java.lang.String,java.lang.Object[]) -> d
    void d(java.lang.Object,java.lang.Throwable,java.lang.String,java.lang.Object[]) -> d
    void e(java.lang.Object,java.lang.String,java.lang.Object[]) -> e
    void e(java.lang.Object,java.lang.Throwable,java.lang.String,java.lang.Object[]) -> e
    void w(java.lang.Object,java.lang.String,java.lang.Object[]) -> w
    void w(java.lang.Object,java.lang.Throwable,java.lang.String,java.lang.Object[]) -> w
    void wtf(java.lang.Object,java.lang.String,java.lang.Object[]) -> wtf
    void wtf(java.lang.Object,java.lang.Throwable,java.lang.String,java.lang.Object[]) -> wtf
    void v(java.lang.Object,java.lang.String,java.lang.Object[]) -> v
    void v(java.lang.Object,java.lang.Throwable,java.lang.String,java.lang.Object[]) -> v
    void i(java.lang.Object,java.lang.String,java.lang.Object[]) -> i
    void i(java.lang.Object,java.lang.Throwable,java.lang.String,java.lang.Object[]) -> i
com.microblink.util.Log$LogLevel -> com.microblink.util.Log$LogLevel:
    com.microblink.util.Log$LogLevel LOG_WARNINGS_AND_ERRORS -> LOG_WARNINGS_AND_ERRORS
    com.microblink.util.Log$LogLevel LOG_INFORMATION -> LOG_INFORMATION
    com.microblink.util.Log$LogLevel LOG_DEBUG -> LOG_DEBUG
    com.microblink.util.Log$LogLevel LOG_VERBOSE -> LOG_VERBOSE
    com.microblink.util.Log$LogLevel[] $VALUES -> $VALUES
    com.microblink.util.Log$LogLevel[] values() -> values
    com.microblink.util.Log$LogLevel valueOf(java.lang.String) -> valueOf
com.microblink.util.RecognizerCompatibility -> com.microblink.util.RecognizerCompatibility:
    com.microblink.util.RecognizerCompatibilityStatus llIIlIlIIl -> llIIlIlIIl
    com.microblink.util.RecognizerCompatibilityStatus getRecognizerCompatibilityStatus(android.content.Context) -> getRecognizerCompatibilityStatus
    boolean cameraHasAutofocus(com.microblink.hardware.camera.CameraType,android.content.Context) -> cameraHasAutofocus
    void IlIllIlIIl(android.content.Context) -> IlIllIlIIl
com.microblink.util.RecognizerCompatibilityStatus -> com.microblink.util.RecognizerCompatibilityStatus:
    com.microblink.util.RecognizerCompatibilityStatus RECOGNIZER_SUPPORTED -> RECOGNIZER_SUPPORTED
    com.microblink.util.RecognizerCompatibilityStatus PROCESSOR_ARCHITECTURE_NOT_SUPPORTED -> PROCESSOR_ARCHITECTURE_NOT_SUPPORTED
    com.microblink.util.RecognizerCompatibilityStatus NO_CAMERA -> NO_CAMERA
    com.microblink.util.RecognizerCompatibilityStatus DEVICE_BLACKLISTED -> DEVICE_BLACKLISTED
    com.microblink.util.RecognizerCompatibilityStatus UNSUPPORTED_ANDROID_VERSION -> UNSUPPORTED_ANDROID_VERSION
    com.microblink.util.RecognizerCompatibilityStatus RECOGNIZER_NOT_SUPPORTED -> RECOGNIZER_NOT_SUPPORTED
    com.microblink.util.RecognizerCompatibilityStatus[] $VALUES -> $VALUES
    com.microblink.util.RecognizerCompatibilityStatus[] values() -> values
    com.microblink.util.RecognizerCompatibilityStatus valueOf(java.lang.String) -> valueOf
com.microblink.util.lIlIIIIlIl -> com.microblink.util.lIlIIIIlIl:
    java.util.Stack llIIlIlIIl -> llIIlIlIIl
    void start() -> start
    long llIIlIlIIl() -> llIIlIlIIl
com.microblink.util.llIIIlllll -> com.microblink.util.llIIIlllll:
    void llIIlIlIIl(java.lang.Runnable) -> llIIlIlIIl
    void llIIlIlIIl(java.lang.Runnable,long) -> llIIlIlIIl
    void IIlIlllIIl() -> IIlIlllIIl
    void llIIlIlIIl(long) -> llIIlIlIIl
com.microblink.util.llIIlIlIIl -> com.microblink.util.llIIlIlIIl:
    int IIIIIIIIII -> IIIIIIIIII
    boolean lIIIlIIllI -> lIIIlIIllI
    void lIlIIIIlIl(int) -> lIlIIIIlIl
    void llIIlIlIIl(android.hardware.Camera,int) -> llIIlIlIIl
    int lIlIIIIlIl() -> lIlIIIIlIl
com.microblink.util.pool.IlIllIlIIl -> com.microblink.util.pool.IlIllIlIIl:
    void IlIIlllIIl() -> IlIIlllIIl
    void llIllIIlll() -> llIllIIlll
com.microblink.util.pool.IllIIIllII -> com.microblink.util.pool.IllIIIllII:
    com.microblink.util.pool.IlIllIlIIl llIIlIlIIl() -> llIIlIlIIl
com.microblink.util.pool.llIIlIlIIl -> com.microblink.util.pool.llIIlIlIIl:
    int IIlIlllIIl -> IIlIlllIIl
    com.microblink.util.pool.IllIIIllII llIIlIlIIl -> llIIlIlIIl
    com.microblink.util.pool.IlIllIlIIl[] llIIlIlIIl -> llIIlIlIIl
    int IIIllIlIIl -> IIIllIlIIl
    com.microblink.util.pool.IlIllIlIIl IlIllIlIIl() -> IlIllIlIIl
    void llIIlIlIIl(com.microblink.util.pool.IlIllIlIIl) -> llIIlIlIIl
com.microblink.view.BaseCameraView -> com.microblink.view.BaseCameraView:
    com.microblink.view.surface.ICameraView llIIlIlIIl -> llIIlIlIIl
    com.microblink.hardware.camera.lIlIIIIlIl llIIlIlIIl -> llIIlIlIIl
    int lIIIlIIllI -> lIIIlIIllI
    com.microblink.view.viewfinder.llIIlIlIIl llIIlIlIIl -> llIIlIlIIl
    android.widget.FrameLayout IlIllIlIIl -> IlIllIlIIl
    com.microblink.hardware.orientation.Orientation IllIIIllII -> IllIIIllII
    com.microblink.view.OnSizeChangedListener llIIlIlIIl -> llIIlIlIIl
    com.microblink.hardware.orientation.llIIlIlIIl llIIlIlIIl -> llIIlIlIIl
    com.microblink.hardware.camera.strategy.llIIlIlIIl IllIIIllII -> IllIIIllII
    com.microblink.hardware.orientation.Orientation llIIIlllll -> llIIIlllll
    boolean IIlIlIIlll -> IIlIlIIlll
    int llIlIlIlIl -> llIlIlIlIl
    int lIlIIlIIll -> lIlIIlIIll
    int IlIlIIllll -> IlIlIIllll
    boolean IIllllllll -> IIllllllll
    com.microblink.view.OrientationAllowedListener llIIlIlIIl -> llIIlIlIIl
    com.microblink.hardware.orientation.OrientationChangeListener IlIllIlIIl -> IlIllIlIIl
    boolean IlIIIlIIIl -> IlIIIlIIIl
    int IIlIlIIlll -> IIlIlIIlll
    com.microblink.view.CameraEventsListener llIIlIlIIl -> llIIlIlIIl
    boolean IIIIlIllIl -> IIIIlIllIl
    android.os.Handler mHandler -> mHandler
    com.microblink.view.CameraAspectMode llIIlIlIIl -> llIIlIlIIl
    com.microblink.geometry.Rectangle llIIlIlIIl -> llIIlIlIIl
    void IllIIIllII(android.content.Context) -> IllIIIllII
    void addView(android.view.View) -> addView
    void addView(android.view.View,int) -> addView
    void addView(android.view.View,int,android.view.ViewGroup$LayoutParams) -> addView
    void addView(android.view.View,android.view.ViewGroup$LayoutParams) -> addView
    void addView(android.view.View,int,int) -> addView
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    void addChildView(android.view.View,boolean) -> addChildView
    void lIIIlIIllI() -> lIIIlIIllI
    int llIIlIlIIl(android.app.Activity) -> llIIlIlIIl
    void IlIllIlIIl(java.lang.Runnable) -> IlIllIlIIl
    void changeConfiguration(android.content.res.Configuration) -> changeConfiguration
    void create() -> create
    void destroy() -> destroy
    void llIIlIlIIl(com.microblink.hardware.camera.strategy.llIIlIlIIl) -> llIIlIlIIl
    com.microblink.hardware.camera.strategy.llIIlIlIIl getCameraFactorySettings() -> getCameraFactorySettings
    com.microblink.hardware.camera.lIlIIIIlIl llIIlIlIIl(com.microblink.hardware.camera.strategy.llIIlIlIIl) -> llIIlIlIIl
    int getCameraRotation() -> getCameraRotation
    boolean lIlllIlIlI() -> lIlllIlIlI
    void onCameraPreviewStarted() -> onCameraPreviewStarted
    void llIlIlIlIl() -> llIlIlIlIl
    void start() -> start
    void resume() -> resume
    void pause() -> pause
    void stop() -> stop
    void onCameraTapEvent(float,float) -> onCameraTapEvent
    void onMeasure(int,int) -> onMeasure
    boolean dispatchTouchEvent(android.view.MotionEvent) -> dispatchTouchEvent
    void onLayout(boolean,int,int,int,int) -> onLayout
    boolean isCameraFocused() -> isCameraFocused
    com.microblink.hardware.camera.CameraType getOpenedCameraType() -> getOpenedCameraType
    void focusCamera() -> focusCamera
    boolean isCameraTorchSupported() -> isCameraTorchSupported
    void setTorchState(boolean,com.microblink.hardware.SuccessCallback) -> setTorchState
    void onOrientationChange(com.microblink.hardware.orientation.Orientation) -> onOrientationChange
    com.microblink.hardware.orientation.Orientation getCurrentOrientation() -> getCurrentOrientation
    void llIIlIlIIl(com.microblink.hardware.camera.ResumeGrabberCaller) -> llIIlIlIIl
    boolean isDeviceShaking() -> isDeviceShaking
    void lIIIIIlIlI() -> lIIIIIlIlI
    int getCameraPreviewWidth() -> getCameraPreviewWidth
    int getCameraPreviewHeight() -> getCameraPreviewHeight
    boolean shouldAnimateRotation() -> shouldAnimateRotation
    void setAnimateRotation(boolean) -> setAnimateRotation
    int getRotationAnimationDuration() -> getRotationAnimationDuration
    boolean isOrientationAllowed(com.microblink.hardware.orientation.Orientation) -> isOrientationAllowed
    void onAutofocusFailed() -> onAutofocusFailed
    com.microblink.geometry.Rectangle llIIlIlIIl(android.graphics.Rect) -> llIIlIlIIl
    android.graphics.Rect[] llIIlIlIIl(android.graphics.Rect[]) -> llIIlIlIIl
    void setFocusAreaRaw(com.microblink.geometry.Rectangle) -> setFocusAreaRaw
    void onAutofocusStarted(android.graphics.Rect[]) -> onAutofocusStarted
    void onAutofocusStopped(android.graphics.Rect[]) -> onAutofocusStopped
    void setRotationAnimationDuration(int) -> setRotationAnimationDuration
    com.microblink.hardware.orientation.Orientation getInitialOrientation() -> getInitialOrientation
    void setInitialOrientation(com.microblink.hardware.orientation.Orientation) -> setInitialOrientation
    void setOrientationAllowedListener(com.microblink.view.OrientationAllowedListener) -> setOrientationAllowedListener
    boolean isCameraActive() -> isCameraActive
    int getConfigurationOrientation() -> getConfigurationOrientation
    void setCameraType(com.microblink.hardware.camera.CameraType) -> setCameraType
    com.microblink.view.CameraAspectMode getAspectMode() -> getAspectMode
    void setAspectMode(com.microblink.view.CameraAspectMode) -> setAspectMode
    void setOnSizeChangedListener(com.microblink.view.OnSizeChangedListener) -> setOnSizeChangedListener
    void setShouldAlwaysUseHighestPossibleResolution(boolean) -> setShouldAlwaysUseHighestPossibleResolution
    void setPhotoMode(boolean) -> setPhotoMode
    void setOptimizeCameraForNearScan(boolean) -> setOptimizeCameraForNearScan
    com.microblink.hardware.orientation.OrientationChangeListener getOrientationChangeListener() -> getOrientationChangeListener
    void setOrientationChangeListener(com.microblink.hardware.orientation.OrientationChangeListener) -> setOrientationChangeListener
    com.microblink.view.CameraEventsListener getCameraEventsListener() -> getCameraEventsListener
    void setCameraEventsListener(com.microblink.view.CameraEventsListener) -> setCameraEventsListener
    int getHostScreenOrientation() -> getHostScreenOrientation
    com.microblink.geometry.Rectangle getVisiblePart() -> getVisiblePart
    boolean lIllIIlIIl() -> lIllIIlIIl
    boolean llIIlIlIIl(com.microblink.view.BaseCameraView,boolean) -> llIIlIlIIl
    com.microblink.view.surface.ICameraView llIIlIlIIl(com.microblink.view.BaseCameraView) -> llIIlIlIIl
com.microblink.view.BaseCameraView$1 -> com.microblink.view.BaseCameraView$1:
    com.microblink.view.BaseCameraView llIIlIlIIl -> llIIlIlIIl
    void llIIlIlIIl(java.lang.Throwable) -> llIIlIlIIl
    void lllllIlIll() -> lllllIlIll
    void llIIlIlIIl(int,int) -> llIIlIlIIl
com.microblink.view.BaseCameraView$1$1 -> com.microblink.view.BaseCameraView$1$1:
    java.lang.Throwable IlIllIlIIl -> IlIllIlIIl
    com.microblink.view.BaseCameraView$1 llIIlIlIIl -> llIIlIlIIl
    void run() -> run
com.microblink.view.BaseCameraView$1$2 -> com.microblink.view.BaseCameraView$1$2:
    com.microblink.view.BaseCameraView$1 llIIlIlIIl -> llIIlIlIIl
    void run() -> run
com.microblink.view.BaseCameraView$2 -> com.microblink.view.BaseCameraView$2:
    android.graphics.Rect[] IllIIIllII -> IllIIIllII
    com.microblink.view.BaseCameraView llIIlIlIIl -> llIIlIlIIl
    void run() -> run
com.microblink.view.BaseCameraView$3 -> com.microblink.view.BaseCameraView$3:
    android.graphics.Rect[] IllIIIllII -> IllIIIllII
    com.microblink.view.BaseCameraView llIIlIlIIl -> llIIlIlIIl
    void run() -> run
com.microblink.view.BaseCameraView$LayoutParams -> com.microblink.view.BaseCameraView$LayoutParams:
    boolean llllIllllI -> llllIllllI
    boolean isRotatable() -> isRotatable
    void setRotatable(boolean) -> setRotatable
com.microblink.view.CameraAspectMode -> com.microblink.view.CameraAspectMode:
    com.microblink.view.CameraAspectMode ASPECT_FIT -> ASPECT_FIT
    com.microblink.view.CameraAspectMode ASPECT_FILL -> ASPECT_FILL
    android.os.Parcelable$Creator CREATOR -> CREATOR
    com.microblink.view.CameraAspectMode[] $VALUES -> $VALUES
    com.microblink.view.CameraAspectMode[] values() -> values
    com.microblink.view.CameraAspectMode valueOf(java.lang.String) -> valueOf
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
com.microblink.view.CameraAspectMode$1 -> com.microblink.view.CameraAspectMode$1:
    com.microblink.view.CameraAspectMode llIIlIlIIl(android.os.Parcel) -> llIIlIlIIl
    com.microblink.view.CameraAspectMode[] llIIlIlIIl(int) -> llIIlIlIIl
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
com.microblink.view.CameraEventsListener -> com.microblink.view.CameraEventsListener:
    void onCameraPreviewStarted() -> onCameraPreviewStarted
    void onStartupError(java.lang.Throwable) -> onStartupError
    void onNotSupported(com.microblink.view.NotSupportedReason) -> onNotSupported
com.microblink.view.NotSupportedReason -> com.microblink.view.NotSupportedReason:
    com.microblink.view.NotSupportedReason UNSUPPORTED_ANDROID_VERSION -> UNSUPPORTED_ANDROID_VERSION
    com.microblink.view.NotSupportedReason NO_CAMERA -> NO_CAMERA
    com.microblink.view.NotSupportedReason NO_AUTOFOCUS_CAMERA -> NO_AUTOFOCUS_CAMERA
    com.microblink.view.NotSupportedReason BLACKLISTED_DEVICE -> BLACKLISTED_DEVICE
    com.microblink.view.NotSupportedReason INVALID_LICENSE_KEY -> INVALID_LICENSE_KEY
    com.microblink.view.NotSupportedReason CUSTOM_UI_FORBIDDEN -> CUSTOM_UI_FORBIDDEN
    com.microblink.view.NotSupportedReason[] $VALUES -> $VALUES
    com.microblink.view.NotSupportedReason[] values() -> values
    com.microblink.view.NotSupportedReason valueOf(java.lang.String) -> valueOf
com.microblink.view.OnSizeChangedListener -> com.microblink.view.OnSizeChangedListener:
    void onSizeChanged(int,int) -> onSizeChanged
com.microblink.view.OrientationAllowedListener -> com.microblink.view.OrientationAllowedListener:
    boolean isOrientationAllowed(com.microblink.hardware.orientation.Orientation) -> isOrientationAllowed
com.microblink.view.overlay.IlIllIlIIl -> com.microblink.view.overlay.IlIllIlIIl:
    android.graphics.Paint llIIlIlIIl -> llIIlIlIIl
    float IllIIlIIII -> IllIIlIIII
    float lIIIIIlIlI -> lIIIIIlIlI
    double llIIlIlIIl -> llIIlIlIIl
    double IlIllIlIIl -> IlIllIlIIl
    int lIIIIIllll -> lIIIIIllll
    int mHeight -> mHeight
    int IIllllllll -> IIllllllll
    int IlIIIlIIIl -> IlIIIlIIIl
    int IIIIlIllIl -> IIIIlIllIl
    int llllIllllI -> llllIllllI
    float IlIlllllII -> IlIlllllII
    void lIlIIlIIll() -> lIlIIlIIll
    float llIIlIlIIl(float) -> llIIlIlIIl
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onDraw(android.graphics.Canvas) -> onDraw
    float llIIlIlIIl(com.microblink.view.overlay.IlIllIlIIl) -> llIIlIlIIl
    float IlIllIlIIl(com.microblink.view.overlay.IlIllIlIIl) -> IlIllIlIIl
    void llIIlIlIIl(com.microblink.view.overlay.IlIllIlIIl) -> llIIlIlIIl
com.microblink.view.overlay.IlIllIlIIl$1 -> com.microblink.view.overlay.IlIllIlIIl$1:
    com.microblink.view.overlay.IlIllIlIIl llIIlIlIIl -> llIIlIlIIl
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.microblink.view.overlay.llIIlIlIIl -> com.microblink.view.overlay.llIIlIlIIl:
    android.view.View llIIlIlIIl(android.content.Context) -> llIIlIlIIl
com.microblink.view.recognition.DetectionStatus -> com.microblink.view.recognition.DetectionStatus:
    com.microblink.view.recognition.DetectionStatus SUCCESS -> SUCCESS
    com.microblink.view.recognition.DetectionStatus FAIL -> FAIL
    com.microblink.view.recognition.DetectionStatus CAMERA_TOO_HIGH -> CAMERA_TOO_HIGH
    com.microblink.view.recognition.DetectionStatus PARTIAL_OBJECT -> PARTIAL_OBJECT
    com.microblink.view.recognition.DetectionStatus CAMERA_AT_ANGLE -> CAMERA_AT_ANGLE
    com.microblink.view.recognition.DetectionStatus[] $VALUES -> $VALUES
    com.microblink.view.recognition.DetectionStatus[] values() -> values
    com.microblink.view.recognition.DetectionStatus valueOf(java.lang.String) -> valueOf
    com.microblink.view.recognition.DetectionStatus fromNativeDetectionStatus(int) -> fromNativeDetectionStatus
com.microblink.view.recognition.LineRecognizerViewEventListener -> com.microblink.view.recognition.LineRecognizerViewEventListener:
    void onDisplayLinesOfInterest(com.microblink.results.lines.LineDetectionResult) -> onDisplayLinesOfInterest
com.microblink.view.recognition.OcrRecognizerViewEventListener -> com.microblink.view.recognition.OcrRecognizerViewEventListener:
    void onDisplayOcrResult(com.microblink.results.ocr.OcrResult) -> onDisplayOcrResult
com.microblink.view.recognition.RecognitionType -> com.microblink.view.recognition.RecognitionType:
    com.microblink.view.recognition.RecognitionType SUCCESSFUL -> SUCCESSFUL
    com.microblink.view.recognition.RecognitionType UNSUCCESSFUL -> UNSUCCESSFUL
    com.microblink.view.recognition.RecognitionType PARTIAL -> PARTIAL
    com.microblink.view.recognition.RecognitionType[] $VALUES -> $VALUES
    com.microblink.view.recognition.RecognitionType[] values() -> values
    com.microblink.view.recognition.RecognitionType valueOf(java.lang.String) -> valueOf
com.microblink.view.recognition.RecognizerView -> com.microblink.view.recognition.RecognizerView:
    com.microblink.view.NotSupportedReason llIIlIlIIl -> llIIlIlIIl
    com.microblink.recognition.NativeRecognizerWrapper llIIIlllll -> llIIIlllll
    com.microblink.recognition.RecognizerDelegate IlIllIlIIl -> IlIllIlIIl
    com.microblink.recognizers.settings.RecognizerSettings[] llIIlIlIIl -> llIIlIlIIl
    com.microblink.recognizers.settings.GenericRecognizerSettings mGenericRecognizerSettings -> mGenericRecognizerSettings
    com.microblink.hardware.camera.CameraDataFormat IlIllIlIIl -> IlIllIlIIl
    com.microblink.recognition.RightsManager llIIlIlIIl -> llIIlIlIIl
    java.lang.String llIIlIIlll -> llIIlIIlll
    java.lang.String IIlIIIllIl -> IIlIIIllIl
    com.microblink.geometry.Rectangle IllIIIllII -> IllIIIllII
    boolean lIlIIIlIll -> lIlIIIlIll
    com.microblink.view.recognition.RecognizerViewEventListener IlIllIlIIl -> IlIllIlIIl
    boolean IllIllIllI -> IllIllIllI
    com.microblink.view.recognition.ScanResultListener IlIllIlIIl -> IlIllIlIIl
    com.microblink.image.ImageListener mImageListener -> mImageListener
    android.view.View IlIllIlIIl -> IlIllIlIIl
    com.microblink.recognition.NativeRecognizerWrapper$llIIlIlIIl IlIllIlIIl -> IlIllIlIIl
    void create() -> create
    void llIIlIlIIl(com.microblink.hardware.camera.strategy.llIIlIlIIl) -> llIIlIlIIl
    com.microblink.geometry.Rectangle llIIlIlIIl(com.microblink.hardware.orientation.Orientation) -> llIIlIlIIl
    com.microblink.view.NotSupportedReason llIIlIlIIl() -> llIIlIlIIl
    void start() -> start
    void stop() -> stop
    void resume() -> resume
    void pause() -> pause
    void destroy() -> destroy
    void resumeScanning() -> resumeScanning
    void pauseScanning() -> pauseScanning
    boolean lIlllIlIlI() -> lIlllIlIlI
    void onCameraPreviewStarted() -> onCameraPreviewStarted
    void setRecognitionTimeout(int) -> setRecognitionTimeout
    com.microblink.hardware.camera.CameraDataFormat getLastRecognitionDataFormat() -> getLastRecognitionDataFormat
    void IlIIIIIlll() -> IlIIIIIlll
    void IlIlIIllll() -> IlIlIIllll
    void setRecognitionPaused(boolean) -> setRecognitionPaused
    com.microblink.recognizers.BaseRecognitionResult[] llIIlIlIIl(com.microblink.recognizers.BaseRecognitionResult[],boolean) -> llIIlIlIIl
    boolean isRecognitionPaused() -> isRecognitionPaused
    void onCameraFrame(com.microblink.hardware.camera.IlIllIlIIl) -> onCameraFrame
    void reconfigureRecognizers(com.microblink.recognizers.settings.RecognizerSettings[],com.microblink.recognizers.settings.GenericRecognizerSettings) -> reconfigureRecognizers
    void onTakePictureFail() -> onTakePictureFail
    void onOrientationChange(com.microblink.hardware.orientation.Orientation) -> onOrientationChange
    boolean lIllIIlIIl() -> lIllIIlIIl
    boolean setLicenseKey(java.lang.String) -> setLicenseKey
    boolean setLicenseKey(java.lang.String,java.lang.String) -> setLicenseKey
    void setScanningRegion(com.microblink.geometry.Rectangle,boolean) -> setScanningRegion
    boolean shouldRotateScanningRegion() -> shouldRotateScanningRegion
    com.microblink.geometry.Rectangle getScanningRegion() -> getScanningRegion
    com.microblink.view.recognition.RecognizerViewEventListener getRecognizerViewEventListener() -> getRecognizerViewEventListener
    void setRecognizerViewEventListener(com.microblink.view.recognition.RecognizerViewEventListener) -> setRecognizerViewEventListener
    com.microblink.recognition.RightsManager getRightsManager() -> getRightsManager
    java.lang.String getNativeLibraryVersionString() -> getNativeLibraryVersionString
    void setRecognitionSettings(com.microblink.recognizers.settings.RecognizerSettings[]) -> setRecognitionSettings
    com.microblink.recognizers.settings.GenericRecognizerSettings getGenericRecognizerSettings() -> getGenericRecognizerSettings
    void setGenericRecognizerSettings(com.microblink.recognizers.settings.GenericRecognizerSettings) -> setGenericRecognizerSettings
    void setScanResultListener(com.microblink.view.recognition.ScanResultListener) -> setScanResultListener
    void setImageListener(com.microblink.image.ImageListener) -> setImageListener
    com.microblink.view.recognition.ScanResultListener getScanResultListener() -> getScanResultListener
    void llIIlIlIIl(com.microblink.recognizers.BaseRecognitionResult[],com.microblink.view.recognition.RecognitionType) -> llIIlIlIIl
    com.microblink.recognition.NativeRecognizerWrapper$llIIlIlIIl llIIlIlIIl() -> llIIlIlIIl
    void llIIlIlIIl(com.microblink.view.recognition.RecognizerView,com.microblink.recognizers.BaseRecognitionResult[],com.microblink.view.recognition.RecognitionType) -> llIIlIlIIl
    com.microblink.hardware.camera.strategy.llIIlIlIIl llIIlIlIIl(com.microblink.view.recognition.RecognizerView) -> llIIlIlIIl
    void llIIlIlIIl(com.microblink.view.recognition.RecognizerView,com.microblink.hardware.camera.ResumeGrabberCaller) -> llIIlIlIIl
    void IlIllIlIIl(com.microblink.view.recognition.RecognizerView,com.microblink.hardware.camera.ResumeGrabberCaller) -> IlIllIlIIl
    void llIIlIlIIl(com.microblink.view.recognition.RecognizerView,java.lang.Runnable) -> llIIlIlIIl
    void IlIllIlIIl(com.microblink.view.recognition.RecognizerView,java.lang.Runnable) -> IlIllIlIIl
com.microblink.view.recognition.RecognizerView$1 -> com.microblink.view.recognition.RecognizerView$1:
    com.microblink.view.recognition.RecognizerView IlIllIlIIl -> IlIllIlIIl
    void lIIIIIllll() -> lIIIIIllll
    void IIlIIIllIl() -> IIlIIIllIl
com.microblink.view.recognition.RecognizerView$2 -> com.microblink.view.recognition.RecognizerView$2:
    com.microblink.view.recognition.RecognizerView IlIllIlIIl -> IlIllIlIIl
    void onClick(android.content.DialogInterface,int) -> onClick
com.microblink.view.recognition.RecognizerView$3 -> com.microblink.view.recognition.RecognizerView$3:
    com.microblink.view.recognition.RecognizerView IlIllIlIIl -> IlIllIlIIl
    void onRecognitionDone(com.microblink.recognizers.BaseRecognitionResult[]) -> onRecognitionDone
    void onRecognitionDoneWithTimeout(com.microblink.recognizers.BaseRecognitionResult[]) -> onRecognitionDoneWithTimeout
com.microblink.view.recognition.RecognizerView$3$1 -> com.microblink.view.recognition.RecognizerView$3$1:
    com.microblink.recognizers.BaseRecognitionResult[] llIIlIlIIl -> llIIlIlIIl
    com.microblink.view.recognition.RecognizerView$3 llIIlIlIIl -> llIIlIlIIl
    void run() -> run
com.microblink.view.recognition.RecognizerView$3$2 -> com.microblink.view.recognition.RecognizerView$3$2:
    com.microblink.recognizers.BaseRecognitionResult[] llIIlIlIIl -> llIIlIlIIl
    com.microblink.view.recognition.RecognizerView$3 llIIlIlIIl -> llIIlIlIIl
    void run() -> run
com.microblink.view.recognition.RecognizerViewDebugListener -> com.microblink.view.recognition.RecognizerViewDebugListener:
    void onDisplayDebugString(java.lang.String) -> onDisplayDebugString
com.microblink.view.recognition.RecognizerViewEventListener -> com.microblink.view.recognition.RecognizerViewEventListener:
    void onNothingDetected() -> onNothingDetected
    void onDisplayPointsOfInterest(java.util.List,com.microblink.view.recognition.DetectionStatus) -> onDisplayPointsOfInterest
    void onDisplayQuadrilateralObject(com.microblink.geometry.Quadrilateral,com.microblink.view.recognition.DetectionStatus) -> onDisplayQuadrilateralObject
com.microblink.view.recognition.ScanResultListener -> com.microblink.view.recognition.ScanResultListener:
    void onScanningDone(com.microblink.recognizers.BaseRecognitionResult[],com.microblink.view.recognition.RecognitionType) -> onScanningDone
com.microblink.view.recognition.llIIlIlIIl -> com.microblink.view.recognition.llIIlIlIIl:
    byte[] IlIllIlIIl -> IlIllIlIIl
    byte[] IllIIIllII -> IllIIIllII
    boolean llIIlIlIIl(com.microblink.recognition.RightsManager,java.lang.Object) -> llIIlIlIIl
    boolean llIIlIlIIl(java.lang.Object) -> llIIlIlIIl
    boolean llIIlIlIIl(byte[],byte[]) -> llIIlIlIIl
com.microblink.view.surface.ICameraView -> com.microblink.view.surface.ICameraView:
    void setAspectMode(com.microblink.view.CameraAspectMode) -> setAspectMode
    void setPreviewSize(int,int) -> setPreviewSize
    void setRotation(int) -> setRotation
    int getVisibleWidth() -> getVisibleWidth
    int getVisibleHeight() -> getVisibleHeight
    android.view.View getView() -> getView
    void installCallback(com.microblink.hardware.camera.lIlIIIIlIl) -> installCallback
    void removeCallback() -> removeCallback
    void setHostActivityOrientation(int) -> setHostActivityOrientation
    void setOnCameraTapListener(com.microblink.view.surface.ICameraView$OnCameraTapListener) -> setOnCameraTapListener
    android.graphics.Rect convertRectangleToActualRect(com.microblink.geometry.Rectangle) -> convertRectangleToActualRect
com.microblink.view.surface.ICameraView$OnCameraTapListener -> com.microblink.view.surface.ICameraView$OnCameraTapListener:
    void onCameraTapEvent(float,float) -> onCameraTapEvent
com.microblink.view.surface.IlIllIlIIl -> com.microblink.view.surface.IlIllIlIIl:
    int lIlIIIlIll -> lIlIIIlIll
    int IllIllIllI -> IllIllIllI
    int lIIIIIllll -> lIIIIIllll
    int mHeight -> mHeight
    int IIlIIlIllI -> IIlIIlIllI
    com.microblink.view.surface.ICameraView$OnCameraTapListener llIIlIlIIl -> llIIlIlIIl
    com.microblink.view.CameraAspectMode IlIllIlIIl -> IlIllIlIIl
    com.microblink.hardware.camera.llIIlIlIIl IlIllIlIIl -> IlIllIlIIl
    int lIIIlIIllI -> lIIIlIIllI
    android.view.SurfaceHolder$Callback llIIlIlIIl -> llIIlIlIIl
    int IIllllllll -> IIllllllll
    int IlIIIlIIIl -> IlIIIlIIIl
    int llllIllllI -> llllIllllI
    int IIIIlIllIl -> IIIIlIllIl
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void setAspectMode(com.microblink.view.CameraAspectMode) -> setAspectMode
    void setPreviewSize(int,int) -> setPreviewSize
    void setRotation(int) -> setRotation
    int getVisibleWidth() -> getVisibleWidth
    int getVisibleHeight() -> getVisibleHeight
    android.view.View getView() -> getView
    void installCallback(com.microblink.hardware.camera.lIlIIIIlIl) -> installCallback
    void removeCallback() -> removeCallback
    void setHostActivityOrientation(int) -> setHostActivityOrientation
    void setOnCameraTapListener(com.microblink.view.surface.ICameraView$OnCameraTapListener) -> setOnCameraTapListener
    android.graphics.Rect convertRectangleToActualRect(com.microblink.geometry.Rectangle) -> convertRectangleToActualRect
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
com.microblink.view.surface.IlIllIlIIl$1 -> com.microblink.view.surface.IlIllIlIIl$1:
    com.microblink.view.surface.IlIllIlIIl llIIlIlIIl -> llIIlIlIIl
    void run() -> run
com.microblink.view.surface.llIIlIlIIl -> com.microblink.view.surface.llIIlIlIIl:
    com.microblink.view.surface.ICameraView llIIlIlIIl(android.content.Context,com.microblink.hardware.camera.lIlIIIIlIl) -> llIIlIlIIl
com.microblink.view.viewfinder.IlIllIlIIl -> com.microblink.view.viewfinder.IlIllIlIIl:
    android.graphics.Paint mPaint -> mPaint
    android.graphics.Rect[] llIIIlllll -> llIIIlllll
    void setRectangles(android.graphics.Rect[]) -> setRectangles
    void onDraw(android.graphics.Canvas) -> onDraw
com.microblink.view.viewfinder.OcrLineViewfinder -> com.microblink.view.viewfinder.OcrLineViewfinder:
    int llIIllIlII -> llIIllIlII
    int lIIIIIllll -> lIIIIIllll
    int mHeight -> mHeight
    int lllIIIllII -> lllIIIllII
    int IlIIlllIll -> IlIIlllIll
    int IIllllllll -> IIllllllll
    int IlIIIlIIIl -> IlIIIlIIIl
    int IIIIlIllIl -> IIIIlIllIl
    int llllIllllI -> llllIllllI
    com.microblink.geometry.Quadrilateral llIIlIlIIl -> llIIlIlIIl
    com.microblink.geometry.Quadrilateral IlIllIlIIl -> IlIllIlIIl
    android.content.res.Resources llIIlIlIIl -> llIIlIlIIl
    com.microblink.nineoldandroids.animation.ValueAnimator llIIlIlIIl -> llIIlIlIIl
    int IIlIIlIllI -> IIlIIlIllI
    android.os.Handler mHandler -> mHandler
    com.microblink.util.FakeR mR -> mR
    com.microblink.geometry.quadDrawers.QuadrilateralDrawer llIIlIlIIl -> llIIlIlIIl
    void setHostActivityOrientation(int) -> setHostActivityOrientation
    void setNewTarget(com.microblink.geometry.Quadrilateral) -> setNewTarget
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onDraw(android.graphics.Canvas) -> onDraw
    void onAnimationUpdate(com.microblink.nineoldandroids.animation.ValueAnimator) -> onAnimationUpdate
com.microblink.view.viewfinder.OcrResultView -> com.microblink.view.viewfinder.OcrResultView:
    java.util.concurrent.ConcurrentMap llIIlIlIIl -> llIIlIlIIl
    int lIIIIIllll -> lIIIIIllll
    int mHeight -> mHeight
    com.microblink.util.FakeR mR -> mR
    android.graphics.Paint mPaint -> mPaint
    com.microblink.nineoldandroids.animation.ArgbEvaluator llIIlIlIIl -> llIIlIlIIl
    int IIllllIIlI -> IIllllIIlI
    int IlllllIIIl -> IlllllIIIl
    int IIllIIllll -> IIllIIllll
    int IIlIIlIllI -> IIlIIlIllI
    void setHostActivityOrientation(int) -> setHostActivityOrientation
    void onLayout(boolean,int,int,int,int) -> onLayout
    void addOcrResult(com.microblink.results.ocr.OcrResult) -> addOcrResult
    void clearOcrResults() -> clearOcrResults
    void llIIlIlIIl(android.graphics.Canvas,com.microblink.results.ocr.OcrResult) -> llIIlIlIIl
    int llIIlIlIIl(int) -> llIIlIlIIl
    void llIIlIlIIl(android.graphics.Canvas,com.microblink.results.ocr.OcrChar) -> llIIlIlIIl
    void onDraw(android.graphics.Canvas) -> onDraw
com.microblink.view.viewfinder.PointSetView -> com.microblink.view.viewfinder.PointSetView:
    android.graphics.Paint mPaint -> mPaint
    int lIIIIIllll -> lIIIIIllll
    int mHeight -> mHeight
    int lIlIllIIlI -> lIlIllIIlI
    com.microblink.geometry.PointSet llIIlIlIIl -> llIIlIlIIl
    com.microblink.geometry.PointSet IlIllIlIIl -> IlIllIlIIl
    com.microblink.nineoldandroids.animation.ValueAnimator llIIlIlIIl -> llIIlIlIIl
    android.os.Handler mHandler -> mHandler
    int IIIlllIlII -> IIIlllIlII
    int IlllIlllll -> IlllIlllll
    com.microblink.view.viewfinder.PointSetView$llIIlIlIIl llIIlIlIIl -> llIIlIlIIl
    void onAnimationUpdate(com.microblink.nineoldandroids.animation.ValueAnimator) -> onAnimationUpdate
    boolean isAnimationInProgress() -> isAnimationInProgress
    void setPointSet(com.microblink.geometry.PointSet) -> setPointSet
    void startAnimation() -> startAnimation
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onDraw(android.graphics.Canvas) -> onDraw
    com.microblink.nineoldandroids.animation.ValueAnimator llIIlIlIIl(com.microblink.view.viewfinder.PointSetView) -> llIIlIlIIl
    com.microblink.nineoldandroids.animation.ValueAnimator llIIlIlIIl(com.microblink.view.viewfinder.PointSetView,com.microblink.nineoldandroids.animation.ValueAnimator) -> llIIlIlIIl
    int llIIlIlIIl(com.microblink.view.viewfinder.PointSetView) -> llIIlIlIIl
    int IlIllIlIIl(com.microblink.view.viewfinder.PointSetView) -> IlIllIlIIl
com.microblink.view.viewfinder.PointSetView$1 -> com.microblink.view.viewfinder.PointSetView$1:
    com.microblink.view.viewfinder.PointSetView llIIlIlIIl -> llIIlIlIIl
    void run() -> run
com.microblink.view.viewfinder.PointSetView$IlIllIlIIl -> com.microblink.view.viewfinder.PointSetView$IlIllIlIIl:
    com.microblink.nineoldandroids.animation.ArgbEvaluator IlIllIlIIl -> IlIllIlIIl
    com.microblink.view.viewfinder.PointSetView llIIlIlIIl -> llIIlIlIIl
    com.microblink.view.viewfinder.PointSetView$llIIlIlIIl llIIlIlIIl(float,com.microblink.view.viewfinder.PointSetView$llIIlIlIIl,com.microblink.view.viewfinder.PointSetView$llIIlIlIIl) -> llIIlIlIIl
    java.lang.Object evaluate(float,java.lang.Object,java.lang.Object) -> evaluate
com.microblink.view.viewfinder.PointSetView$llIIlIlIIl -> com.microblink.view.viewfinder.PointSetView$llIIlIlIIl:
    int lIIIIIllIl -> lIIIIIllIl
    int lIllIlIlIl -> lIllIlIlIl
    com.microblink.view.viewfinder.PointSetView llIIlIlIIl -> llIIlIlIIl
com.microblink.view.viewfinder.QuadView -> com.microblink.view.viewfinder.QuadView:
    double llIIlIlIIl -> llIIlIlIIl
    double IlIllIlIIl -> IlIllIlIIl
    int lIIIIIllll -> lIIIIIllll
    int mHeight -> mHeight
    int IIllllllll -> IIllllllll
    int IlIIIlIIIl -> IlIIIlIIIl
    int IIIIlIllIl -> IIIIlIllIl
    int llllIllllI -> llllIllllI
    long IlIllIlIIl -> IlIllIlIIl
    com.microblink.geometry.Quadrilateral llIIlIlIIl -> llIIlIlIIl
    com.microblink.geometry.Quadrilateral IlIllIlIIl -> IlIllIlIIl
    com.microblink.geometry.quadDrawers.IQuadrilateralDrawer llIIlIlIIl -> llIIlIlIIl
    android.content.res.Resources llIIlIlIIl -> llIIlIlIIl
    com.microblink.nineoldandroids.animation.ValueAnimator llIIlIlIIl -> llIIlIlIIl
    int IIlIIlIllI -> IIlIIlIllI
    boolean IIlIIlIllI -> IIlIIlIllI
    android.os.Handler mHandler -> mHandler
    boolean llIIllIlII -> llIIllIlII
    com.microblink.util.FakeR mR -> mR
    void setMovable(boolean) -> setMovable
    void setHostActivityOrientation(int) -> setHostActivityOrientation
    com.microblink.geometry.quadDrawers.IQuadrilateralDrawer getQuadDrawer() -> getQuadDrawer
    void setMirrored(boolean) -> setMirrored
    boolean isAnimationInProgress() -> isAnimationInProgress
    void setDefaultTarget() -> setDefaultTarget
    void startAnimation() -> startAnimation
    void setAnimationDuration(long) -> setAnimationDuration
    void setNewTarget(com.microblink.geometry.Quadrilateral) -> setNewTarget
    void publishDetectionStatus(com.microblink.view.recognition.DetectionStatus) -> publishDetectionStatus
    void onLayout(boolean,int,int,int,int) -> onLayout
    void animateToNewDefault(double,double) -> animateToNewDefault
    void onDraw(android.graphics.Canvas) -> onDraw
    void onAnimationUpdate(com.microblink.nineoldandroids.animation.ValueAnimator) -> onAnimationUpdate
    com.microblink.nineoldandroids.animation.ValueAnimator llIIlIlIIl(com.microblink.view.viewfinder.QuadView) -> llIIlIlIIl
    com.microblink.nineoldandroids.animation.ValueAnimator llIIlIlIIl(com.microblink.view.viewfinder.QuadView,com.microblink.nineoldandroids.animation.ValueAnimator) -> llIIlIlIIl
    com.microblink.geometry.Quadrilateral llIIlIlIIl(com.microblink.view.viewfinder.QuadView) -> llIIlIlIIl
    com.microblink.geometry.Quadrilateral IlIllIlIIl(com.microblink.view.viewfinder.QuadView) -> IlIllIlIIl
    long llIIlIlIIl(com.microblink.view.viewfinder.QuadView) -> llIIlIlIIl
com.microblink.view.viewfinder.QuadView$1 -> com.microblink.view.viewfinder.QuadView$1:
    com.microblink.view.viewfinder.QuadView llIIlIlIIl -> llIIlIlIIl
    void run() -> run
com.microblink.view.viewfinder.llIIlIlIIl -> com.microblink.view.viewfinder.llIIlIlIIl:
    android.graphics.Matrix llIIlIlIIl -> llIIlIlIIl
    com.microblink.hardware.orientation.Orientation IllIIIIllI -> IllIIIIllI
    com.microblink.hardware.orientation.Orientation lIlIIIIlIl -> lIlIIIIlIl
    boolean IIlIlIIlll -> IIlIlIIlll
    int lIIlllIIlI -> lIIlllIIlI
    int IIlIIlIllI -> IIlIIlIllI
    void setAnimateRotation(boolean) -> setAnimateRotation
    void setAnimationDuration(int) -> setAnimationDuration
    void setInitialOrientation(com.microblink.hardware.orientation.Orientation) -> setInitialOrientation
    void setHostActivityOrientation(int) -> setHostActivityOrientation
    com.microblink.hardware.orientation.Orientation llIIlIlIIl(com.microblink.hardware.orientation.Orientation) -> llIIlIlIIl
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    boolean dispatchTouchEvent(android.view.MotionEvent) -> dispatchTouchEvent
    android.view.animation.Animation llIIlIlIIl(com.microblink.hardware.orientation.Orientation,com.microblink.hardware.orientation.Orientation) -> llIIlIlIIl
    void onDraw(android.graphics.Canvas) -> onDraw
    void IIlIlIIlll() -> IIlIlIIlll
    void setOrientation(com.microblink.hardware.orientation.Orientation) -> setOrientation
com.microblink.view.viewfinder.llIIlIlIIl$llIIlIlIIl -> com.microblink.view.viewfinder.llIIlIlIIl$llIIlIlIIl:
    float llIIlIIIll -> llIIlIIIll
    float IlIIlllIIl -> IlIIlllIIl
    float llIllIIlll -> llIllIIlll
    float lllllIlIll -> lllllIlIll
    float lIlllIlIlI -> lIlllIlIlI
    float lIllIIlIIl -> lIllIIlIIl
    com.microblink.view.viewfinder.llIIlIlIIl IlIllIlIIl -> IlIllIlIIl
    void applyTransformation(float,android.view.animation.Transformation) -> applyTransformation
cvlib.base.Rect -> cvlib.base.Rect:
    int a -> a
    int b -> b
    int c -> c
    int d -> d
cvlib.base.RectInvoke -> cvlib.base.RectInvoke:
    long a -> a
    long a() -> a
    cvlib.base.Rect b() -> b
    long ncreateRect() -> ncreateRect
    int[] ngetRect(long) -> ngetRect
    void nsetRect(long,int,int[]) -> nsetRect
cvlib.zcard.CardViewMode -> cvlib.zcard.CardViewMode:
cvlib.zcard.ZPassport -> cvlib.zcard.ZPassport:
    long a -> a
    void a() -> a
    boolean a(int,int,double,int) -> a
    cvlib.base.RectInvoke b() -> b
    cvlib.base.RectInvoke c() -> c
    boolean d() -> d
    boolean e() -> e
    boolean f() -> f
    boolean g() -> g
    boolean h() -> h
    boolean a(byte[]) -> a
    int[] a(byte[],int) -> a
    int i() -> i
    int j() -> j
    long ncreatePassport() -> ncreatePassport
    void ndestroyPassport(long) -> ndestroyPassport
    boolean ninitPassport(long,int,int,double,int) -> ninitPassport
    boolean nflagInitPassport(long) -> nflagInitPassport
    void ngetSearchRegionPassport(long,long) -> ngetSearchRegionPassport
    void ngetMRZRegionPassport(long,long) -> ngetMRZRegionPassport
    boolean ndetectPassport(long,byte[]) -> ndetectPassport
    boolean nisTouchedLeftPassport(long) -> nisTouchedLeftPassport
    boolean nisTouchedRightPassport(long) -> nisTouchedRightPassport
    boolean nisTouchedUpPassport(long) -> nisTouchedUpPassport
    boolean nisTouchedDownPassport(long) -> nisTouchedDownPassport
    boolean nisUsefulPassport(long) -> nisUsefulPassport
    int[] ncropPassport(long,byte[],int) -> ncropPassport
    int ngetCropWidth(long) -> ngetCropWidth
    int ngetCropHeight(long) -> ngetCropHeight
cvlib.zcard.zcardany -> cvlib.zcard.zcardany:
    void create() -> create
    void release() -> release
    int detectBuffer(int[],int,int) -> detectBuffer
    int detect(java.lang.String) -> detect
    int[] crop(int) -> crop
    int getCropWidth() -> getCropWidth
    int getCropHeight() -> getCropHeight
org.apache.http.auth.AUTH -> org.apache.http.auth.AUTH:
    java.lang.String WWW_AUTH -> WWW_AUTH
    java.lang.String WWW_AUTH_RESP -> WWW_AUTH_RESP
    java.lang.String PROXY_AUTH -> PROXY_AUTH
    java.lang.String PROXY_AUTH_RESP -> PROXY_AUTH_RESP
org.apache.http.auth.AuthOption -> org.apache.http.auth.AuthOption:
    org.apache.http.auth.AuthScheme authScheme -> authScheme
    org.apache.http.auth.Credentials creds -> creds
    org.apache.http.auth.AuthScheme getAuthScheme() -> getAuthScheme
    org.apache.http.auth.Credentials getCredentials() -> getCredentials
    java.lang.String toString() -> toString
org.apache.http.auth.AuthProtocolState -> org.apache.http.auth.AuthProtocolState:
    org.apache.http.auth.AuthProtocolState UNCHALLENGED -> UNCHALLENGED
    org.apache.http.auth.AuthProtocolState CHALLENGED -> CHALLENGED
    org.apache.http.auth.AuthProtocolState HANDSHAKE -> HANDSHAKE
    org.apache.http.auth.AuthProtocolState FAILURE -> FAILURE
    org.apache.http.auth.AuthProtocolState SUCCESS -> SUCCESS
    org.apache.http.auth.AuthProtocolState[] $VALUES -> $VALUES
    org.apache.http.auth.AuthProtocolState[] values() -> values
    org.apache.http.auth.AuthProtocolState valueOf(java.lang.String) -> valueOf
org.apache.http.auth.AuthScheme -> org.apache.http.auth.AuthScheme:
    void processChallenge(org.apache.http.Header) -> processChallenge
    java.lang.String getSchemeName() -> getSchemeName
    java.lang.String getParameter(java.lang.String) -> getParameter
    java.lang.String getRealm() -> getRealm
    boolean isConnectionBased() -> isConnectionBased
    boolean isComplete() -> isComplete
    org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest) -> authenticate
org.apache.http.auth.AuthSchemeFactory -> org.apache.http.auth.AuthSchemeFactory:
    org.apache.http.auth.AuthScheme newInstance(org.apache.http.params.HttpParams) -> newInstance
org.apache.http.auth.AuthSchemeRegistry -> org.apache.http.auth.AuthSchemeRegistry:
    java.util.concurrent.ConcurrentHashMap registeredSchemes -> registeredSchemes
    void register(java.lang.String,org.apache.http.auth.AuthSchemeFactory) -> register
    void unregister(java.lang.String) -> unregister
    org.apache.http.auth.AuthScheme getAuthScheme(java.lang.String,org.apache.http.params.HttpParams) -> getAuthScheme
    java.util.List getSchemeNames() -> getSchemeNames
    void setItems(java.util.Map) -> setItems
org.apache.http.auth.AuthScope -> org.apache.http.auth.AuthScope:
    java.lang.String ANY_HOST -> ANY_HOST
    int ANY_PORT -> ANY_PORT
    java.lang.String ANY_REALM -> ANY_REALM
    java.lang.String ANY_SCHEME -> ANY_SCHEME
    org.apache.http.auth.AuthScope ANY -> ANY
    java.lang.String scheme -> scheme
    java.lang.String realm -> realm
    java.lang.String host -> host
    int port -> port
    java.lang.String getHost() -> getHost
    int getPort() -> getPort
    java.lang.String getRealm() -> getRealm
    java.lang.String getScheme() -> getScheme
    int match(org.apache.http.auth.AuthScope) -> match
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
org.apache.http.auth.AuthState -> org.apache.http.auth.AuthState:
    org.apache.http.auth.AuthProtocolState state -> state
    org.apache.http.auth.AuthScheme authScheme -> authScheme
    org.apache.http.auth.AuthScope authScope -> authScope
    org.apache.http.auth.Credentials credentials -> credentials
    java.util.Queue authOptions -> authOptions
    void reset() -> reset
    org.apache.http.auth.AuthProtocolState getState() -> getState
    void setState(org.apache.http.auth.AuthProtocolState) -> setState
    org.apache.http.auth.AuthScheme getAuthScheme() -> getAuthScheme
    org.apache.http.auth.Credentials getCredentials() -> getCredentials
    void update(org.apache.http.auth.AuthScheme,org.apache.http.auth.Credentials) -> update
    java.util.Queue getAuthOptions() -> getAuthOptions
    boolean hasAuthOptions() -> hasAuthOptions
    void update(java.util.Queue) -> update
    void invalidate() -> invalidate
    boolean isValid() -> isValid
    void setAuthScheme(org.apache.http.auth.AuthScheme) -> setAuthScheme
    void setCredentials(org.apache.http.auth.Credentials) -> setCredentials
    org.apache.http.auth.AuthScope getAuthScope() -> getAuthScope
    void setAuthScope(org.apache.http.auth.AuthScope) -> setAuthScope
    java.lang.String toString() -> toString
org.apache.http.auth.AuthenticationException -> org.apache.http.auth.AuthenticationException:
    long serialVersionUID -> serialVersionUID
org.apache.http.auth.BasicUserPrincipal -> org.apache.http.auth.BasicUserPrincipal:
    long serialVersionUID -> serialVersionUID
    java.lang.String username -> username
    java.lang.String getName() -> getName
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
org.apache.http.auth.ChallengeState -> org.apache.http.auth.ChallengeState:
    org.apache.http.auth.ChallengeState TARGET -> TARGET
    org.apache.http.auth.ChallengeState PROXY -> PROXY
    org.apache.http.auth.ChallengeState[] $VALUES -> $VALUES
    org.apache.http.auth.ChallengeState[] values() -> values
    org.apache.http.auth.ChallengeState valueOf(java.lang.String) -> valueOf
org.apache.http.auth.ContextAwareAuthScheme -> org.apache.http.auth.ContextAwareAuthScheme:
    org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> authenticate
org.apache.http.auth.Credentials -> org.apache.http.auth.Credentials:
    java.security.Principal getUserPrincipal() -> getUserPrincipal
    java.lang.String getPassword() -> getPassword
org.apache.http.auth.InvalidCredentialsException -> org.apache.http.auth.InvalidCredentialsException:
    long serialVersionUID -> serialVersionUID
org.apache.http.auth.MalformedChallengeException -> org.apache.http.auth.MalformedChallengeException:
    long serialVersionUID -> serialVersionUID
org.apache.http.auth.NTCredentials -> org.apache.http.auth.NTCredentials:
    long serialVersionUID -> serialVersionUID
    org.apache.http.auth.NTUserPrincipal principal -> principal
    java.lang.String password -> password
    java.lang.String workstation -> workstation
    java.security.Principal getUserPrincipal() -> getUserPrincipal
    java.lang.String getUserName() -> getUserName
    java.lang.String getPassword() -> getPassword
    java.lang.String getDomain() -> getDomain
    java.lang.String getWorkstation() -> getWorkstation
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
org.apache.http.auth.NTUserPrincipal -> org.apache.http.auth.NTUserPrincipal:
    long serialVersionUID -> serialVersionUID
    java.lang.String username -> username
    java.lang.String domain -> domain
    java.lang.String ntname -> ntname
    java.lang.String getName() -> getName
    java.lang.String getDomain() -> getDomain
    java.lang.String getUsername() -> getUsername
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
org.apache.http.auth.UsernamePasswordCredentials -> org.apache.http.auth.UsernamePasswordCredentials:
    long serialVersionUID -> serialVersionUID
    org.apache.http.auth.BasicUserPrincipal principal -> principal
    java.lang.String password -> password
    java.security.Principal getUserPrincipal() -> getUserPrincipal
    java.lang.String getUserName() -> getUserName
    java.lang.String getPassword() -> getPassword
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
org.apache.http.auth.params.AuthPNames -> org.apache.http.auth.params.AuthPNames:
    java.lang.String CREDENTIAL_CHARSET -> CREDENTIAL_CHARSET
    java.lang.String TARGET_AUTH_PREF -> TARGET_AUTH_PREF
    java.lang.String PROXY_AUTH_PREF -> PROXY_AUTH_PREF
org.apache.http.auth.params.AuthParamBean -> org.apache.http.auth.params.AuthParamBean:
    void setCredentialCharset(java.lang.String) -> setCredentialCharset
org.apache.http.auth.params.AuthParams -> org.apache.http.auth.params.AuthParams:
    java.lang.String getCredentialCharset(org.apache.http.params.HttpParams) -> getCredentialCharset
    void setCredentialCharset(org.apache.http.params.HttpParams,java.lang.String) -> setCredentialCharset
org.apache.http.client.AuthCache -> org.apache.http.client.AuthCache:
    void put(org.apache.http.HttpHost,org.apache.http.auth.AuthScheme) -> put
    org.apache.http.auth.AuthScheme get(org.apache.http.HttpHost) -> get
    void remove(org.apache.http.HttpHost) -> remove
    void clear() -> clear
org.apache.http.client.AuthenticationHandler -> org.apache.http.client.AuthenticationHandler:
    boolean isAuthenticationRequested(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> isAuthenticationRequested
    java.util.Map getChallenges(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> getChallenges
    org.apache.http.auth.AuthScheme selectScheme(java.util.Map,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> selectScheme
org.apache.http.client.AuthenticationStrategy -> org.apache.http.client.AuthenticationStrategy:
    boolean isAuthenticationRequested(org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> isAuthenticationRequested
    java.util.Map getChallenges(org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> getChallenges
    java.util.Queue select(java.util.Map,org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> select
    void authSucceeded(org.apache.http.HttpHost,org.apache.http.auth.AuthScheme,org.apache.http.protocol.HttpContext) -> authSucceeded
    void authFailed(org.apache.http.HttpHost,org.apache.http.auth.AuthScheme,org.apache.http.protocol.HttpContext) -> authFailed
org.apache.http.client.BackoffManager -> org.apache.http.client.BackoffManager:
    void backOff(org.apache.http.conn.routing.HttpRoute) -> backOff
    void probe(org.apache.http.conn.routing.HttpRoute) -> probe
org.apache.http.client.CircularRedirectException -> org.apache.http.client.CircularRedirectException:
    long serialVersionUID -> serialVersionUID
org.apache.http.client.ClientProtocolException -> org.apache.http.client.ClientProtocolException:
    long serialVersionUID -> serialVersionUID
org.apache.http.client.ConnectionBackoffStrategy -> org.apache.http.client.ConnectionBackoffStrategy:
    boolean shouldBackoff(java.lang.Throwable) -> shouldBackoff
    boolean shouldBackoff(org.apache.http.HttpResponse) -> shouldBackoff
org.apache.http.client.CookieStore -> org.apache.http.client.CookieStore:
    void addCookie(org.apache.http.cookie.Cookie) -> addCookie
    java.util.List getCookies() -> getCookies
    boolean clearExpired(java.util.Date) -> clearExpired
    void clear() -> clear
org.apache.http.client.CredentialsProvider -> org.apache.http.client.CredentialsProvider:
    void setCredentials(org.apache.http.auth.AuthScope,org.apache.http.auth.Credentials) -> setCredentials
    org.apache.http.auth.Credentials getCredentials(org.apache.http.auth.AuthScope) -> getCredentials
    void clear() -> clear
org.apache.http.client.HttpClient -> org.apache.http.client.HttpClient:
    org.apache.http.params.HttpParams getParams() -> getParams
    org.apache.http.conn.ClientConnectionManager getConnectionManager() -> getConnectionManager
    org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest) -> execute
    org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext) -> execute
    org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest) -> execute
    org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> execute
    java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler) -> execute
    java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext) -> execute
    java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler) -> execute
    java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext) -> execute
org.apache.http.client.HttpRequestRetryHandler -> org.apache.http.client.HttpRequestRetryHandler:
    boolean retryRequest(java.io.IOException,int,org.apache.http.protocol.HttpContext) -> retryRequest
org.apache.http.client.HttpResponseException -> org.apache.http.client.HttpResponseException:
    long serialVersionUID -> serialVersionUID
    int statusCode -> statusCode
    int getStatusCode() -> getStatusCode
org.apache.http.client.NonRepeatableRequestException -> org.apache.http.client.NonRepeatableRequestException:
    long serialVersionUID -> serialVersionUID
org.apache.http.client.RedirectException -> org.apache.http.client.RedirectException:
    long serialVersionUID -> serialVersionUID
org.apache.http.client.RedirectHandler -> org.apache.http.client.RedirectHandler:
    boolean isRedirectRequested(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> isRedirectRequested
    java.net.URI getLocationURI(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> getLocationURI
org.apache.http.client.RedirectStrategy -> org.apache.http.client.RedirectStrategy:
    boolean isRedirected(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> isRedirected
    org.apache.http.client.methods.HttpUriRequest getRedirect(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> getRedirect
org.apache.http.client.RequestDirector -> org.apache.http.client.RequestDirector:
    org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> execute
org.apache.http.client.ResponseHandler -> org.apache.http.client.ResponseHandler:
    java.lang.Object handleResponse(org.apache.http.HttpResponse) -> handleResponse
org.apache.http.client.ServiceUnavailableRetryStrategy -> org.apache.http.client.ServiceUnavailableRetryStrategy:
    boolean retryRequest(org.apache.http.HttpResponse,int,org.apache.http.protocol.HttpContext) -> retryRequest
    long getRetryInterval() -> getRetryInterval
org.apache.http.client.UserTokenHandler -> org.apache.http.client.UserTokenHandler:
    java.lang.Object getUserToken(org.apache.http.protocol.HttpContext) -> getUserToken
org.apache.http.client.entity.DecompressingEntity -> org.apache.http.client.entity.DecompressingEntity:
    int BUFFER_SIZE -> BUFFER_SIZE
    java.io.InputStream content -> content
    java.io.InputStream decorate(java.io.InputStream) -> decorate
    java.io.InputStream getDecompressingStream() -> getDecompressingStream
    java.io.InputStream getContent() -> getContent
    void writeTo(java.io.OutputStream) -> writeTo
org.apache.http.client.entity.DeflateDecompressingEntity -> org.apache.http.client.entity.DeflateDecompressingEntity:
    java.io.InputStream decorate(java.io.InputStream) -> decorate
    org.apache.http.Header getContentEncoding() -> getContentEncoding
    long getContentLength() -> getContentLength
org.apache.http.client.entity.DeflateDecompressingEntity$DeflateStream -> org.apache.http.client.entity.DeflateDecompressingEntity$DeflateStream:
    boolean closed -> a
    void close() -> close
org.apache.http.client.entity.GzipDecompressingEntity -> org.apache.http.client.entity.GzipDecompressingEntity:
    java.io.InputStream decorate(java.io.InputStream) -> decorate
    org.apache.http.Header getContentEncoding() -> getContentEncoding
    long getContentLength() -> getContentLength
org.apache.http.client.entity.UrlEncodedFormEntity -> org.apache.http.client.entity.UrlEncodedFormEntity:
org.apache.http.client.methods.AbortableHttpRequest -> org.apache.http.client.methods.AbortableHttpRequest:
    void setConnectionRequest(org.apache.http.conn.ClientConnectionRequest) -> setConnectionRequest
    void setReleaseTrigger(org.apache.http.conn.ConnectionReleaseTrigger) -> setReleaseTrigger
    void abort() -> abort
org.apache.http.client.methods.HttpDelete -> org.apache.http.client.methods.HttpDelete:
    java.lang.String METHOD_NAME -> METHOD_NAME
    java.lang.String getMethod() -> getMethod
org.apache.http.client.methods.HttpEntityEnclosingRequestBase -> org.apache.http.client.methods.HttpEntityEnclosingRequestBase:
    org.apache.http.HttpEntity entity -> entity
    org.apache.http.HttpEntity getEntity() -> getEntity
    void setEntity(org.apache.http.HttpEntity) -> setEntity
    boolean expectContinue() -> expectContinue
    java.lang.Object clone() -> clone
org.apache.http.client.methods.HttpGet -> org.apache.http.client.methods.HttpGet:
    java.lang.String METHOD_NAME -> METHOD_NAME
    java.lang.String getMethod() -> getMethod
org.apache.http.client.methods.HttpHead -> org.apache.http.client.methods.HttpHead:
    java.lang.String METHOD_NAME -> METHOD_NAME
    java.lang.String getMethod() -> getMethod
org.apache.http.client.methods.HttpOptions -> org.apache.http.client.methods.HttpOptions:
    java.lang.String METHOD_NAME -> METHOD_NAME
    java.lang.String getMethod() -> getMethod
    java.util.Set getAllowedMethods(org.apache.http.HttpResponse) -> getAllowedMethods
org.apache.http.client.methods.HttpPatch -> org.apache.http.client.methods.HttpPatch:
    java.lang.String METHOD_NAME -> METHOD_NAME
    java.lang.String getMethod() -> getMethod
org.apache.http.client.methods.HttpPost -> org.apache.http.client.methods.HttpPost:
    java.lang.String METHOD_NAME -> METHOD_NAME
    java.lang.String getMethod() -> getMethod
org.apache.http.client.methods.HttpPut -> org.apache.http.client.methods.HttpPut:
    java.lang.String METHOD_NAME -> METHOD_NAME
    java.lang.String getMethod() -> getMethod
org.apache.http.client.methods.HttpRequestBase -> org.apache.http.client.methods.HttpRequestBase:
    java.util.concurrent.locks.Lock abortLock -> abortLock
    boolean aborted -> aborted
    java.net.URI uri -> uri
    org.apache.http.conn.ClientConnectionRequest connRequest -> connRequest
    org.apache.http.conn.ConnectionReleaseTrigger releaseTrigger -> releaseTrigger
    java.lang.String getMethod() -> getMethod
    org.apache.http.ProtocolVersion getProtocolVersion() -> getProtocolVersion
    java.net.URI getURI() -> getURI
    org.apache.http.RequestLine getRequestLine() -> getRequestLine
    void setURI(java.net.URI) -> setURI
    void setConnectionRequest(org.apache.http.conn.ClientConnectionRequest) -> setConnectionRequest
    void setReleaseTrigger(org.apache.http.conn.ConnectionReleaseTrigger) -> setReleaseTrigger
    void cleanup() -> cleanup
    void abort() -> abort
    boolean isAborted() -> isAborted
    void reset() -> reset
    void releaseConnection() -> releaseConnection
    java.lang.Object clone() -> clone
    java.lang.String toString() -> toString
org.apache.http.client.methods.HttpTrace -> org.apache.http.client.methods.HttpTrace:
    java.lang.String METHOD_NAME -> METHOD_NAME
    java.lang.String getMethod() -> getMethod
org.apache.http.client.methods.HttpUriRequest -> org.apache.http.client.methods.HttpUriRequest:
    java.lang.String getMethod() -> getMethod
    java.net.URI getURI() -> getURI
    void abort() -> abort
    boolean isAborted() -> isAborted
org.apache.http.client.params.AllClientPNames -> org.apache.http.client.params.AllClientPNames:
org.apache.http.client.params.AuthPolicy -> org.apache.http.client.params.AuthPolicy:
    java.lang.String NTLM -> NTLM
    java.lang.String DIGEST -> DIGEST
    java.lang.String BASIC -> BASIC
    java.lang.String SPNEGO -> SPNEGO
    java.lang.String KERBEROS -> KERBEROS
org.apache.http.client.params.ClientPNames -> org.apache.http.client.params.ClientPNames:
    java.lang.String CONNECTION_MANAGER_FACTORY_CLASS_NAME -> CONNECTION_MANAGER_FACTORY_CLASS_NAME
    java.lang.String HANDLE_REDIRECTS -> HANDLE_REDIRECTS
    java.lang.String REJECT_RELATIVE_REDIRECT -> REJECT_RELATIVE_REDIRECT
    java.lang.String MAX_REDIRECTS -> MAX_REDIRECTS
    java.lang.String ALLOW_CIRCULAR_REDIRECTS -> ALLOW_CIRCULAR_REDIRECTS
    java.lang.String HANDLE_AUTHENTICATION -> HANDLE_AUTHENTICATION
    java.lang.String COOKIE_POLICY -> COOKIE_POLICY
    java.lang.String VIRTUAL_HOST -> VIRTUAL_HOST
    java.lang.String DEFAULT_HEADERS -> DEFAULT_HEADERS
    java.lang.String DEFAULT_HOST -> DEFAULT_HOST
    java.lang.String CONN_MANAGER_TIMEOUT -> CONN_MANAGER_TIMEOUT
org.apache.http.client.params.ClientParamBean -> org.apache.http.client.params.ClientParamBean:
    void setConnectionManagerFactoryClassName(java.lang.String) -> setConnectionManagerFactoryClassName
    void setHandleRedirects(boolean) -> setHandleRedirects
    void setRejectRelativeRedirect(boolean) -> setRejectRelativeRedirect
    void setMaxRedirects(int) -> setMaxRedirects
    void setAllowCircularRedirects(boolean) -> setAllowCircularRedirects
    void setHandleAuthentication(boolean) -> setHandleAuthentication
    void setCookiePolicy(java.lang.String) -> setCookiePolicy
    void setVirtualHost(org.apache.http.HttpHost) -> setVirtualHost
    void setDefaultHeaders(java.util.Collection) -> setDefaultHeaders
    void setDefaultHost(org.apache.http.HttpHost) -> setDefaultHost
    void setConnectionManagerTimeout(long) -> setConnectionManagerTimeout
org.apache.http.client.params.CookiePolicy -> org.apache.http.client.params.CookiePolicy:
    java.lang.String BROWSER_COMPATIBILITY -> BROWSER_COMPATIBILITY
    java.lang.String NETSCAPE -> NETSCAPE
    java.lang.String RFC_2109 -> RFC_2109
    java.lang.String RFC_2965 -> RFC_2965
    java.lang.String BEST_MATCH -> BEST_MATCH
    java.lang.String IGNORE_COOKIES -> IGNORE_COOKIES
org.apache.http.client.params.HttpClientParams -> org.apache.http.client.params.HttpClientParams:
    boolean isRedirecting(org.apache.http.params.HttpParams) -> isRedirecting
    void setRedirecting(org.apache.http.params.HttpParams,boolean) -> setRedirecting
    boolean isAuthenticating(org.apache.http.params.HttpParams) -> isAuthenticating
    void setAuthenticating(org.apache.http.params.HttpParams,boolean) -> setAuthenticating
    java.lang.String getCookiePolicy(org.apache.http.params.HttpParams) -> getCookiePolicy
    void setCookiePolicy(org.apache.http.params.HttpParams,java.lang.String) -> setCookiePolicy
    void setConnectionManagerTimeout(org.apache.http.params.HttpParams,long) -> setConnectionManagerTimeout
    long getConnectionManagerTimeout(org.apache.http.params.HttpParams) -> getConnectionManagerTimeout
org.apache.http.client.protocol.ClientContext -> org.apache.http.client.protocol.ClientContext:
    java.lang.String SCHEME_REGISTRY -> SCHEME_REGISTRY
    java.lang.String COOKIESPEC_REGISTRY -> COOKIESPEC_REGISTRY
    java.lang.String COOKIE_SPEC -> COOKIE_SPEC
    java.lang.String COOKIE_ORIGIN -> COOKIE_ORIGIN
    java.lang.String COOKIE_STORE -> COOKIE_STORE
    java.lang.String AUTHSCHEME_REGISTRY -> AUTHSCHEME_REGISTRY
    java.lang.String CREDS_PROVIDER -> CREDS_PROVIDER
    java.lang.String AUTH_CACHE -> AUTH_CACHE
    java.lang.String TARGET_AUTH_STATE -> TARGET_AUTH_STATE
    java.lang.String PROXY_AUTH_STATE -> PROXY_AUTH_STATE
    java.lang.String AUTH_SCHEME_PREF -> AUTH_SCHEME_PREF
    java.lang.String USER_TOKEN -> USER_TOKEN
org.apache.http.client.protocol.ClientContextConfigurer -> org.apache.http.client.protocol.ClientContextConfigurer:
    org.apache.http.protocol.HttpContext context -> context
    void setCookieSpecRegistry(org.apache.http.cookie.CookieSpecRegistry) -> setCookieSpecRegistry
    void setAuthSchemeRegistry(org.apache.http.auth.AuthSchemeRegistry) -> setAuthSchemeRegistry
    void setCookieStore(org.apache.http.client.CookieStore) -> setCookieStore
    void setCredentialsProvider(org.apache.http.client.CredentialsProvider) -> setCredentialsProvider
org.apache.http.client.protocol.RequestAcceptEncoding -> org.apache.http.client.protocol.RequestAcceptEncoding:
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
org.apache.http.client.protocol.RequestAddCookies -> org.apache.http.client.protocol.RequestAddCookies:
    org.apache.commons.logging.Log log -> log
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
org.apache.http.client.protocol.RequestAuthCache -> org.apache.http.client.protocol.RequestAuthCache:
    org.apache.commons.logging.Log log -> log
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
    void doPreemptiveAuth(org.apache.http.HttpHost,org.apache.http.auth.AuthScheme,org.apache.http.auth.AuthState,org.apache.http.client.CredentialsProvider) -> doPreemptiveAuth
org.apache.http.client.protocol.RequestAuthenticationBase -> org.apache.http.client.protocol.RequestAuthenticationBase:
    org.apache.commons.logging.Log log -> log
    void process(org.apache.http.auth.AuthState,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
    void ensureAuthScheme(org.apache.http.auth.AuthScheme) -> ensureAuthScheme
    org.apache.http.Header authenticate(org.apache.http.auth.AuthScheme,org.apache.http.auth.Credentials,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> authenticate
org.apache.http.client.protocol.RequestAuthenticationBase$1 -> org.apache.http.client.protocol.RequestAuthenticationBase$1:
    int[] $SwitchMap$org$apache$http$auth$AuthProtocolState -> a
org.apache.http.client.protocol.RequestClientConnControl -> org.apache.http.client.protocol.RequestClientConnControl:
    org.apache.commons.logging.Log log -> log
    java.lang.String PROXY_CONN_DIRECTIVE -> PROXY_CONN_DIRECTIVE
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
org.apache.http.client.protocol.RequestDefaultHeaders -> org.apache.http.client.protocol.RequestDefaultHeaders:
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
org.apache.http.client.protocol.RequestProxyAuthentication -> org.apache.http.client.protocol.RequestProxyAuthentication:
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
org.apache.http.client.protocol.RequestTargetAuthentication -> org.apache.http.client.protocol.RequestTargetAuthentication:
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
org.apache.http.client.protocol.ResponseAuthCache -> org.apache.http.client.protocol.ResponseAuthCache:
    org.apache.commons.logging.Log log -> log
    void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> process
    boolean isCachable(org.apache.http.auth.AuthState) -> isCachable
    void cache(org.apache.http.client.AuthCache,org.apache.http.HttpHost,org.apache.http.auth.AuthScheme) -> cache
    void uncache(org.apache.http.client.AuthCache,org.apache.http.HttpHost,org.apache.http.auth.AuthScheme) -> uncache
org.apache.http.client.protocol.ResponseAuthCache$1 -> org.apache.http.client.protocol.ResponseAuthCache$1:
    int[] $SwitchMap$org$apache$http$auth$AuthProtocolState -> a
org.apache.http.client.protocol.ResponseContentEncoding -> org.apache.http.client.protocol.ResponseContentEncoding:
    java.lang.String UNCOMPRESSED -> UNCOMPRESSED
    void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> process
org.apache.http.client.protocol.ResponseProcessCookies -> org.apache.http.client.protocol.ResponseProcessCookies:
    org.apache.commons.logging.Log log -> log
    void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> process
    void processCookies(org.apache.http.HeaderIterator,org.apache.http.cookie.CookieSpec,org.apache.http.cookie.CookieOrigin,org.apache.http.client.CookieStore) -> processCookies
org.apache.http.client.utils.CloneUtils -> org.apache.http.client.utils.CloneUtils:
    java.lang.Object clone(java.lang.Object) -> clone
org.apache.http.client.utils.HttpClientUtils -> org.apache.http.client.utils.HttpClientUtils:
    void closeQuietly(org.apache.http.HttpResponse) -> closeQuietly
    void closeQuietly(org.apache.http.client.HttpClient) -> closeQuietly
org.apache.http.client.utils.Idn -> org.apache.http.client.utils.Idn:
    java.lang.String toUnicode(java.lang.String) -> toUnicode
org.apache.http.client.utils.JdkIdn -> org.apache.http.client.utils.JdkIdn:
    java.lang.reflect.Method toUnicode -> toUnicode
    java.lang.String toUnicode(java.lang.String) -> toUnicode
org.apache.http.client.utils.Punycode -> org.apache.http.client.utils.Punycode:
    org.apache.http.client.utils.Idn impl -> impl
    java.lang.String toUnicode(java.lang.String) -> toUnicode
org.apache.http.client.utils.Rfc3492Idn -> org.apache.http.client.utils.Rfc3492Idn:
    int base -> base
    int tmin -> tmin
    int tmax -> tmax
    int skew -> skew
    int damp -> damp
    int initial_bias -> initial_bias
    int initial_n -> initial_n
    char delimiter -> delimiter
    java.lang.String ACE_PREFIX -> ACE_PREFIX
    int adapt(int,int,boolean) -> adapt
    int digit(char) -> digit
    java.lang.String toUnicode(java.lang.String) -> toUnicode
    java.lang.String decode(java.lang.String) -> decode
org.apache.http.client.utils.URIBuilder -> org.apache.http.client.utils.URIBuilder:
    java.lang.String scheme -> scheme
    java.lang.String encodedSchemeSpecificPart -> encodedSchemeSpecificPart
    java.lang.String encodedAuthority -> encodedAuthority
    java.lang.String userInfo -> userInfo
    java.lang.String encodedUserInfo -> encodedUserInfo
    java.lang.String host -> host
    int port -> port
    java.lang.String path -> path
    java.lang.String encodedPath -> encodedPath
    java.lang.String encodedQuery -> encodedQuery
    java.util.List queryParams -> queryParams
    java.lang.String fragment -> fragment
    java.lang.String encodedFragment -> encodedFragment
    java.util.List parseQuery(java.lang.String,java.nio.charset.Charset) -> parseQuery
    java.net.URI build() -> build
    java.lang.String buildString() -> buildString
    void digestURI(java.net.URI) -> digestURI
    java.lang.String encodeUserInfo(java.lang.String) -> encodeUserInfo
    java.lang.String encodePath(java.lang.String) -> encodePath
    java.lang.String encodeQuery(java.util.List) -> encodeQuery
    java.lang.String encodeFragment(java.lang.String) -> encodeFragment
    org.apache.http.client.utils.URIBuilder setScheme(java.lang.String) -> setScheme
    org.apache.http.client.utils.URIBuilder setUserInfo(java.lang.String) -> setUserInfo
    org.apache.http.client.utils.URIBuilder setUserInfo(java.lang.String,java.lang.String) -> setUserInfo
    org.apache.http.client.utils.URIBuilder setHost(java.lang.String) -> setHost
    org.apache.http.client.utils.URIBuilder setPort(int) -> setPort
    org.apache.http.client.utils.URIBuilder setPath(java.lang.String) -> setPath
    org.apache.http.client.utils.URIBuilder removeQuery() -> removeQuery
    org.apache.http.client.utils.URIBuilder setQuery(java.lang.String) -> setQuery
    org.apache.http.client.utils.URIBuilder addParameter(java.lang.String,java.lang.String) -> addParameter
    org.apache.http.client.utils.URIBuilder setParameter(java.lang.String,java.lang.String) -> setParameter
    org.apache.http.client.utils.URIBuilder setFragment(java.lang.String) -> setFragment
    java.lang.String getScheme() -> getScheme
    java.lang.String getUserInfo() -> getUserInfo
    java.lang.String getHost() -> getHost
    int getPort() -> getPort
    java.lang.String getPath() -> getPath
    java.util.List getQueryParams() -> getQueryParams
    java.lang.String getFragment() -> getFragment
    java.lang.String toString() -> toString
    java.lang.String normalizePath(java.lang.String) -> normalizePath
org.apache.http.client.utils.URIUtils -> org.apache.http.client.utils.URIUtils:
    java.net.URI createURI(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String) -> createURI
    java.net.URI rewriteURI(java.net.URI,org.apache.http.HttpHost,boolean) -> rewriteURI
    java.net.URI rewriteURI(java.net.URI,org.apache.http.HttpHost) -> rewriteURI
    java.net.URI rewriteURI(java.net.URI) -> rewriteURI
    java.net.URI resolve(java.net.URI,java.lang.String) -> resolve
    java.net.URI resolve(java.net.URI,java.net.URI) -> resolve
    java.net.URI resolveReferenceStartingWithQueryString(java.net.URI,java.net.URI) -> resolveReferenceStartingWithQueryString
    java.net.URI removeDotSegments(java.net.URI) -> removeDotSegments
    org.apache.http.HttpHost extractHost(java.net.URI) -> extractHost
org.apache.http.client.utils.URLEncodedUtils -> org.apache.http.client.utils.URLEncodedUtils:
    java.lang.String CONTENT_TYPE -> CONTENT_TYPE
    java.lang.String PARAMETER_SEPARATOR -> PARAMETER_SEPARATOR
    java.lang.String NAME_VALUE_SEPARATOR -> NAME_VALUE_SEPARATOR
    char[] DELIM -> DELIM
    java.util.BitSet UNRESERVED -> UNRESERVED
    java.util.BitSet PUNCT -> PUNCT
    java.util.BitSet USERINFO -> USERINFO
    java.util.BitSet PATHSAFE -> PATHSAFE
    java.util.BitSet FRAGMENT -> FRAGMENT
    java.util.BitSet RESERVED -> RESERVED
    java.util.BitSet URLENCODER -> URLENCODER
    int RADIX -> RADIX
    java.util.List parse(java.net.URI,java.lang.String) -> parse
    java.util.List parse(org.apache.http.HttpEntity) -> parse
    boolean isEncoded(org.apache.http.HttpEntity) -> isEncoded
    void parse(java.util.List,java.util.Scanner,java.lang.String) -> parse
    java.util.List parse(java.lang.String,java.nio.charset.Charset) -> parse
    java.lang.String format(java.util.List,java.lang.String) -> format
    java.lang.String format(java.lang.Iterable,java.nio.charset.Charset) -> format
    java.lang.String urlencode(java.lang.String,java.nio.charset.Charset,java.util.BitSet,boolean) -> urlencode
    java.lang.String urldecode(java.lang.String,java.nio.charset.Charset,boolean) -> urldecode
    java.lang.String decodeFormFields(java.lang.String,java.lang.String) -> decodeFormFields
    java.lang.String decodeFormFields(java.lang.String,java.nio.charset.Charset) -> decodeFormFields
    java.lang.String encodeFormFields(java.lang.String,java.lang.String) -> encodeFormFields
    java.lang.String encodeFormFields(java.lang.String,java.nio.charset.Charset) -> encodeFormFields
    java.lang.String encUserInfo(java.lang.String,java.nio.charset.Charset) -> encUserInfo
    java.lang.String encFragment(java.lang.String,java.nio.charset.Charset) -> encFragment
    java.lang.String encPath(java.lang.String,java.nio.charset.Charset) -> encPath
org.apache.http.conn.BasicEofSensorWatcher -> org.apache.http.conn.BasicEofSensorWatcher:
    org.apache.http.conn.ManagedClientConnection managedConn -> managedConn
    boolean attemptReuse -> attemptReuse
    boolean eofDetected(java.io.InputStream) -> eofDetected
    boolean streamClosed(java.io.InputStream) -> streamClosed
    boolean streamAbort(java.io.InputStream) -> streamAbort
org.apache.http.conn.BasicManagedEntity -> org.apache.http.conn.BasicManagedEntity:
    org.apache.http.conn.ManagedClientConnection managedConn -> managedConn
    boolean attemptReuse -> attemptReuse
    boolean isRepeatable() -> isRepeatable
    java.io.InputStream getContent() -> getContent
    void ensureConsumed() -> ensureConsumed
    void consumeContent() -> consumeContent
    void writeTo(java.io.OutputStream) -> writeTo
    void releaseConnection() -> releaseConnection
    void abortConnection() -> abortConnection
    boolean eofDetected(java.io.InputStream) -> eofDetected
    boolean streamClosed(java.io.InputStream) -> streamClosed
    boolean streamAbort(java.io.InputStream) -> streamAbort
    void releaseManagedConnection() -> releaseManagedConnection
org.apache.http.conn.ClientConnectionManager -> org.apache.http.conn.ClientConnectionManager:
    org.apache.http.conn.scheme.SchemeRegistry getSchemeRegistry() -> getSchemeRegistry
    org.apache.http.conn.ClientConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object) -> requestConnection
    void releaseConnection(org.apache.http.conn.ManagedClientConnection,long,java.util.concurrent.TimeUnit) -> releaseConnection
    void closeIdleConnections(long,java.util.concurrent.TimeUnit) -> closeIdleConnections
    void closeExpiredConnections() -> closeExpiredConnections
    void shutdown() -> shutdown
org.apache.http.conn.ClientConnectionManagerFactory -> org.apache.http.conn.ClientConnectionManagerFactory:
    org.apache.http.conn.ClientConnectionManager newInstance(org.apache.http.params.HttpParams,org.apache.http.conn.scheme.SchemeRegistry) -> newInstance
org.apache.http.conn.ClientConnectionOperator -> org.apache.http.conn.ClientConnectionOperator:
    org.apache.http.conn.OperatedClientConnection createConnection() -> createConnection
    void openConnection(org.apache.http.conn.OperatedClientConnection,org.apache.http.HttpHost,java.net.InetAddress,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams) -> openConnection
    void updateSecureConnection(org.apache.http.conn.OperatedClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams) -> updateSecureConnection
org.apache.http.conn.ClientConnectionRequest -> org.apache.http.conn.ClientConnectionRequest:
    org.apache.http.conn.ManagedClientConnection getConnection(long,java.util.concurrent.TimeUnit) -> getConnection
    void abortRequest() -> abortRequest
org.apache.http.conn.ConnectTimeoutException -> org.apache.http.conn.ConnectTimeoutException:
    long serialVersionUID -> serialVersionUID
org.apache.http.conn.ConnectionKeepAliveStrategy -> org.apache.http.conn.ConnectionKeepAliveStrategy:
    long getKeepAliveDuration(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> getKeepAliveDuration
org.apache.http.conn.ConnectionPoolTimeoutException -> org.apache.http.conn.ConnectionPoolTimeoutException:
    long serialVersionUID -> serialVersionUID
org.apache.http.conn.ConnectionReleaseTrigger -> org.apache.http.conn.ConnectionReleaseTrigger:
    void releaseConnection() -> releaseConnection
    void abortConnection() -> abortConnection
org.apache.http.conn.DnsResolver -> org.apache.http.conn.DnsResolver:
    java.net.InetAddress[] resolve(java.lang.String) -> resolve
org.apache.http.conn.EofSensorInputStream -> org.apache.http.conn.EofSensorInputStream:
    java.io.InputStream wrappedStream -> wrappedStream
    boolean selfClosed -> selfClosed
    org.apache.http.conn.EofSensorWatcher eofWatcher -> eofWatcher
    boolean isReadAllowed() -> isReadAllowed
    int read() -> read
    int read(byte[],int,int) -> read
    int read(byte[]) -> read
    int available() -> available
    void close() -> close
    void checkEOF(int) -> checkEOF
    void checkClose() -> checkClose
    void checkAbort() -> checkAbort
    void releaseConnection() -> releaseConnection
    void abortConnection() -> abortConnection
org.apache.http.conn.EofSensorWatcher -> org.apache.http.conn.EofSensorWatcher:
    boolean eofDetected(java.io.InputStream) -> eofDetected
    boolean streamClosed(java.io.InputStream) -> streamClosed
    boolean streamAbort(java.io.InputStream) -> streamAbort
org.apache.http.conn.HttpHostConnectException -> org.apache.http.conn.HttpHostConnectException:
    long serialVersionUID -> serialVersionUID
    org.apache.http.HttpHost host -> host
    org.apache.http.HttpHost getHost() -> getHost
org.apache.http.conn.HttpInetSocketAddress -> org.apache.http.conn.HttpInetSocketAddress:
    long serialVersionUID -> serialVersionUID
    org.apache.http.HttpHost httphost -> httphost
    org.apache.http.HttpHost getHttpHost() -> getHttpHost
    java.lang.String toString() -> toString
org.apache.http.conn.HttpRoutedConnection -> org.apache.http.conn.HttpRoutedConnection:
    boolean isSecure() -> isSecure
    org.apache.http.conn.routing.HttpRoute getRoute() -> getRoute
    javax.net.ssl.SSLSession getSSLSession() -> getSSLSession
org.apache.http.conn.ManagedClientConnection -> org.apache.http.conn.ManagedClientConnection:
    boolean isSecure() -> isSecure
    org.apache.http.conn.routing.HttpRoute getRoute() -> getRoute
    javax.net.ssl.SSLSession getSSLSession() -> getSSLSession
    void open(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams) -> open
    void tunnelTarget(boolean,org.apache.http.params.HttpParams) -> tunnelTarget
    void tunnelProxy(org.apache.http.HttpHost,boolean,org.apache.http.params.HttpParams) -> tunnelProxy
    void layerProtocol(org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams) -> layerProtocol
    void markReusable() -> markReusable
    void unmarkReusable() -> unmarkReusable
    boolean isMarkedReusable() -> isMarkedReusable
    void setState(java.lang.Object) -> setState
    java.lang.Object getState() -> getState
    void setIdleDuration(long,java.util.concurrent.TimeUnit) -> setIdleDuration
org.apache.http.conn.MultihomePlainSocketFactory -> org.apache.http.conn.MultihomePlainSocketFactory:
    org.apache.http.conn.MultihomePlainSocketFactory DEFAULT_FACTORY -> DEFAULT_FACTORY
    org.apache.http.conn.MultihomePlainSocketFactory getSocketFactory() -> getSocketFactory
    java.net.Socket createSocket() -> createSocket
    java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams) -> connectSocket
    boolean isSecure(java.net.Socket) -> isSecure
org.apache.http.conn.OperatedClientConnection -> org.apache.http.conn.OperatedClientConnection:
    org.apache.http.HttpHost getTargetHost() -> getTargetHost
    boolean isSecure() -> isSecure
    java.net.Socket getSocket() -> getSocket
    void opening(java.net.Socket,org.apache.http.HttpHost) -> opening
    void openCompleted(boolean,org.apache.http.params.HttpParams) -> openCompleted
    void update(java.net.Socket,org.apache.http.HttpHost,boolean,org.apache.http.params.HttpParams) -> update
org.apache.http.conn.params.ConnConnectionPNames -> org.apache.http.conn.params.ConnConnectionPNames:
    java.lang.String MAX_STATUS_LINE_GARBAGE -> MAX_STATUS_LINE_GARBAGE
org.apache.http.conn.params.ConnConnectionParamBean -> org.apache.http.conn.params.ConnConnectionParamBean:
    void setMaxStatusLineGarbage(int) -> setMaxStatusLineGarbage
org.apache.http.conn.params.ConnManagerPNames -> org.apache.http.conn.params.ConnManagerPNames:
    java.lang.String TIMEOUT -> TIMEOUT
    java.lang.String MAX_CONNECTIONS_PER_ROUTE -> MAX_CONNECTIONS_PER_ROUTE
    java.lang.String MAX_TOTAL_CONNECTIONS -> MAX_TOTAL_CONNECTIONS
org.apache.http.conn.params.ConnManagerParamBean -> org.apache.http.conn.params.ConnManagerParamBean:
    void setTimeout(long) -> setTimeout
    void setMaxTotalConnections(int) -> setMaxTotalConnections
    void setConnectionsPerRoute(org.apache.http.conn.params.ConnPerRouteBean) -> setConnectionsPerRoute
org.apache.http.conn.params.ConnManagerParams -> org.apache.http.conn.params.ConnManagerParams:
    int DEFAULT_MAX_TOTAL_CONNECTIONS -> DEFAULT_MAX_TOTAL_CONNECTIONS
    org.apache.http.conn.params.ConnPerRoute DEFAULT_CONN_PER_ROUTE -> DEFAULT_CONN_PER_ROUTE
    long getTimeout(org.apache.http.params.HttpParams) -> getTimeout
    void setTimeout(org.apache.http.params.HttpParams,long) -> setTimeout
    void setMaxConnectionsPerRoute(org.apache.http.params.HttpParams,org.apache.http.conn.params.ConnPerRoute) -> setMaxConnectionsPerRoute
    org.apache.http.conn.params.ConnPerRoute getMaxConnectionsPerRoute(org.apache.http.params.HttpParams) -> getMaxConnectionsPerRoute
    void setMaxTotalConnections(org.apache.http.params.HttpParams,int) -> setMaxTotalConnections
    int getMaxTotalConnections(org.apache.http.params.HttpParams) -> getMaxTotalConnections
org.apache.http.conn.params.ConnManagerParams$1 -> org.apache.http.conn.params.ConnManagerParams$1:
    int getMaxForRoute(org.apache.http.conn.routing.HttpRoute) -> getMaxForRoute
org.apache.http.conn.params.ConnPerRoute -> org.apache.http.conn.params.ConnPerRoute:
    int getMaxForRoute(org.apache.http.conn.routing.HttpRoute) -> getMaxForRoute
org.apache.http.conn.params.ConnPerRouteBean -> org.apache.http.conn.params.ConnPerRouteBean:
    int DEFAULT_MAX_CONNECTIONS_PER_ROUTE -> DEFAULT_MAX_CONNECTIONS_PER_ROUTE
    java.util.concurrent.ConcurrentHashMap maxPerHostMap -> maxPerHostMap
    int defaultMax -> defaultMax
    int getDefaultMax() -> getDefaultMax
    int getDefaultMaxPerRoute() -> getDefaultMaxPerRoute
    void setDefaultMaxPerRoute(int) -> setDefaultMaxPerRoute
    void setMaxForRoute(org.apache.http.conn.routing.HttpRoute,int) -> setMaxForRoute
    int getMaxForRoute(org.apache.http.conn.routing.HttpRoute) -> getMaxForRoute
    void setMaxForRoutes(java.util.Map) -> setMaxForRoutes
    java.lang.String toString() -> toString
org.apache.http.conn.params.ConnRoutePNames -> org.apache.http.conn.params.ConnRoutePNames:
    java.lang.String DEFAULT_PROXY -> DEFAULT_PROXY
    java.lang.String LOCAL_ADDRESS -> LOCAL_ADDRESS
    java.lang.String FORCED_ROUTE -> FORCED_ROUTE
org.apache.http.conn.params.ConnRouteParamBean -> org.apache.http.conn.params.ConnRouteParamBean:
    void setDefaultProxy(org.apache.http.HttpHost) -> setDefaultProxy
    void setLocalAddress(java.net.InetAddress) -> setLocalAddress
    void setForcedRoute(org.apache.http.conn.routing.HttpRoute) -> setForcedRoute
org.apache.http.conn.params.ConnRouteParams -> org.apache.http.conn.params.ConnRouteParams:
    org.apache.http.HttpHost NO_HOST -> NO_HOST
    org.apache.http.conn.routing.HttpRoute NO_ROUTE -> NO_ROUTE
    org.apache.http.HttpHost getDefaultProxy(org.apache.http.params.HttpParams) -> getDefaultProxy
    void setDefaultProxy(org.apache.http.params.HttpParams,org.apache.http.HttpHost) -> setDefaultProxy
    org.apache.http.conn.routing.HttpRoute getForcedRoute(org.apache.http.params.HttpParams) -> getForcedRoute
    void setForcedRoute(org.apache.http.params.HttpParams,org.apache.http.conn.routing.HttpRoute) -> setForcedRoute
    java.net.InetAddress getLocalAddress(org.apache.http.params.HttpParams) -> getLocalAddress
    void setLocalAddress(org.apache.http.params.HttpParams,java.net.InetAddress) -> setLocalAddress
org.apache.http.conn.routing.BasicRouteDirector -> org.apache.http.conn.routing.BasicRouteDirector:
    int nextStep(org.apache.http.conn.routing.RouteInfo,org.apache.http.conn.routing.RouteInfo) -> nextStep
    int firstStep(org.apache.http.conn.routing.RouteInfo) -> firstStep
    int directStep(org.apache.http.conn.routing.RouteInfo,org.apache.http.conn.routing.RouteInfo) -> directStep
    int proxiedStep(org.apache.http.conn.routing.RouteInfo,org.apache.http.conn.routing.RouteInfo) -> proxiedStep
org.apache.http.conn.routing.HttpRoute -> org.apache.http.conn.routing.HttpRoute:
    org.apache.http.HttpHost[] EMPTY_HTTP_HOST_ARRAY -> EMPTY_HTTP_HOST_ARRAY
    org.apache.http.HttpHost targetHost -> targetHost
    java.net.InetAddress localAddress -> localAddress
    org.apache.http.HttpHost[] proxyChain -> proxyChain
    org.apache.http.conn.routing.RouteInfo$TunnelType tunnelled -> tunnelled
    org.apache.http.conn.routing.RouteInfo$LayerType layered -> layered
    boolean secure -> secure
    org.apache.http.HttpHost[] toChain(org.apache.http.HttpHost) -> toChain
    org.apache.http.HttpHost[] toChain(org.apache.http.HttpHost[]) -> toChain
    org.apache.http.HttpHost getTargetHost() -> getTargetHost
    java.net.InetAddress getLocalAddress() -> getLocalAddress
    int getHopCount() -> getHopCount
    org.apache.http.HttpHost getHopTarget(int) -> getHopTarget
    org.apache.http.HttpHost getProxyHost() -> getProxyHost
    org.apache.http.conn.routing.RouteInfo$TunnelType getTunnelType() -> getTunnelType
    boolean isTunnelled() -> isTunnelled
    org.apache.http.conn.routing.RouteInfo$LayerType getLayerType() -> getLayerType
    boolean isLayered() -> isLayered
    boolean isSecure() -> isSecure
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
org.apache.http.conn.routing.HttpRouteDirector -> org.apache.http.conn.routing.HttpRouteDirector:
    int UNREACHABLE -> UNREACHABLE
    int COMPLETE -> COMPLETE
    int CONNECT_TARGET -> CONNECT_TARGET
    int CONNECT_PROXY -> CONNECT_PROXY
    int TUNNEL_TARGET -> TUNNEL_TARGET
    int TUNNEL_PROXY -> TUNNEL_PROXY
    int LAYER_PROTOCOL -> LAYER_PROTOCOL
    int nextStep(org.apache.http.conn.routing.RouteInfo,org.apache.http.conn.routing.RouteInfo) -> nextStep
org.apache.http.conn.routing.HttpRoutePlanner -> org.apache.http.conn.routing.HttpRoutePlanner:
    org.apache.http.conn.routing.HttpRoute determineRoute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> determineRoute
org.apache.http.conn.routing.RouteInfo -> org.apache.http.conn.routing.RouteInfo:
    org.apache.http.HttpHost getTargetHost() -> getTargetHost
    java.net.InetAddress getLocalAddress() -> getLocalAddress
    int getHopCount() -> getHopCount
    org.apache.http.HttpHost getHopTarget(int) -> getHopTarget
    org.apache.http.HttpHost getProxyHost() -> getProxyHost
    org.apache.http.conn.routing.RouteInfo$TunnelType getTunnelType() -> getTunnelType
    boolean isTunnelled() -> isTunnelled
    org.apache.http.conn.routing.RouteInfo$LayerType getLayerType() -> getLayerType
    boolean isLayered() -> isLayered
    boolean isSecure() -> isSecure
org.apache.http.conn.routing.RouteInfo$LayerType -> org.apache.http.conn.routing.RouteInfo$LayerType:
    org.apache.http.conn.routing.RouteInfo$LayerType PLAIN -> PLAIN
    org.apache.http.conn.routing.RouteInfo$LayerType LAYERED -> LAYERED
    org.apache.http.conn.routing.RouteInfo$LayerType[] $VALUES -> $VALUES
    org.apache.http.conn.routing.RouteInfo$LayerType[] values() -> values
    org.apache.http.conn.routing.RouteInfo$LayerType valueOf(java.lang.String) -> valueOf
org.apache.http.conn.routing.RouteInfo$TunnelType -> org.apache.http.conn.routing.RouteInfo$TunnelType:
    org.apache.http.conn.routing.RouteInfo$TunnelType PLAIN -> PLAIN
    org.apache.http.conn.routing.RouteInfo$TunnelType TUNNELLED -> TUNNELLED
    org.apache.http.conn.routing.RouteInfo$TunnelType[] $VALUES -> $VALUES
    org.apache.http.conn.routing.RouteInfo$TunnelType[] values() -> values
    org.apache.http.conn.routing.RouteInfo$TunnelType valueOf(java.lang.String) -> valueOf
org.apache.http.conn.routing.RouteTracker -> org.apache.http.conn.routing.RouteTracker:
    org.apache.http.HttpHost targetHost -> targetHost
    java.net.InetAddress localAddress -> localAddress
    boolean connected -> connected
    org.apache.http.HttpHost[] proxyChain -> proxyChain
    org.apache.http.conn.routing.RouteInfo$TunnelType tunnelled -> tunnelled
    org.apache.http.conn.routing.RouteInfo$LayerType layered -> layered
    boolean secure -> secure
    void reset() -> reset
    void connectTarget(boolean) -> connectTarget
    void connectProxy(org.apache.http.HttpHost,boolean) -> connectProxy
    void tunnelTarget(boolean) -> tunnelTarget
    void tunnelProxy(org.apache.http.HttpHost,boolean) -> tunnelProxy
    void layerProtocol(boolean) -> layerProtocol
    org.apache.http.HttpHost getTargetHost() -> getTargetHost
    java.net.InetAddress getLocalAddress() -> getLocalAddress
    int getHopCount() -> getHopCount
    org.apache.http.HttpHost getHopTarget(int) -> getHopTarget
    org.apache.http.HttpHost getProxyHost() -> getProxyHost
    boolean isConnected() -> isConnected
    org.apache.http.conn.routing.RouteInfo$TunnelType getTunnelType() -> getTunnelType
    boolean isTunnelled() -> isTunnelled
    org.apache.http.conn.routing.RouteInfo$LayerType getLayerType() -> getLayerType
    boolean isLayered() -> isLayered
    boolean isSecure() -> isSecure
    org.apache.http.conn.routing.HttpRoute toRoute() -> toRoute
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
org.apache.http.conn.scheme.HostNameResolver -> org.apache.http.conn.scheme.HostNameResolver:
    java.net.InetAddress resolve(java.lang.String) -> resolve
org.apache.http.conn.scheme.LayeredSchemeSocketFactory -> org.apache.http.conn.scheme.LayeredSchemeSocketFactory:
    java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,boolean) -> createLayeredSocket
org.apache.http.conn.scheme.LayeredSocketFactory -> org.apache.http.conn.scheme.LayeredSocketFactory:
    java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean) -> createSocket
org.apache.http.conn.scheme.LayeredSocketFactoryAdaptor -> org.apache.http.conn.scheme.LayeredSocketFactoryAdaptor:
    org.apache.http.conn.scheme.LayeredSchemeSocketFactory factory -> a
    java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean) -> createSocket
org.apache.http.conn.scheme.PlainSocketFactory -> org.apache.http.conn.scheme.PlainSocketFactory:
    org.apache.http.conn.scheme.HostNameResolver nameResolver -> nameResolver
    org.apache.http.conn.scheme.PlainSocketFactory getSocketFactory() -> getSocketFactory
    java.net.Socket createSocket(org.apache.http.params.HttpParams) -> createSocket
    java.net.Socket createSocket() -> createSocket
    java.net.Socket connectSocket(java.net.Socket,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.params.HttpParams) -> connectSocket
    boolean isSecure(java.net.Socket) -> isSecure
    java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams) -> connectSocket
org.apache.http.conn.scheme.Scheme -> org.apache.http.conn.scheme.Scheme:
    java.lang.String name -> name
    org.apache.http.conn.scheme.SchemeSocketFactory socketFactory -> socketFactory
    int defaultPort -> defaultPort
    boolean layered -> layered
    java.lang.String stringRep -> stringRep
    int getDefaultPort() -> getDefaultPort
    org.apache.http.conn.scheme.SocketFactory getSocketFactory() -> getSocketFactory
    org.apache.http.conn.scheme.SchemeSocketFactory getSchemeSocketFactory() -> getSchemeSocketFactory
    java.lang.String getName() -> getName
    boolean isLayered() -> isLayered
    int resolvePort(int) -> resolvePort
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.apache.http.conn.scheme.SchemeLayeredSocketFactory -> org.apache.http.conn.scheme.SchemeLayeredSocketFactory:
    java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.params.HttpParams) -> createLayeredSocket
org.apache.http.conn.scheme.SchemeLayeredSocketFactoryAdaptor -> org.apache.http.conn.scheme.SchemeLayeredSocketFactoryAdaptor:
    org.apache.http.conn.scheme.LayeredSocketFactory factory -> a
    java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.params.HttpParams) -> createLayeredSocket
org.apache.http.conn.scheme.SchemeLayeredSocketFactoryAdaptor2 -> org.apache.http.conn.scheme.SchemeLayeredSocketFactoryAdaptor2:
    org.apache.http.conn.scheme.LayeredSchemeSocketFactory factory -> a
    java.net.Socket createSocket(org.apache.http.params.HttpParams) -> createSocket
    java.net.Socket connectSocket(java.net.Socket,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.params.HttpParams) -> connectSocket
    boolean isSecure(java.net.Socket) -> isSecure
    java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.params.HttpParams) -> createLayeredSocket
org.apache.http.conn.scheme.SchemeRegistry -> org.apache.http.conn.scheme.SchemeRegistry:
    java.util.concurrent.ConcurrentHashMap registeredSchemes -> registeredSchemes
    org.apache.http.conn.scheme.Scheme getScheme(java.lang.String) -> getScheme
    org.apache.http.conn.scheme.Scheme getScheme(org.apache.http.HttpHost) -> getScheme
    org.apache.http.conn.scheme.Scheme get(java.lang.String) -> get
    org.apache.http.conn.scheme.Scheme register(org.apache.http.conn.scheme.Scheme) -> register
    org.apache.http.conn.scheme.Scheme unregister(java.lang.String) -> unregister
    java.util.List getSchemeNames() -> getSchemeNames
    void setItems(java.util.Map) -> setItems
org.apache.http.conn.scheme.SchemeSocketFactory -> org.apache.http.conn.scheme.SchemeSocketFactory:
    java.net.Socket createSocket(org.apache.http.params.HttpParams) -> createSocket
    java.net.Socket connectSocket(java.net.Socket,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.params.HttpParams) -> connectSocket
    boolean isSecure(java.net.Socket) -> isSecure
org.apache.http.conn.scheme.SchemeSocketFactoryAdaptor -> org.apache.http.conn.scheme.SchemeSocketFactoryAdaptor:
    org.apache.http.conn.scheme.SocketFactory factory -> a
    java.net.Socket connectSocket(java.net.Socket,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.params.HttpParams) -> connectSocket
    java.net.Socket createSocket(org.apache.http.params.HttpParams) -> createSocket
    boolean isSecure(java.net.Socket) -> isSecure
    org.apache.http.conn.scheme.SocketFactory getFactory() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.apache.http.conn.scheme.SocketFactory -> org.apache.http.conn.scheme.SocketFactory:
    java.net.Socket createSocket() -> createSocket
    java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams) -> connectSocket
    boolean isSecure(java.net.Socket) -> isSecure
org.apache.http.conn.scheme.SocketFactoryAdaptor -> org.apache.http.conn.scheme.SocketFactoryAdaptor:
    org.apache.http.conn.scheme.SchemeSocketFactory factory -> a
    java.net.Socket createSocket() -> createSocket
    java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams) -> connectSocket
    boolean isSecure(java.net.Socket) -> isSecure
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.apache.http.conn.ssl.AbstractVerifier -> org.apache.http.conn.ssl.AbstractVerifier:
    java.lang.String[] BAD_COUNTRY_2LDS -> BAD_COUNTRY_2LDS
    void verify(java.lang.String,javax.net.ssl.SSLSocket) -> verify
    boolean verify(java.lang.String,javax.net.ssl.SSLSession) -> verify
    void verify(java.lang.String,java.security.cert.X509Certificate) -> verify
    void verify(java.lang.String,java.lang.String[],java.lang.String[],boolean) -> verify
    boolean acceptableCountryWildcard(java.lang.String) -> acceptableCountryWildcard
    java.lang.String[] getCNs(java.security.cert.X509Certificate) -> getCNs
    java.lang.String[] getSubjectAlts(java.security.cert.X509Certificate,java.lang.String) -> getSubjectAlts
    java.lang.String[] getDNSSubjectAlts(java.security.cert.X509Certificate) -> getDNSSubjectAlts
    int countDots(java.lang.String) -> countDots
    boolean isIPAddress(java.lang.String) -> isIPAddress
org.apache.http.conn.ssl.AllowAllHostnameVerifier -> org.apache.http.conn.ssl.AllowAllHostnameVerifier:
    void verify(java.lang.String,java.lang.String[],java.lang.String[]) -> verify
    java.lang.String toString() -> toString
org.apache.http.conn.ssl.BrowserCompatHostnameVerifier -> org.apache.http.conn.ssl.BrowserCompatHostnameVerifier:
    void verify(java.lang.String,java.lang.String[],java.lang.String[]) -> verify
    java.lang.String toString() -> toString
org.apache.http.conn.ssl.SSLInitializationException -> org.apache.http.conn.ssl.SSLInitializationException:
    long serialVersionUID -> serialVersionUID
org.apache.http.conn.ssl.SSLSocketFactory -> org.apache.http.conn.ssl.SSLSocketFactory:
    java.lang.String TLS -> TLS
    java.lang.String SSL -> SSL
    java.lang.String SSLV2 -> SSLV2
    org.apache.http.conn.ssl.X509HostnameVerifier ALLOW_ALL_HOSTNAME_VERIFIER -> ALLOW_ALL_HOSTNAME_VERIFIER
    org.apache.http.conn.ssl.X509HostnameVerifier BROWSER_COMPATIBLE_HOSTNAME_VERIFIER -> BROWSER_COMPATIBLE_HOSTNAME_VERIFIER
    org.apache.http.conn.ssl.X509HostnameVerifier STRICT_HOSTNAME_VERIFIER -> STRICT_HOSTNAME_VERIFIER
    javax.net.ssl.SSLSocketFactory socketfactory -> socketfactory
    org.apache.http.conn.scheme.HostNameResolver nameResolver -> nameResolver
    org.apache.http.conn.ssl.X509HostnameVerifier hostnameVerifier -> hostnameVerifier
    org.apache.http.conn.ssl.SSLSocketFactory getSocketFactory() -> getSocketFactory
    org.apache.http.conn.ssl.SSLSocketFactory getSystemSocketFactory() -> getSystemSocketFactory
    javax.net.ssl.SSLContext createSSLContext(java.lang.String,java.security.KeyStore,java.lang.String,java.security.KeyStore,java.security.SecureRandom,org.apache.http.conn.ssl.TrustStrategy) -> createSSLContext
    java.net.Socket createSocket(org.apache.http.params.HttpParams) -> createSocket
    java.net.Socket createSocket() -> createSocket
    java.net.Socket connectSocket(java.net.Socket,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.params.HttpParams) -> connectSocket
    boolean isSecure(java.net.Socket) -> isSecure
    java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,org.apache.http.params.HttpParams) -> createLayeredSocket
    java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,boolean) -> createLayeredSocket
    void setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier) -> setHostnameVerifier
    org.apache.http.conn.ssl.X509HostnameVerifier getHostnameVerifier() -> getHostnameVerifier
    java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams) -> connectSocket
    java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean) -> createSocket
    void prepareSocket(javax.net.ssl.SSLSocket) -> prepareSocket
org.apache.http.conn.ssl.StrictHostnameVerifier -> org.apache.http.conn.ssl.StrictHostnameVerifier:
    void verify(java.lang.String,java.lang.String[],java.lang.String[]) -> verify
    java.lang.String toString() -> toString
org.apache.http.conn.ssl.TrustManagerDecorator -> org.apache.http.conn.ssl.TrustManagerDecorator:
    javax.net.ssl.X509TrustManager trustManager -> a
    org.apache.http.conn.ssl.TrustStrategy trustStrategy -> b
    void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkClientTrusted
    void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkServerTrusted
    java.security.cert.X509Certificate[] getAcceptedIssuers() -> getAcceptedIssuers
org.apache.http.conn.ssl.TrustSelfSignedStrategy -> org.apache.http.conn.ssl.TrustSelfSignedStrategy:
    boolean isTrusted(java.security.cert.X509Certificate[],java.lang.String) -> isTrusted
org.apache.http.conn.ssl.TrustStrategy -> org.apache.http.conn.ssl.TrustStrategy:
    boolean isTrusted(java.security.cert.X509Certificate[],java.lang.String) -> isTrusted
org.apache.http.conn.ssl.X509HostnameVerifier -> org.apache.http.conn.ssl.X509HostnameVerifier:
    void verify(java.lang.String,javax.net.ssl.SSLSocket) -> verify
    void verify(java.lang.String,java.security.cert.X509Certificate) -> verify
    void verify(java.lang.String,java.lang.String[],java.lang.String[]) -> verify
org.apache.http.conn.util.InetAddressUtils -> org.apache.http.conn.util.InetAddressUtils:
    java.util.regex.Pattern IPV4_PATTERN -> IPV4_PATTERN
    java.util.regex.Pattern IPV6_STD_PATTERN -> IPV6_STD_PATTERN
    java.util.regex.Pattern IPV6_HEX_COMPRESSED_PATTERN -> IPV6_HEX_COMPRESSED_PATTERN
    char COLON_CHAR -> COLON_CHAR
    int MAX_COLON_COUNT -> MAX_COLON_COUNT
    boolean isIPv4Address(java.lang.String) -> isIPv4Address
    boolean isIPv6StdAddress(java.lang.String) -> isIPv6StdAddress
    boolean isIPv6HexCompressedAddress(java.lang.String) -> isIPv6HexCompressedAddress
    boolean isIPv6Address(java.lang.String) -> isIPv6Address
org.apache.http.cookie.ClientCookie -> org.apache.http.cookie.ClientCookie:
    java.lang.String VERSION_ATTR -> VERSION_ATTR
    java.lang.String PATH_ATTR -> PATH_ATTR
    java.lang.String DOMAIN_ATTR -> DOMAIN_ATTR
    java.lang.String MAX_AGE_ATTR -> MAX_AGE_ATTR
    java.lang.String SECURE_ATTR -> SECURE_ATTR
    java.lang.String COMMENT_ATTR -> COMMENT_ATTR
    java.lang.String EXPIRES_ATTR -> EXPIRES_ATTR
    java.lang.String PORT_ATTR -> PORT_ATTR
    java.lang.String COMMENTURL_ATTR -> COMMENTURL_ATTR
    java.lang.String DISCARD_ATTR -> DISCARD_ATTR
    java.lang.String getAttribute(java.lang.String) -> getAttribute
    boolean containsAttribute(java.lang.String) -> containsAttribute
org.apache.http.cookie.Cookie -> org.apache.http.cookie.Cookie:
    java.lang.String getName() -> getName
    java.lang.String getValue() -> getValue
    java.lang.String getComment() -> getComment
    java.lang.String getCommentURL() -> getCommentURL
    java.util.Date getExpiryDate() -> getExpiryDate
    boolean isPersistent() -> isPersistent
    java.lang.String getDomain() -> getDomain
    java.lang.String getPath() -> getPath
    int[] getPorts() -> getPorts
    boolean isSecure() -> isSecure
    int getVersion() -> getVersion
    boolean isExpired(java.util.Date) -> isExpired
org.apache.http.cookie.CookieAttributeHandler -> org.apache.http.cookie.CookieAttributeHandler:
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
org.apache.http.cookie.CookieIdentityComparator -> org.apache.http.cookie.CookieIdentityComparator:
    long serialVersionUID -> serialVersionUID
    int compare(org.apache.http.cookie.Cookie,org.apache.http.cookie.Cookie) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
org.apache.http.cookie.CookieOrigin -> org.apache.http.cookie.CookieOrigin:
    java.lang.String host -> host
    int port -> port
    java.lang.String path -> path
    boolean secure -> secure
    java.lang.String getHost() -> getHost
    java.lang.String getPath() -> getPath
    int getPort() -> getPort
    boolean isSecure() -> isSecure
    java.lang.String toString() -> toString
org.apache.http.cookie.CookiePathComparator -> org.apache.http.cookie.CookiePathComparator:
    long serialVersionUID -> serialVersionUID
    java.lang.String normalizePath(org.apache.http.cookie.Cookie) -> normalizePath
    int compare(org.apache.http.cookie.Cookie,org.apache.http.cookie.Cookie) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
org.apache.http.cookie.CookieRestrictionViolationException -> org.apache.http.cookie.CookieRestrictionViolationException:
    long serialVersionUID -> serialVersionUID
org.apache.http.cookie.CookieSpec -> org.apache.http.cookie.CookieSpec:
    int getVersion() -> getVersion
    java.util.List parse(org.apache.http.Header,org.apache.http.cookie.CookieOrigin) -> parse
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
    java.util.List formatCookies(java.util.List) -> formatCookies
    org.apache.http.Header getVersionHeader() -> getVersionHeader
org.apache.http.cookie.CookieSpecFactory -> org.apache.http.cookie.CookieSpecFactory:
    org.apache.http.cookie.CookieSpec newInstance(org.apache.http.params.HttpParams) -> newInstance
org.apache.http.cookie.CookieSpecRegistry -> org.apache.http.cookie.CookieSpecRegistry:
    java.util.concurrent.ConcurrentHashMap registeredSpecs -> registeredSpecs
    void register(java.lang.String,org.apache.http.cookie.CookieSpecFactory) -> register
    void unregister(java.lang.String) -> unregister
    org.apache.http.cookie.CookieSpec getCookieSpec(java.lang.String,org.apache.http.params.HttpParams) -> getCookieSpec
    org.apache.http.cookie.CookieSpec getCookieSpec(java.lang.String) -> getCookieSpec
    java.util.List getSpecNames() -> getSpecNames
    void setItems(java.util.Map) -> setItems
org.apache.http.cookie.MalformedCookieException -> org.apache.http.cookie.MalformedCookieException:
    long serialVersionUID -> serialVersionUID
org.apache.http.cookie.SM -> org.apache.http.cookie.SM:
    java.lang.String COOKIE -> COOKIE
    java.lang.String COOKIE2 -> COOKIE2
    java.lang.String SET_COOKIE -> SET_COOKIE
    java.lang.String SET_COOKIE2 -> SET_COOKIE2
org.apache.http.cookie.SetCookie -> org.apache.http.cookie.SetCookie:
    void setValue(java.lang.String) -> setValue
    void setComment(java.lang.String) -> setComment
    void setExpiryDate(java.util.Date) -> setExpiryDate
    void setDomain(java.lang.String) -> setDomain
    void setPath(java.lang.String) -> setPath
    void setSecure(boolean) -> setSecure
    void setVersion(int) -> setVersion
org.apache.http.cookie.SetCookie2 -> org.apache.http.cookie.SetCookie2:
    void setCommentURL(java.lang.String) -> setCommentURL
    void setPorts(int[]) -> setPorts
    void setDiscard(boolean) -> setDiscard
org.apache.http.cookie.params.CookieSpecPNames -> org.apache.http.cookie.params.CookieSpecPNames:
    java.lang.String DATE_PATTERNS -> DATE_PATTERNS
    java.lang.String SINGLE_COOKIE_HEADER -> SINGLE_COOKIE_HEADER
org.apache.http.cookie.params.CookieSpecParamBean -> org.apache.http.cookie.params.CookieSpecParamBean:
    void setDatePatterns(java.util.Collection) -> setDatePatterns
    void setSingleHeader(boolean) -> setSingleHeader
org.apache.http.entity.mime.FormBodyPart -> org.apache.http.entity.mime.FormBodyPart:
    java.lang.String name -> name
    org.apache.http.entity.mime.Header header -> header
    org.apache.http.entity.mime.content.ContentBody body -> body
    java.lang.String getName() -> getName
    org.apache.http.entity.mime.content.ContentBody getBody() -> getBody
    org.apache.http.entity.mime.Header getHeader() -> getHeader
    void addField(java.lang.String,java.lang.String) -> addField
    void generateContentDisp(org.apache.http.entity.mime.content.ContentBody) -> generateContentDisp
    void generateContentType(org.apache.http.entity.mime.content.ContentBody) -> generateContentType
    void generateTransferEncoding(org.apache.http.entity.mime.content.ContentBody) -> generateTransferEncoding
org.apache.http.entity.mime.Header -> org.apache.http.entity.mime.Header:
    java.util.List fields -> fields
    java.util.Map fieldMap -> fieldMap
    void addField(org.apache.http.entity.mime.MinimalField) -> addField
    java.util.List getFields() -> getFields
    org.apache.http.entity.mime.MinimalField getField(java.lang.String) -> getField
    java.util.List getFields(java.lang.String) -> getFields
    int removeFields(java.lang.String) -> removeFields
    void setField(org.apache.http.entity.mime.MinimalField) -> setField
    java.util.Iterator iterator() -> iterator
    java.lang.String toString() -> toString
org.apache.http.entity.mime.HttpMultipart -> org.apache.http.entity.mime.HttpMultipart:
    org.apache.http.util.ByteArrayBuffer FIELD_SEP -> FIELD_SEP
    org.apache.http.util.ByteArrayBuffer CR_LF -> CR_LF
    org.apache.http.util.ByteArrayBuffer TWO_DASHES -> TWO_DASHES
    java.lang.String subType -> subType
    java.nio.charset.Charset charset -> charset
    java.lang.String boundary -> boundary
    java.util.List parts -> parts
    org.apache.http.entity.mime.HttpMultipartMode mode -> mode
    org.apache.http.util.ByteArrayBuffer encode(java.nio.charset.Charset,java.lang.String) -> encode
    void writeBytes(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream) -> writeBytes
    void writeBytes(java.lang.String,java.nio.charset.Charset,java.io.OutputStream) -> writeBytes
    void writeBytes(java.lang.String,java.io.OutputStream) -> writeBytes
    void writeField(org.apache.http.entity.mime.MinimalField,java.io.OutputStream) -> writeField
    void writeField(org.apache.http.entity.mime.MinimalField,java.nio.charset.Charset,java.io.OutputStream) -> writeField
    java.lang.String getSubType() -> getSubType
    java.nio.charset.Charset getCharset() -> getCharset
    org.apache.http.entity.mime.HttpMultipartMode getMode() -> getMode
    java.util.List getBodyParts() -> getBodyParts
    void addBodyPart(org.apache.http.entity.mime.FormBodyPart) -> addBodyPart
    java.lang.String getBoundary() -> getBoundary
    void doWriteTo(org.apache.http.entity.mime.HttpMultipartMode,java.io.OutputStream,boolean) -> doWriteTo
    void writeTo(java.io.OutputStream) -> writeTo
    long getTotalLength() -> getTotalLength
org.apache.http.entity.mime.HttpMultipart$1 -> org.apache.http.entity.mime.HttpMultipart$1:
    int[] $SwitchMap$org$apache$http$entity$mime$HttpMultipartMode -> a
org.apache.http.entity.mime.HttpMultipartMode -> org.apache.http.entity.mime.HttpMultipartMode:
    org.apache.http.entity.mime.HttpMultipartMode STRICT -> STRICT
    org.apache.http.entity.mime.HttpMultipartMode BROWSER_COMPATIBLE -> BROWSER_COMPATIBLE
    org.apache.http.entity.mime.HttpMultipartMode[] $VALUES -> $VALUES
    org.apache.http.entity.mime.HttpMultipartMode[] values() -> values
    org.apache.http.entity.mime.HttpMultipartMode valueOf(java.lang.String) -> valueOf
org.apache.http.entity.mime.MIME -> org.apache.http.entity.mime.MIME:
    java.lang.String CONTENT_TYPE -> CONTENT_TYPE
    java.lang.String CONTENT_TRANSFER_ENC -> CONTENT_TRANSFER_ENC
    java.lang.String CONTENT_DISPOSITION -> CONTENT_DISPOSITION
    java.lang.String ENC_8BIT -> ENC_8BIT
    java.lang.String ENC_BINARY -> ENC_BINARY
    java.nio.charset.Charset DEFAULT_CHARSET -> DEFAULT_CHARSET
org.apache.http.entity.mime.MinimalField -> org.apache.http.entity.mime.MinimalField:
    java.lang.String name -> name
    java.lang.String value -> value
    java.lang.String getName() -> getName
    java.lang.String getBody() -> getBody
    java.lang.String toString() -> toString
org.apache.http.entity.mime.MultipartEntity -> org.apache.http.entity.mime.MultipartEntity:
    char[] MULTIPART_CHARS -> MULTIPART_CHARS
    org.apache.http.entity.mime.HttpMultipart multipart -> multipart
    org.apache.http.Header contentType -> contentType
    long length -> length
    boolean dirty -> dirty
    java.lang.String generateContentType(java.lang.String,java.nio.charset.Charset) -> generateContentType
    java.lang.String generateBoundary() -> generateBoundary
    void addPart(org.apache.http.entity.mime.FormBodyPart) -> addPart
    void addPart(java.lang.String,org.apache.http.entity.mime.content.ContentBody) -> addPart
    boolean isRepeatable() -> isRepeatable
    boolean isChunked() -> isChunked
    boolean isStreaming() -> isStreaming
    long getContentLength() -> getContentLength
    org.apache.http.Header getContentType() -> getContentType
    org.apache.http.Header getContentEncoding() -> getContentEncoding
    void consumeContent() -> consumeContent
    java.io.InputStream getContent() -> getContent
    void writeTo(java.io.OutputStream) -> writeTo
org.apache.http.entity.mime.content.AbstractContentBody -> org.apache.http.entity.mime.content.AbstractContentBody:
    java.lang.String mimeType -> mimeType
    java.lang.String mediaType -> mediaType
    java.lang.String subType -> subType
    java.lang.String getMimeType() -> getMimeType
    java.lang.String getMediaType() -> getMediaType
    java.lang.String getSubType() -> getSubType
org.apache.http.entity.mime.content.ByteArrayBody -> org.apache.http.entity.mime.content.ByteArrayBody:
    byte[] data -> data
    java.lang.String filename -> filename
    java.lang.String getFilename() -> getFilename
    void writeTo(java.io.OutputStream) -> writeTo
    java.lang.String getCharset() -> getCharset
    java.lang.String getTransferEncoding() -> getTransferEncoding
    long getContentLength() -> getContentLength
org.apache.http.entity.mime.content.ContentBody -> org.apache.http.entity.mime.content.ContentBody:
    java.lang.String getFilename() -> getFilename
    void writeTo(java.io.OutputStream) -> writeTo
org.apache.http.entity.mime.content.ContentDescriptor -> org.apache.http.entity.mime.content.ContentDescriptor:
    java.lang.String getMimeType() -> getMimeType
    java.lang.String getMediaType() -> getMediaType
    java.lang.String getSubType() -> getSubType
    java.lang.String getCharset() -> getCharset
    java.lang.String getTransferEncoding() -> getTransferEncoding
    long getContentLength() -> getContentLength
org.apache.http.entity.mime.content.FileBody -> org.apache.http.entity.mime.content.FileBody:
    java.io.File file -> file
    java.lang.String filename -> filename
    java.lang.String charset -> charset
    java.io.InputStream getInputStream() -> getInputStream
    void writeTo(java.io.OutputStream) -> writeTo
    java.lang.String getTransferEncoding() -> getTransferEncoding
    java.lang.String getCharset() -> getCharset
    long getContentLength() -> getContentLength
    java.lang.String getFilename() -> getFilename
    java.io.File getFile() -> getFile
org.apache.http.entity.mime.content.InputStreamBody -> org.apache.http.entity.mime.content.InputStreamBody:
    java.io.InputStream in -> in
    java.lang.String filename -> filename
    java.io.InputStream getInputStream() -> getInputStream
    void writeTo(java.io.OutputStream) -> writeTo
    java.lang.String getTransferEncoding() -> getTransferEncoding
    java.lang.String getCharset() -> getCharset
    long getContentLength() -> getContentLength
    java.lang.String getFilename() -> getFilename
org.apache.http.entity.mime.content.StringBody -> org.apache.http.entity.mime.content.StringBody:
    byte[] content -> content
    java.nio.charset.Charset charset -> charset
    org.apache.http.entity.mime.content.StringBody create(java.lang.String,java.lang.String,java.nio.charset.Charset) -> create
    org.apache.http.entity.mime.content.StringBody create(java.lang.String,java.nio.charset.Charset) -> create
    org.apache.http.entity.mime.content.StringBody create(java.lang.String) -> create
    java.io.Reader getReader() -> getReader
    void writeTo(java.io.OutputStream) -> writeTo
    java.lang.String getTransferEncoding() -> getTransferEncoding
    java.lang.String getCharset() -> getCharset
    long getContentLength() -> getContentLength
    java.lang.String getFilename() -> getFilename
org.apache.http.impl.auth.AuthSchemeBase -> org.apache.http.impl.auth.AuthSchemeBase:
    org.apache.http.auth.ChallengeState challengeState -> challengeState
    void processChallenge(org.apache.http.Header) -> processChallenge
    org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> authenticate
    void parseChallenge(org.apache.http.util.CharArrayBuffer,int,int) -> parseChallenge
    boolean isProxy() -> isProxy
    org.apache.http.auth.ChallengeState getChallengeState() -> getChallengeState
    java.lang.String toString() -> toString
org.apache.http.impl.auth.BasicScheme -> org.apache.http.impl.auth.BasicScheme:
    boolean complete -> complete
    java.lang.String getSchemeName() -> getSchemeName
    void processChallenge(org.apache.http.Header) -> processChallenge
    boolean isComplete() -> isComplete
    boolean isConnectionBased() -> isConnectionBased
    org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest) -> authenticate
    org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> authenticate
    org.apache.http.Header authenticate(org.apache.http.auth.Credentials,java.lang.String,boolean) -> authenticate
org.apache.http.impl.auth.BasicSchemeFactory -> org.apache.http.impl.auth.BasicSchemeFactory:
    org.apache.http.auth.AuthScheme newInstance(org.apache.http.params.HttpParams) -> newInstance
org.apache.http.impl.auth.DigestScheme -> org.apache.http.impl.auth.DigestScheme:
    char[] HEXADECIMAL -> HEXADECIMAL
    boolean complete -> complete
    int QOP_UNKNOWN -> QOP_UNKNOWN
    int QOP_MISSING -> QOP_MISSING
    int QOP_AUTH_INT -> QOP_AUTH_INT
    int QOP_AUTH -> QOP_AUTH
    java.lang.String lastNonce -> lastNonce
    long nounceCount -> nounceCount
    java.lang.String cnonce -> cnonce
    java.lang.String a1 -> a1
    java.lang.String a2 -> a2
    void processChallenge(org.apache.http.Header) -> processChallenge
    boolean isComplete() -> isComplete
    java.lang.String getSchemeName() -> getSchemeName
    boolean isConnectionBased() -> isConnectionBased
    void overrideParamter(java.lang.String,java.lang.String) -> overrideParamter
    org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest) -> authenticate
    org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> authenticate
    java.security.MessageDigest createMessageDigest(java.lang.String) -> createMessageDigest
    org.apache.http.Header createDigestHeader(org.apache.http.auth.Credentials,org.apache.http.HttpRequest) -> createDigestHeader
    java.lang.String getCnonce() -> getCnonce
    java.lang.String getA1() -> getA1
    java.lang.String getA2() -> getA2
    java.lang.String encode(byte[]) -> encode
    java.lang.String createCnonce() -> createCnonce
    java.lang.String toString() -> toString
org.apache.http.impl.auth.DigestSchemeFactory -> org.apache.http.impl.auth.DigestSchemeFactory:
    org.apache.http.auth.AuthScheme newInstance(org.apache.http.params.HttpParams) -> newInstance
org.apache.http.impl.auth.GGSSchemeBase -> org.apache.http.impl.auth.GGSSchemeBase:
    org.apache.commons.logging.Log log -> log
    org.apache.commons.codec.binary.Base64 base64codec -> base64codec
    boolean stripPort -> stripPort
    org.apache.http.impl.auth.GGSSchemeBase$State state -> state
    byte[] token -> token
    org.ietf.jgss.GSSManager getManager() -> getManager
    byte[] generateGSSToken(byte[],org.ietf.jgss.Oid,java.lang.String) -> generateGSSToken
    byte[] generateToken(byte[],java.lang.String) -> generateToken
    boolean isComplete() -> isComplete
    org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest) -> authenticate
    org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> authenticate
    void parseChallenge(org.apache.http.util.CharArrayBuffer,int,int) -> parseChallenge
org.apache.http.impl.auth.GGSSchemeBase$1 -> org.apache.http.impl.auth.GGSSchemeBase$1:
    int[] $SwitchMap$org$apache$http$impl$auth$GGSSchemeBase$State -> a
org.apache.http.impl.auth.GGSSchemeBase$State -> org.apache.http.impl.auth.GGSSchemeBase$State:
    org.apache.http.impl.auth.GGSSchemeBase$State UNINITIATED -> a
    org.apache.http.impl.auth.GGSSchemeBase$State CHALLENGE_RECEIVED -> b
    org.apache.http.impl.auth.GGSSchemeBase$State TOKEN_GENERATED -> c
    org.apache.http.impl.auth.GGSSchemeBase$State FAILED -> d
    org.apache.http.impl.auth.GGSSchemeBase$State[] $VALUES -> e
    org.apache.http.impl.auth.GGSSchemeBase$State[] values() -> values
    org.apache.http.impl.auth.GGSSchemeBase$State valueOf(java.lang.String) -> valueOf
org.apache.http.impl.auth.HttpEntityDigester -> org.apache.http.impl.auth.HttpEntityDigester:
    java.security.MessageDigest digester -> a
    boolean closed -> b
    byte[] digest -> c
    void write(int) -> write
    void write(byte[],int,int) -> write
    void close() -> close
    byte[] getDigest() -> a
org.apache.http.impl.auth.KerberosScheme -> org.apache.http.impl.auth.KerberosScheme:
    java.lang.String KERBEROS_OID -> KERBEROS_OID
    java.lang.String getSchemeName() -> getSchemeName
    org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> authenticate
    byte[] generateToken(byte[],java.lang.String) -> generateToken
    java.lang.String getParameter(java.lang.String) -> getParameter
    java.lang.String getRealm() -> getRealm
    boolean isConnectionBased() -> isConnectionBased
org.apache.http.impl.auth.KerberosSchemeFactory -> org.apache.http.impl.auth.KerberosSchemeFactory:
    boolean stripPort -> stripPort
    org.apache.http.auth.AuthScheme newInstance(org.apache.http.params.HttpParams) -> newInstance
    boolean isStripPort() -> isStripPort
org.apache.http.impl.auth.NTLMEngine -> org.apache.http.impl.auth.NTLMEngine:
    java.lang.String generateType1Msg(java.lang.String,java.lang.String) -> generateType1Msg
    java.lang.String generateType3Msg(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> generateType3Msg
org.apache.http.impl.auth.NTLMEngineException -> org.apache.http.impl.auth.NTLMEngineException:
    long serialVersionUID -> serialVersionUID
org.apache.http.impl.auth.NTLMEngineImpl -> org.apache.http.impl.auth.NTLMEngineImpl:
    java.security.SecureRandom RND_GEN -> a
    java.lang.String credentialCharset -> b
    byte[] SIGNATURE -> c
    java.lang.String getType1Message(java.lang.String,java.lang.String) -> a
    java.lang.String getType3Message(java.lang.String,java.lang.String,java.lang.String,java.lang.String,byte[],int,java.lang.String,byte[]) -> a
    java.lang.String stripDotSuffix(java.lang.String) -> e
    java.lang.String convertHost(java.lang.String) -> f
    java.lang.String convertDomain(java.lang.String) -> g
    int readULong(byte[],int) -> d
    int readUShort(byte[],int) -> e
    byte[] readSecurityBuffer(byte[],int) -> f
    byte[] makeRandomChallenge() -> d
    byte[] makeSecondaryKey() -> e
    byte[] hmacMD5(byte[],byte[]) -> a
    byte[] RC4(byte[],byte[]) -> b
    byte[] ntlm2SessionResponse(byte[],byte[],byte[]) -> a
    byte[] lmHash(java.lang.String) -> h
    byte[] ntlmHash(java.lang.String) -> i
    byte[] lmv2Hash(java.lang.String,java.lang.String,byte[]) -> c
    byte[] ntlmv2Hash(java.lang.String,java.lang.String,byte[]) -> d
    byte[] lmResponse(byte[],byte[]) -> d
    byte[] lmv2Response(byte[],byte[],byte[]) -> d
    byte[] createBlob(byte[],byte[],byte[]) -> e
    java.security.Key createDESKey(byte[],int) -> g
    void oddParity(byte[]) -> a
    void writeULong(byte[],int,int) -> a
    int F(int,int,int) -> a
    int G(int,int,int) -> b
    int H(int,int,int) -> c
    int rotintlft(int,int) -> a
    java.lang.String generateType1Msg(java.lang.String,java.lang.String) -> generateType1Msg
    java.lang.String generateType3Msg(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> generateType3Msg
    byte[] access$000() -> a
    byte[] access$100() -> b
    byte[] access$200(java.lang.String) -> a
    byte[] access$300(byte[],byte[]) -> c
    byte[] access$400(java.lang.String) -> b
    byte[] access$500(java.lang.String,java.lang.String,byte[]) -> a
    byte[] access$600(java.lang.String,java.lang.String,byte[]) -> b
    byte[] access$700(byte[],byte[],byte[]) -> b
    byte[] access$800(byte[],byte[],byte[]) -> c
    java.security.Key access$900(byte[],int) -> a
    byte[] access$1000() -> c
    int access$1200(byte[],int) -> b
    byte[] access$1300(byte[],int) -> c
    java.lang.String access$1400(java.lang.String) -> c
    java.lang.String access$1500(java.lang.String) -> d
org.apache.http.impl.auth.NTLMEngineImpl$CipherGen -> org.apache.http.impl.auth.NTLMEngineImpl$CipherGen:
    java.lang.String domain -> domain
    java.lang.String user -> user
    java.lang.String password -> password
    byte[] challenge -> challenge
    java.lang.String target -> target
    byte[] targetInformation -> targetInformation
    byte[] clientChallenge -> clientChallenge
    byte[] clientChallenge2 -> clientChallenge2
    byte[] secondaryKey -> secondaryKey
    byte[] timestamp -> timestamp
    byte[] lmHash -> lmHash
    byte[] lmResponse -> lmResponse
    byte[] ntlmHash -> ntlmHash
    byte[] ntlmResponse -> ntlmResponse
    byte[] ntlmv2Hash -> ntlmv2Hash
    byte[] lmv2Hash -> lmv2Hash
    byte[] lmv2Response -> lmv2Response
    byte[] ntlmv2Blob -> ntlmv2Blob
    byte[] ntlmv2Response -> ntlmv2Response
    byte[] ntlm2SessionResponse -> ntlm2SessionResponse
    byte[] lm2SessionResponse -> lm2SessionResponse
    byte[] lmUserSessionKey -> lmUserSessionKey
    byte[] ntlmUserSessionKey -> ntlmUserSessionKey
    byte[] ntlmv2UserSessionKey -> ntlmv2UserSessionKey
    byte[] ntlm2SessionResponseUserSessionKey -> ntlm2SessionResponseUserSessionKey
    byte[] lanManagerSessionKey -> lanManagerSessionKey
    byte[] getClientChallenge() -> getClientChallenge
    byte[] getClientChallenge2() -> getClientChallenge2
    byte[] getSecondaryKey() -> getSecondaryKey
    byte[] getLMHash() -> getLMHash
    byte[] getLMResponse() -> getLMResponse
    byte[] getNTLMHash() -> getNTLMHash
    byte[] getNTLMResponse() -> getNTLMResponse
    byte[] getLMv2Hash() -> getLMv2Hash
    byte[] getNTLMv2Hash() -> getNTLMv2Hash
    byte[] getTimestamp() -> getTimestamp
    byte[] getNTLMv2Blob() -> getNTLMv2Blob
    byte[] getNTLMv2Response() -> getNTLMv2Response
    byte[] getLMv2Response() -> getLMv2Response
    byte[] getNTLM2SessionResponse() -> getNTLM2SessionResponse
    byte[] getLM2SessionResponse() -> getLM2SessionResponse
    byte[] getLMUserSessionKey() -> getLMUserSessionKey
    byte[] getNTLMUserSessionKey() -> getNTLMUserSessionKey
    byte[] getNTLMv2UserSessionKey() -> getNTLMv2UserSessionKey
    byte[] getNTLM2SessionResponseUserSessionKey() -> getNTLM2SessionResponseUserSessionKey
    byte[] getLanManagerSessionKey() -> getLanManagerSessionKey
org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5 -> org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5:
    byte[] ipad -> a
    byte[] opad -> b
    java.security.MessageDigest md5 -> c
    byte[] getOutput() -> a
    void update(byte[]) -> a
org.apache.http.impl.auth.NTLMEngineImpl$MD4 -> org.apache.http.impl.auth.NTLMEngineImpl$MD4:
    int A -> a
    int B -> b
    int C -> c
    int D -> d
    long count -> e
    byte[] dataBuffer -> f
    void update(byte[]) -> a
    byte[] getOutput() -> a
    void processBuffer() -> b
    void round1(int[]) -> a
    void round2(int[]) -> b
    void round3(int[]) -> c
org.apache.http.impl.auth.NTLMEngineImpl$NTLMMessage -> org.apache.http.impl.auth.NTLMEngineImpl$NTLMMessage:
    byte[] messageContents -> a
    int currentOutputPosition -> b
    int getMessageLength() -> a
    void readBytes(byte[],int) -> a
    int readULong(int) -> a
    byte[] readSecurityBuffer(int) -> b
    void prepareResponse(int,int) -> a
    void addByte(byte) -> a
    void addBytes(byte[]) -> a
    void addUShort(int) -> c
    void addULong(int) -> d
    java.lang.String getResponse() -> b
org.apache.http.impl.auth.NTLMEngineImpl$Type1Message -> org.apache.http.impl.auth.NTLMEngineImpl$Type1Message:
    byte[] hostBytes -> a
    byte[] domainBytes -> b
    java.lang.String getResponse() -> b
org.apache.http.impl.auth.NTLMEngineImpl$Type2Message -> org.apache.http.impl.auth.NTLMEngineImpl$Type2Message:
    byte[] challenge -> a
    java.lang.String target -> b
    byte[] targetInfo -> c
    int flags -> d
    byte[] getChallenge() -> c
    java.lang.String getTarget() -> d
    byte[] getTargetInfo() -> e
    int getFlags() -> f
org.apache.http.impl.auth.NTLMEngineImpl$Type3Message -> org.apache.http.impl.auth.NTLMEngineImpl$Type3Message:
    int type2Flags -> a
    byte[] domainBytes -> b
    byte[] hostBytes -> c
    byte[] userBytes -> d
    byte[] lmResp -> e
    byte[] ntResp -> f
    byte[] sessionKey -> g
    java.lang.String getResponse() -> b
org.apache.http.impl.auth.NTLMScheme -> org.apache.http.impl.auth.NTLMScheme:
    org.apache.http.impl.auth.NTLMEngine engine -> engine
    org.apache.http.impl.auth.NTLMScheme$State state -> state
    java.lang.String challenge -> challenge
    java.lang.String getSchemeName() -> getSchemeName
    java.lang.String getParameter(java.lang.String) -> getParameter
    java.lang.String getRealm() -> getRealm
    boolean isConnectionBased() -> isConnectionBased
    void parseChallenge(org.apache.http.util.CharArrayBuffer,int,int) -> parseChallenge
    org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest) -> authenticate
    boolean isComplete() -> isComplete
org.apache.http.impl.auth.NTLMScheme$State -> org.apache.http.impl.auth.NTLMScheme$State:
    org.apache.http.impl.auth.NTLMScheme$State UNINITIATED -> a
    org.apache.http.impl.auth.NTLMScheme$State CHALLENGE_RECEIVED -> b
    org.apache.http.impl.auth.NTLMScheme$State MSG_TYPE1_GENERATED -> c
    org.apache.http.impl.auth.NTLMScheme$State MSG_TYPE2_RECEVIED -> d
    org.apache.http.impl.auth.NTLMScheme$State MSG_TYPE3_GENERATED -> e
    org.apache.http.impl.auth.NTLMScheme$State FAILED -> f
    org.apache.http.impl.auth.NTLMScheme$State[] $VALUES -> g
    org.apache.http.impl.auth.NTLMScheme$State[] values() -> values
    org.apache.http.impl.auth.NTLMScheme$State valueOf(java.lang.String) -> valueOf
org.apache.http.impl.auth.NTLMSchemeFactory -> org.apache.http.impl.auth.NTLMSchemeFactory:
    org.apache.http.auth.AuthScheme newInstance(org.apache.http.params.HttpParams) -> newInstance
org.apache.http.impl.auth.NegotiateScheme -> org.apache.http.impl.auth.NegotiateScheme:
    org.apache.commons.logging.Log log -> log
    java.lang.String SPNEGO_OID -> SPNEGO_OID
    java.lang.String KERBEROS_OID -> KERBEROS_OID
    org.apache.http.impl.auth.SpnegoTokenGenerator spengoGenerator -> spengoGenerator
    java.lang.String getSchemeName() -> getSchemeName
    org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest) -> authenticate
    org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> authenticate
    byte[] generateToken(byte[],java.lang.String) -> generateToken
    java.lang.String getParameter(java.lang.String) -> getParameter
    java.lang.String getRealm() -> getRealm
    boolean isConnectionBased() -> isConnectionBased
org.apache.http.impl.auth.NegotiateSchemeFactory -> org.apache.http.impl.auth.NegotiateSchemeFactory:
    org.apache.http.impl.auth.SpnegoTokenGenerator spengoGenerator -> spengoGenerator
    boolean stripPort -> stripPort
    org.apache.http.auth.AuthScheme newInstance(org.apache.http.params.HttpParams) -> newInstance
    boolean isStripPort() -> isStripPort
    org.apache.http.impl.auth.SpnegoTokenGenerator getSpengoGenerator() -> getSpengoGenerator
org.apache.http.impl.auth.RFC2617Scheme -> org.apache.http.impl.auth.RFC2617Scheme:
    java.util.Map params -> params
    void parseChallenge(org.apache.http.util.CharArrayBuffer,int,int) -> parseChallenge
    java.util.Map getParameters() -> getParameters
    java.lang.String getParameter(java.lang.String) -> getParameter
    java.lang.String getRealm() -> getRealm
org.apache.http.impl.auth.SPNegoScheme -> org.apache.http.impl.auth.SPNegoScheme:
    java.lang.String SPNEGO_OID -> SPNEGO_OID
    java.lang.String getSchemeName() -> getSchemeName
    org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> authenticate
    byte[] generateToken(byte[],java.lang.String) -> generateToken
    java.lang.String getParameter(java.lang.String) -> getParameter
    java.lang.String getRealm() -> getRealm
    boolean isConnectionBased() -> isConnectionBased
org.apache.http.impl.auth.SPNegoSchemeFactory -> org.apache.http.impl.auth.SPNegoSchemeFactory:
    boolean stripPort -> stripPort
    org.apache.http.auth.AuthScheme newInstance(org.apache.http.params.HttpParams) -> newInstance
    boolean isStripPort() -> isStripPort
org.apache.http.impl.auth.SpnegoTokenGenerator -> org.apache.http.impl.auth.SpnegoTokenGenerator:
    byte[] generateSpnegoDERObject(byte[]) -> generateSpnegoDERObject
org.apache.http.impl.auth.UnsupportedDigestAlgorithmException -> org.apache.http.impl.auth.UnsupportedDigestAlgorithmException:
    long serialVersionUID -> serialVersionUID
org.apache.http.impl.client.AIMDBackoffManager -> org.apache.http.impl.client.AIMDBackoffManager:
    org.apache.http.pool.ConnPoolControl connPerRoute -> connPerRoute
    org.apache.http.impl.client.Clock clock -> clock
    java.util.Map lastRouteProbes -> lastRouteProbes
    java.util.Map lastRouteBackoffs -> lastRouteBackoffs
    long coolDown -> coolDown
    double backoffFactor -> backoffFactor
    int cap -> cap
    void backOff(org.apache.http.conn.routing.HttpRoute) -> backOff
    int getBackedOffPoolSize(int) -> getBackedOffPoolSize
    void probe(org.apache.http.conn.routing.HttpRoute) -> probe
    java.lang.Long getLastUpdate(java.util.Map,org.apache.http.conn.routing.HttpRoute) -> getLastUpdate
    void setBackoffFactor(double) -> setBackoffFactor
    void setCooldownMillis(long) -> setCooldownMillis
    void setPerHostConnectionCap(int) -> setPerHostConnectionCap
org.apache.http.impl.client.AbstractAuthenticationHandler -> org.apache.http.impl.client.AbstractAuthenticationHandler:
    org.apache.commons.logging.Log log -> log
    java.util.List DEFAULT_SCHEME_PRIORITY -> DEFAULT_SCHEME_PRIORITY
    java.util.Map parseChallenges(org.apache.http.Header[]) -> parseChallenges
    java.util.List getAuthPreferences() -> getAuthPreferences
    java.util.List getAuthPreferences(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> getAuthPreferences
    org.apache.http.auth.AuthScheme selectScheme(java.util.Map,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> selectScheme
org.apache.http.impl.client.AbstractHttpClient -> org.apache.http.impl.client.AbstractHttpClient:
    org.apache.commons.logging.Log log -> log
    org.apache.http.params.HttpParams defaultParams -> defaultParams
    org.apache.http.protocol.HttpRequestExecutor requestExec -> requestExec
    org.apache.http.conn.ClientConnectionManager connManager -> connManager
    org.apache.http.ConnectionReuseStrategy reuseStrategy -> reuseStrategy
    org.apache.http.conn.ConnectionKeepAliveStrategy keepAliveStrategy -> keepAliveStrategy
    org.apache.http.cookie.CookieSpecRegistry supportedCookieSpecs -> supportedCookieSpecs
    org.apache.http.auth.AuthSchemeRegistry supportedAuthSchemes -> supportedAuthSchemes
    org.apache.http.protocol.BasicHttpProcessor mutableProcessor -> mutableProcessor
    org.apache.http.protocol.ImmutableHttpProcessor protocolProcessor -> protocolProcessor
    org.apache.http.client.HttpRequestRetryHandler retryHandler -> retryHandler
    org.apache.http.client.RedirectStrategy redirectStrategy -> redirectStrategy
    org.apache.http.client.AuthenticationStrategy targetAuthStrategy -> targetAuthStrategy
    org.apache.http.client.AuthenticationStrategy proxyAuthStrategy -> proxyAuthStrategy
    org.apache.http.client.CookieStore cookieStore -> cookieStore
    org.apache.http.client.CredentialsProvider credsProvider -> credsProvider
    org.apache.http.conn.routing.HttpRoutePlanner routePlanner -> routePlanner
    org.apache.http.client.UserTokenHandler userTokenHandler -> userTokenHandler
    org.apache.http.client.ConnectionBackoffStrategy connectionBackoffStrategy -> connectionBackoffStrategy
    org.apache.http.client.BackoffManager backoffManager -> backoffManager
    org.apache.http.params.HttpParams createHttpParams() -> createHttpParams
    org.apache.http.protocol.BasicHttpProcessor createHttpProcessor() -> createHttpProcessor
    org.apache.http.protocol.HttpContext createHttpContext() -> createHttpContext
    org.apache.http.conn.ClientConnectionManager createClientConnectionManager() -> createClientConnectionManager
    org.apache.http.auth.AuthSchemeRegistry createAuthSchemeRegistry() -> createAuthSchemeRegistry
    org.apache.http.cookie.CookieSpecRegistry createCookieSpecRegistry() -> createCookieSpecRegistry
    org.apache.http.protocol.HttpRequestExecutor createRequestExecutor() -> createRequestExecutor
    org.apache.http.ConnectionReuseStrategy createConnectionReuseStrategy() -> createConnectionReuseStrategy
    org.apache.http.conn.ConnectionKeepAliveStrategy createConnectionKeepAliveStrategy() -> createConnectionKeepAliveStrategy
    org.apache.http.client.HttpRequestRetryHandler createHttpRequestRetryHandler() -> createHttpRequestRetryHandler
    org.apache.http.client.RedirectHandler createRedirectHandler() -> createRedirectHandler
    org.apache.http.client.AuthenticationStrategy createTargetAuthenticationStrategy() -> createTargetAuthenticationStrategy
    org.apache.http.client.AuthenticationHandler createTargetAuthenticationHandler() -> createTargetAuthenticationHandler
    org.apache.http.client.AuthenticationStrategy createProxyAuthenticationStrategy() -> createProxyAuthenticationStrategy
    org.apache.http.client.AuthenticationHandler createProxyAuthenticationHandler() -> createProxyAuthenticationHandler
    org.apache.http.client.CookieStore createCookieStore() -> createCookieStore
    org.apache.http.client.CredentialsProvider createCredentialsProvider() -> createCredentialsProvider
    org.apache.http.conn.routing.HttpRoutePlanner createHttpRoutePlanner() -> createHttpRoutePlanner
    org.apache.http.client.UserTokenHandler createUserTokenHandler() -> createUserTokenHandler
    org.apache.http.params.HttpParams getParams() -> getParams
    void setParams(org.apache.http.params.HttpParams) -> setParams
    org.apache.http.conn.ClientConnectionManager getConnectionManager() -> getConnectionManager
    org.apache.http.protocol.HttpRequestExecutor getRequestExecutor() -> getRequestExecutor
    org.apache.http.auth.AuthSchemeRegistry getAuthSchemes() -> getAuthSchemes
    void setAuthSchemes(org.apache.http.auth.AuthSchemeRegistry) -> setAuthSchemes
    org.apache.http.client.ConnectionBackoffStrategy getConnectionBackoffStrategy() -> getConnectionBackoffStrategy
    void setConnectionBackoffStrategy(org.apache.http.client.ConnectionBackoffStrategy) -> setConnectionBackoffStrategy
    org.apache.http.cookie.CookieSpecRegistry getCookieSpecs() -> getCookieSpecs
    org.apache.http.client.BackoffManager getBackoffManager() -> getBackoffManager
    void setBackoffManager(org.apache.http.client.BackoffManager) -> setBackoffManager
    void setCookieSpecs(org.apache.http.cookie.CookieSpecRegistry) -> setCookieSpecs
    org.apache.http.ConnectionReuseStrategy getConnectionReuseStrategy() -> getConnectionReuseStrategy
    void setReuseStrategy(org.apache.http.ConnectionReuseStrategy) -> setReuseStrategy
    org.apache.http.conn.ConnectionKeepAliveStrategy getConnectionKeepAliveStrategy() -> getConnectionKeepAliveStrategy
    void setKeepAliveStrategy(org.apache.http.conn.ConnectionKeepAliveStrategy) -> setKeepAliveStrategy
    org.apache.http.client.HttpRequestRetryHandler getHttpRequestRetryHandler() -> getHttpRequestRetryHandler
    void setHttpRequestRetryHandler(org.apache.http.client.HttpRequestRetryHandler) -> setHttpRequestRetryHandler
    org.apache.http.client.RedirectHandler getRedirectHandler() -> getRedirectHandler
    void setRedirectHandler(org.apache.http.client.RedirectHandler) -> setRedirectHandler
    org.apache.http.client.RedirectStrategy getRedirectStrategy() -> getRedirectStrategy
    void setRedirectStrategy(org.apache.http.client.RedirectStrategy) -> setRedirectStrategy
    org.apache.http.client.AuthenticationHandler getTargetAuthenticationHandler() -> getTargetAuthenticationHandler
    void setTargetAuthenticationHandler(org.apache.http.client.AuthenticationHandler) -> setTargetAuthenticationHandler
    org.apache.http.client.AuthenticationStrategy getTargetAuthenticationStrategy() -> getTargetAuthenticationStrategy
    void setTargetAuthenticationStrategy(org.apache.http.client.AuthenticationStrategy) -> setTargetAuthenticationStrategy
    org.apache.http.client.AuthenticationHandler getProxyAuthenticationHandler() -> getProxyAuthenticationHandler
    void setProxyAuthenticationHandler(org.apache.http.client.AuthenticationHandler) -> setProxyAuthenticationHandler
    org.apache.http.client.AuthenticationStrategy getProxyAuthenticationStrategy() -> getProxyAuthenticationStrategy
    void setProxyAuthenticationStrategy(org.apache.http.client.AuthenticationStrategy) -> setProxyAuthenticationStrategy
    org.apache.http.client.CookieStore getCookieStore() -> getCookieStore
    void setCookieStore(org.apache.http.client.CookieStore) -> setCookieStore
    org.apache.http.client.CredentialsProvider getCredentialsProvider() -> getCredentialsProvider
    void setCredentialsProvider(org.apache.http.client.CredentialsProvider) -> setCredentialsProvider
    org.apache.http.conn.routing.HttpRoutePlanner getRoutePlanner() -> getRoutePlanner
    void setRoutePlanner(org.apache.http.conn.routing.HttpRoutePlanner) -> setRoutePlanner
    org.apache.http.client.UserTokenHandler getUserTokenHandler() -> getUserTokenHandler
    void setUserTokenHandler(org.apache.http.client.UserTokenHandler) -> setUserTokenHandler
    org.apache.http.protocol.BasicHttpProcessor getHttpProcessor() -> getHttpProcessor
    org.apache.http.protocol.HttpProcessor getProtocolProcessor() -> getProtocolProcessor
    int getResponseInterceptorCount() -> getResponseInterceptorCount
    org.apache.http.HttpResponseInterceptor getResponseInterceptor(int) -> getResponseInterceptor
    org.apache.http.HttpRequestInterceptor getRequestInterceptor(int) -> getRequestInterceptor
    int getRequestInterceptorCount() -> getRequestInterceptorCount
    void addResponseInterceptor(org.apache.http.HttpResponseInterceptor) -> addResponseInterceptor
    void addResponseInterceptor(org.apache.http.HttpResponseInterceptor,int) -> addResponseInterceptor
    void clearResponseInterceptors() -> clearResponseInterceptors
    void removeResponseInterceptorByClass(java.lang.Class) -> removeResponseInterceptorByClass
    void addRequestInterceptor(org.apache.http.HttpRequestInterceptor) -> addRequestInterceptor
    void addRequestInterceptor(org.apache.http.HttpRequestInterceptor,int) -> addRequestInterceptor
    void clearRequestInterceptors() -> clearRequestInterceptors
    void removeRequestInterceptorByClass(java.lang.Class) -> removeRequestInterceptorByClass
    org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest) -> execute
    org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext) -> execute
    org.apache.http.HttpHost determineTarget(org.apache.http.client.methods.HttpUriRequest) -> determineTarget
    org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest) -> execute
    org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> execute
    org.apache.http.client.RequestDirector createClientRequestDirector(org.apache.http.protocol.HttpRequestExecutor,org.apache.http.conn.ClientConnectionManager,org.apache.http.ConnectionReuseStrategy,org.apache.http.conn.ConnectionKeepAliveStrategy,org.apache.http.conn.routing.HttpRoutePlanner,org.apache.http.protocol.HttpProcessor,org.apache.http.client.HttpRequestRetryHandler,org.apache.http.client.RedirectHandler,org.apache.http.client.AuthenticationHandler,org.apache.http.client.AuthenticationHandler,org.apache.http.client.UserTokenHandler,org.apache.http.params.HttpParams) -> createClientRequestDirector
    org.apache.http.client.RequestDirector createClientRequestDirector(org.apache.http.protocol.HttpRequestExecutor,org.apache.http.conn.ClientConnectionManager,org.apache.http.ConnectionReuseStrategy,org.apache.http.conn.ConnectionKeepAliveStrategy,org.apache.http.conn.routing.HttpRoutePlanner,org.apache.http.protocol.HttpProcessor,org.apache.http.client.HttpRequestRetryHandler,org.apache.http.client.RedirectStrategy,org.apache.http.client.AuthenticationHandler,org.apache.http.client.AuthenticationHandler,org.apache.http.client.UserTokenHandler,org.apache.http.params.HttpParams) -> createClientRequestDirector
    org.apache.http.client.RequestDirector createClientRequestDirector(org.apache.http.protocol.HttpRequestExecutor,org.apache.http.conn.ClientConnectionManager,org.apache.http.ConnectionReuseStrategy,org.apache.http.conn.ConnectionKeepAliveStrategy,org.apache.http.conn.routing.HttpRoutePlanner,org.apache.http.protocol.HttpProcessor,org.apache.http.client.HttpRequestRetryHandler,org.apache.http.client.RedirectStrategy,org.apache.http.client.AuthenticationStrategy,org.apache.http.client.AuthenticationStrategy,org.apache.http.client.UserTokenHandler,org.apache.http.params.HttpParams) -> createClientRequestDirector
    org.apache.http.params.HttpParams determineParams(org.apache.http.HttpRequest) -> determineParams
    java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler) -> execute
    java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext) -> execute
    java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler) -> execute
    java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext) -> execute
org.apache.http.impl.client.AuthenticationStrategyAdaptor -> org.apache.http.impl.client.AuthenticationStrategyAdaptor:
    org.apache.commons.logging.Log log -> a
    org.apache.http.client.AuthenticationHandler handler -> b
    boolean isAuthenticationRequested(org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> isAuthenticationRequested
    java.util.Map getChallenges(org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> getChallenges
    java.util.Queue select(java.util.Map,org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> select
    void authSucceeded(org.apache.http.HttpHost,org.apache.http.auth.AuthScheme,org.apache.http.protocol.HttpContext) -> authSucceeded
    void authFailed(org.apache.http.HttpHost,org.apache.http.auth.AuthScheme,org.apache.http.protocol.HttpContext) -> authFailed
    boolean isCachable(org.apache.http.auth.AuthScheme) -> a
    org.apache.http.client.AuthenticationHandler getHandler() -> a
org.apache.http.impl.client.AuthenticationStrategyImpl -> org.apache.http.impl.client.AuthenticationStrategyImpl:
    org.apache.commons.logging.Log log -> log
    java.util.List DEFAULT_SCHEME_PRIORITY -> DEFAULT_SCHEME_PRIORITY
    int challengeCode -> challengeCode
    java.lang.String headerName -> headerName
    java.lang.String prefParamName -> prefParamName
    boolean isAuthenticationRequested(org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> isAuthenticationRequested
    java.util.Map getChallenges(org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> getChallenges
    java.util.Queue select(java.util.Map,org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> select
    void authSucceeded(org.apache.http.HttpHost,org.apache.http.auth.AuthScheme,org.apache.http.protocol.HttpContext) -> authSucceeded
    boolean isCachable(org.apache.http.auth.AuthScheme) -> isCachable
    void authFailed(org.apache.http.HttpHost,org.apache.http.auth.AuthScheme,org.apache.http.protocol.HttpContext) -> authFailed
org.apache.http.impl.client.AutoRetryHttpClient -> org.apache.http.impl.client.AutoRetryHttpClient:
    org.apache.http.client.HttpClient backend -> backend
    org.apache.http.client.ServiceUnavailableRetryStrategy retryStrategy -> retryStrategy
    org.apache.commons.logging.Log log -> log
    org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest) -> execute
    java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler) -> execute
    java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext) -> execute
    org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest) -> execute
    org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext) -> execute
    java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler) -> execute
    java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext) -> execute
    org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> execute
    org.apache.http.conn.ClientConnectionManager getConnectionManager() -> getConnectionManager
    org.apache.http.params.HttpParams getParams() -> getParams
org.apache.http.impl.client.BasicAuthCache -> org.apache.http.impl.client.BasicAuthCache:
    java.util.HashMap map -> map
    org.apache.http.HttpHost getKey(org.apache.http.HttpHost) -> getKey
    void put(org.apache.http.HttpHost,org.apache.http.auth.AuthScheme) -> put
    org.apache.http.auth.AuthScheme get(org.apache.http.HttpHost) -> get
    void remove(org.apache.http.HttpHost) -> remove
    void clear() -> clear
    java.lang.String toString() -> toString
org.apache.http.impl.client.BasicCookieStore -> org.apache.http.impl.client.BasicCookieStore:
    long serialVersionUID -> serialVersionUID
    java.util.TreeSet cookies -> cookies
    void addCookie(org.apache.http.cookie.Cookie) -> addCookie
    void addCookies(org.apache.http.cookie.Cookie[]) -> addCookies
    java.util.List getCookies() -> getCookies
    boolean clearExpired(java.util.Date) -> clearExpired
    void clear() -> clear
    java.lang.String toString() -> toString
org.apache.http.impl.client.BasicCredentialsProvider -> org.apache.http.impl.client.BasicCredentialsProvider:
    java.util.concurrent.ConcurrentHashMap credMap -> credMap
    void setCredentials(org.apache.http.auth.AuthScope,org.apache.http.auth.Credentials) -> setCredentials
    org.apache.http.auth.Credentials matchCredentials(java.util.Map,org.apache.http.auth.AuthScope) -> matchCredentials
    org.apache.http.auth.Credentials getCredentials(org.apache.http.auth.AuthScope) -> getCredentials
    void clear() -> clear
    java.lang.String toString() -> toString
org.apache.http.impl.client.BasicResponseHandler -> org.apache.http.impl.client.BasicResponseHandler:
    java.lang.String handleResponse(org.apache.http.HttpResponse) -> handleResponse
    java.lang.Object handleResponse(org.apache.http.HttpResponse) -> handleResponse
org.apache.http.impl.client.ClientParamsStack -> org.apache.http.impl.client.ClientParamsStack:
    org.apache.http.params.HttpParams applicationParams -> applicationParams
    org.apache.http.params.HttpParams clientParams -> clientParams
    org.apache.http.params.HttpParams requestParams -> requestParams
    org.apache.http.params.HttpParams overrideParams -> overrideParams
    org.apache.http.params.HttpParams getApplicationParams() -> getApplicationParams
    org.apache.http.params.HttpParams getClientParams() -> getClientParams
    org.apache.http.params.HttpParams getRequestParams() -> getRequestParams
    org.apache.http.params.HttpParams getOverrideParams() -> getOverrideParams
    java.lang.Object getParameter(java.lang.String) -> getParameter
    org.apache.http.params.HttpParams setParameter(java.lang.String,java.lang.Object) -> setParameter
    boolean removeParameter(java.lang.String) -> removeParameter
    org.apache.http.params.HttpParams copy() -> copy
org.apache.http.impl.client.Clock -> org.apache.http.impl.client.Clock:
    long getCurrentTime() -> a
org.apache.http.impl.client.ContentEncodingHttpClient -> org.apache.http.impl.client.ContentEncodingHttpClient:
    org.apache.http.protocol.BasicHttpProcessor createHttpProcessor() -> createHttpProcessor
org.apache.http.impl.client.DecompressingHttpClient -> org.apache.http.impl.client.DecompressingHttpClient:
    org.apache.http.client.HttpClient backend -> backend
    org.apache.http.HttpRequestInterceptor acceptEncodingInterceptor -> acceptEncodingInterceptor
    org.apache.http.HttpResponseInterceptor contentEncodingInterceptor -> contentEncodingInterceptor
    org.apache.http.params.HttpParams getParams() -> getParams
    org.apache.http.conn.ClientConnectionManager getConnectionManager() -> getConnectionManager
    org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest) -> execute
    org.apache.http.HttpHost getHttpHost(org.apache.http.client.methods.HttpUriRequest) -> getHttpHost
    org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext) -> execute
    org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest) -> execute
    org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> execute
    java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler) -> execute
    java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext) -> execute
    java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler) -> execute
    java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext) -> execute
org.apache.http.impl.client.DefaultBackoffStrategy -> org.apache.http.impl.client.DefaultBackoffStrategy:
    boolean shouldBackoff(java.lang.Throwable) -> shouldBackoff
    boolean shouldBackoff(org.apache.http.HttpResponse) -> shouldBackoff
org.apache.http.impl.client.DefaultConnectionKeepAliveStrategy -> org.apache.http.impl.client.DefaultConnectionKeepAliveStrategy:
    long getKeepAliveDuration(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> getKeepAliveDuration
org.apache.http.impl.client.DefaultHttpClient -> org.apache.http.impl.client.DefaultHttpClient:
    org.apache.http.params.HttpParams createHttpParams() -> createHttpParams
    void setDefaultHttpParams(org.apache.http.params.HttpParams) -> setDefaultHttpParams
    org.apache.http.protocol.BasicHttpProcessor createHttpProcessor() -> createHttpProcessor
org.apache.http.impl.client.DefaultHttpRequestRetryHandler -> org.apache.http.impl.client.DefaultHttpRequestRetryHandler:
    int retryCount -> retryCount
    boolean requestSentRetryEnabled -> requestSentRetryEnabled
    boolean retryRequest(java.io.IOException,int,org.apache.http.protocol.HttpContext) -> retryRequest
    boolean isRequestSentRetryEnabled() -> isRequestSentRetryEnabled
    int getRetryCount() -> getRetryCount
    boolean handleAsIdempotent(org.apache.http.HttpRequest) -> handleAsIdempotent
    boolean requestIsAborted(org.apache.http.HttpRequest) -> requestIsAborted
org.apache.http.impl.client.DefaultProxyAuthenticationHandler -> org.apache.http.impl.client.DefaultProxyAuthenticationHandler:
    boolean isAuthenticationRequested(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> isAuthenticationRequested
    java.util.Map getChallenges(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> getChallenges
    java.util.List getAuthPreferences(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> getAuthPreferences
org.apache.http.impl.client.DefaultRedirectHandler -> org.apache.http.impl.client.DefaultRedirectHandler:
    org.apache.commons.logging.Log log -> log
    java.lang.String REDIRECT_LOCATIONS -> REDIRECT_LOCATIONS
    boolean isRedirectRequested(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> isRedirectRequested
    java.net.URI getLocationURI(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> getLocationURI
org.apache.http.impl.client.DefaultRedirectStrategy -> org.apache.http.impl.client.DefaultRedirectStrategy:
    org.apache.commons.logging.Log log -> log
    java.lang.String REDIRECT_LOCATIONS -> REDIRECT_LOCATIONS
    java.lang.String[] REDIRECT_METHODS -> REDIRECT_METHODS
    boolean isRedirected(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> isRedirected
    java.net.URI getLocationURI(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> getLocationURI
    java.net.URI createLocationURI(java.lang.String) -> createLocationURI
    boolean isRedirectable(java.lang.String) -> isRedirectable
    org.apache.http.client.methods.HttpUriRequest getRedirect(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> getRedirect
    org.apache.http.client.methods.HttpUriRequest copyEntity(org.apache.http.client.methods.HttpEntityEnclosingRequestBase,org.apache.http.HttpRequest) -> copyEntity
org.apache.http.impl.client.DefaultRedirectStrategyAdaptor -> org.apache.http.impl.client.DefaultRedirectStrategyAdaptor:
    org.apache.http.client.RedirectHandler handler -> a
    boolean isRedirected(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> isRedirected
    org.apache.http.client.methods.HttpUriRequest getRedirect(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> getRedirect
    org.apache.http.client.RedirectHandler getHandler() -> a
org.apache.http.impl.client.DefaultRequestDirector -> org.apache.http.impl.client.DefaultRequestDirector:
    org.apache.commons.logging.Log log -> log
    org.apache.http.conn.ClientConnectionManager connManager -> connManager
    org.apache.http.conn.routing.HttpRoutePlanner routePlanner -> routePlanner
    org.apache.http.ConnectionReuseStrategy reuseStrategy -> reuseStrategy
    org.apache.http.conn.ConnectionKeepAliveStrategy keepAliveStrategy -> keepAliveStrategy
    org.apache.http.protocol.HttpRequestExecutor requestExec -> requestExec
    org.apache.http.protocol.HttpProcessor httpProcessor -> httpProcessor
    org.apache.http.client.HttpRequestRetryHandler retryHandler -> retryHandler
    org.apache.http.client.RedirectHandler redirectHandler -> redirectHandler
    org.apache.http.client.RedirectStrategy redirectStrategy -> redirectStrategy
    org.apache.http.client.AuthenticationHandler targetAuthHandler -> targetAuthHandler
    org.apache.http.client.AuthenticationStrategy targetAuthStrategy -> targetAuthStrategy
    org.apache.http.client.AuthenticationHandler proxyAuthHandler -> proxyAuthHandler
    org.apache.http.client.AuthenticationStrategy proxyAuthStrategy -> proxyAuthStrategy
    org.apache.http.client.UserTokenHandler userTokenHandler -> userTokenHandler
    org.apache.http.params.HttpParams params -> params
    org.apache.http.conn.ManagedClientConnection managedConn -> managedConn
    org.apache.http.auth.AuthState targetAuthState -> targetAuthState
    org.apache.http.auth.AuthState proxyAuthState -> proxyAuthState
    org.apache.http.impl.client.HttpAuthenticator authenticator -> authenticator
    int execCount -> execCount
    int redirectCount -> redirectCount
    int maxRedirects -> maxRedirects
    org.apache.http.HttpHost virtualHost -> virtualHost
    org.apache.http.impl.client.RequestWrapper wrapRequest(org.apache.http.HttpRequest) -> wrapRequest
    void rewriteRequestURI(org.apache.http.impl.client.RequestWrapper,org.apache.http.conn.routing.HttpRoute) -> rewriteRequestURI
    org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> execute
    void tryConnect(org.apache.http.impl.client.RoutedRequest,org.apache.http.protocol.HttpContext) -> tryConnect
    org.apache.http.HttpResponse tryExecute(org.apache.http.impl.client.RoutedRequest,org.apache.http.protocol.HttpContext) -> tryExecute
    void releaseConnection() -> releaseConnection
    org.apache.http.conn.routing.HttpRoute determineRoute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> determineRoute
    void establishRoute(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext) -> establishRoute
    boolean createTunnelToTarget(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext) -> createTunnelToTarget
    boolean createTunnelToProxy(org.apache.http.conn.routing.HttpRoute,int,org.apache.http.protocol.HttpContext) -> createTunnelToProxy
    org.apache.http.HttpRequest createConnectRequest(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext) -> createConnectRequest
    org.apache.http.impl.client.RoutedRequest handleResponse(org.apache.http.impl.client.RoutedRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> handleResponse
    void abortConnection() -> abortConnection
org.apache.http.impl.client.DefaultServiceUnavailableRetryStrategy -> org.apache.http.impl.client.DefaultServiceUnavailableRetryStrategy:
    int maxRetries -> maxRetries
    long retryInterval -> retryInterval
    boolean retryRequest(org.apache.http.HttpResponse,int,org.apache.http.protocol.HttpContext) -> retryRequest
    long getRetryInterval() -> getRetryInterval
org.apache.http.impl.client.DefaultTargetAuthenticationHandler -> org.apache.http.impl.client.DefaultTargetAuthenticationHandler:
    boolean isAuthenticationRequested(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> isAuthenticationRequested
    java.util.Map getChallenges(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> getChallenges
    java.util.List getAuthPreferences(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> getAuthPreferences
org.apache.http.impl.client.DefaultUserTokenHandler -> org.apache.http.impl.client.DefaultUserTokenHandler:
    java.lang.Object getUserToken(org.apache.http.protocol.HttpContext) -> getUserToken
    java.security.Principal getAuthPrincipal(org.apache.http.auth.AuthState) -> getAuthPrincipal
org.apache.http.impl.client.EntityEnclosingRequestWrapper -> org.apache.http.impl.client.EntityEnclosingRequestWrapper:
    org.apache.http.HttpEntity entity -> entity
    boolean consumed -> consumed
    org.apache.http.HttpEntity getEntity() -> getEntity
    void setEntity(org.apache.http.HttpEntity) -> setEntity
    boolean expectContinue() -> expectContinue
    boolean isRepeatable() -> isRepeatable
    boolean access$002(org.apache.http.impl.client.EntityEnclosingRequestWrapper,boolean) -> access$002
org.apache.http.impl.client.EntityEnclosingRequestWrapper$EntityWrapper -> org.apache.http.impl.client.EntityEnclosingRequestWrapper$EntityWrapper:
    org.apache.http.impl.client.EntityEnclosingRequestWrapper this$0 -> a
    void consumeContent() -> consumeContent
    java.io.InputStream getContent() -> getContent
    void writeTo(java.io.OutputStream) -> writeTo
org.apache.http.impl.client.HttpAuthenticator -> org.apache.http.impl.client.HttpAuthenticator:
    org.apache.commons.logging.Log log -> log
    boolean isAuthenticationRequested(org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.client.AuthenticationStrategy,org.apache.http.auth.AuthState,org.apache.http.protocol.HttpContext) -> isAuthenticationRequested
    boolean authenticate(org.apache.http.HttpHost,org.apache.http.HttpResponse,org.apache.http.client.AuthenticationStrategy,org.apache.http.auth.AuthState,org.apache.http.protocol.HttpContext) -> authenticate
org.apache.http.impl.client.HttpAuthenticator$1 -> org.apache.http.impl.client.HttpAuthenticator$1:
    int[] $SwitchMap$org$apache$http$auth$AuthProtocolState -> a
org.apache.http.impl.client.LaxRedirectStrategy -> org.apache.http.impl.client.LaxRedirectStrategy:
    java.lang.String[] REDIRECT_METHODS -> REDIRECT_METHODS
    boolean isRedirectable(java.lang.String) -> isRedirectable
org.apache.http.impl.client.NullBackoffStrategy -> org.apache.http.impl.client.NullBackoffStrategy:
    boolean shouldBackoff(java.lang.Throwable) -> shouldBackoff
    boolean shouldBackoff(org.apache.http.HttpResponse) -> shouldBackoff
org.apache.http.impl.client.ProxyAuthenticationStrategy -> org.apache.http.impl.client.ProxyAuthenticationStrategy:
org.apache.http.impl.client.ProxyClient -> org.apache.http.impl.client.ProxyClient:
    org.apache.http.protocol.HttpProcessor httpProcessor -> httpProcessor
    org.apache.http.protocol.HttpRequestExecutor requestExec -> requestExec
    org.apache.http.impl.client.ProxyAuthenticationStrategy proxyAuthStrategy -> proxyAuthStrategy
    org.apache.http.impl.client.HttpAuthenticator authenticator -> authenticator
    org.apache.http.auth.AuthState proxyAuthState -> proxyAuthState
    org.apache.http.auth.AuthSchemeRegistry authSchemeRegistry -> authSchemeRegistry
    org.apache.http.ConnectionReuseStrategy reuseStrategy -> reuseStrategy
    org.apache.http.params.HttpParams params -> params
    org.apache.http.params.HttpParams getParams() -> getParams
    org.apache.http.auth.AuthSchemeRegistry getAuthSchemeRegistry() -> getAuthSchemeRegistry
    java.net.Socket tunnel(org.apache.http.HttpHost,org.apache.http.HttpHost,org.apache.http.auth.Credentials) -> tunnel
org.apache.http.impl.client.ProxyClient$ProxyConnection -> org.apache.http.impl.client.ProxyClient$ProxyConnection:
    org.apache.http.conn.routing.HttpRoute route -> a
    org.apache.http.conn.routing.HttpRoute getRoute() -> getRoute
    boolean isSecure() -> isSecure
    javax.net.ssl.SSLSession getSSLSession() -> getSSLSession
    java.net.Socket getSocket() -> getSocket
org.apache.http.impl.client.RedirectLocations -> org.apache.http.impl.client.RedirectLocations:
    java.util.Set unique -> unique
    java.util.List all -> all
    boolean contains(java.net.URI) -> contains
    void add(java.net.URI) -> add
    boolean remove(java.net.URI) -> remove
    java.util.List getAll() -> getAll
org.apache.http.impl.client.RequestWrapper -> org.apache.http.impl.client.RequestWrapper:
    org.apache.http.HttpRequest original -> original
    java.net.URI uri -> uri
    java.lang.String method -> method
    org.apache.http.ProtocolVersion version -> version
    int execCount -> execCount
    void resetHeaders() -> resetHeaders
    java.lang.String getMethod() -> getMethod
    void setMethod(java.lang.String) -> setMethod
    org.apache.http.ProtocolVersion getProtocolVersion() -> getProtocolVersion
    void setProtocolVersion(org.apache.http.ProtocolVersion) -> setProtocolVersion
    java.net.URI getURI() -> getURI
    void setURI(java.net.URI) -> setURI
    org.apache.http.RequestLine getRequestLine() -> getRequestLine
    void abort() -> abort
    boolean isAborted() -> isAborted
    org.apache.http.HttpRequest getOriginal() -> getOriginal
    boolean isRepeatable() -> isRepeatable
    int getExecCount() -> getExecCount
    void incrementExecCount() -> incrementExecCount
org.apache.http.impl.client.RoutedRequest -> org.apache.http.impl.client.RoutedRequest:
    org.apache.http.impl.client.RequestWrapper request -> request
    org.apache.http.conn.routing.HttpRoute route -> route
    org.apache.http.impl.client.RequestWrapper getRequest() -> getRequest
    org.apache.http.conn.routing.HttpRoute getRoute() -> getRoute
org.apache.http.impl.client.StandardHttpRequestRetryHandler -> org.apache.http.impl.client.StandardHttpRequestRetryHandler:
    java.util.Map idempotentMethods -> idempotentMethods
    boolean handleAsIdempotent(org.apache.http.HttpRequest) -> handleAsIdempotent
org.apache.http.impl.client.SystemClock -> org.apache.http.impl.client.SystemClock:
    long getCurrentTime() -> a
org.apache.http.impl.client.SystemDefaultHttpClient -> org.apache.http.impl.client.SystemDefaultHttpClient:
    org.apache.http.conn.ClientConnectionManager createClientConnectionManager() -> createClientConnectionManager
    org.apache.http.conn.routing.HttpRoutePlanner createHttpRoutePlanner() -> createHttpRoutePlanner
    org.apache.http.ConnectionReuseStrategy createConnectionReuseStrategy() -> createConnectionReuseStrategy
org.apache.http.impl.client.TargetAuthenticationStrategy -> org.apache.http.impl.client.TargetAuthenticationStrategy:
org.apache.http.impl.client.TunnelRefusedException -> org.apache.http.impl.client.TunnelRefusedException:
    long serialVersionUID -> serialVersionUID
    org.apache.http.HttpResponse response -> response
    org.apache.http.HttpResponse getResponse() -> getResponse
org.apache.http.impl.conn.AbstractClientConnAdapter -> org.apache.http.impl.conn.AbstractClientConnAdapter:
    org.apache.http.conn.ClientConnectionManager connManager -> connManager
    org.apache.http.conn.OperatedClientConnection wrappedConnection -> wrappedConnection
    boolean markedReusable -> markedReusable
    boolean released -> released
    long duration -> duration
    void detach() -> detach
    org.apache.http.conn.OperatedClientConnection getWrappedConnection() -> getWrappedConnection
    org.apache.http.conn.ClientConnectionManager getManager() -> getManager
    void assertNotAborted() -> assertNotAborted
    boolean isReleased() -> isReleased
    void assertValid(org.apache.http.conn.OperatedClientConnection) -> assertValid
    boolean isOpen() -> isOpen
    boolean isStale() -> isStale
    void setSocketTimeout(int) -> setSocketTimeout
    int getSocketTimeout() -> getSocketTimeout
    org.apache.http.HttpConnectionMetrics getMetrics() -> getMetrics
    void flush() -> flush
    boolean isResponseAvailable(int) -> isResponseAvailable
    void receiveResponseEntity(org.apache.http.HttpResponse) -> receiveResponseEntity
    org.apache.http.HttpResponse receiveResponseHeader() -> receiveResponseHeader
    void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest) -> sendRequestEntity
    void sendRequestHeader(org.apache.http.HttpRequest) -> sendRequestHeader
    java.net.InetAddress getLocalAddress() -> getLocalAddress
    int getLocalPort() -> getLocalPort
    java.net.InetAddress getRemoteAddress() -> getRemoteAddress
    int getRemotePort() -> getRemotePort
    boolean isSecure() -> isSecure
    javax.net.ssl.SSLSession getSSLSession() -> getSSLSession
    void markReusable() -> markReusable
    void unmarkReusable() -> unmarkReusable
    boolean isMarkedReusable() -> isMarkedReusable
    void setIdleDuration(long,java.util.concurrent.TimeUnit) -> setIdleDuration
    void releaseConnection() -> releaseConnection
    void abortConnection() -> abortConnection
    java.lang.Object getAttribute(java.lang.String) -> getAttribute
    java.lang.Object removeAttribute(java.lang.String) -> removeAttribute
    void setAttribute(java.lang.String,java.lang.Object) -> setAttribute
org.apache.http.impl.conn.AbstractPoolEntry -> org.apache.http.impl.conn.AbstractPoolEntry:
    org.apache.http.conn.ClientConnectionOperator connOperator -> connOperator
    org.apache.http.conn.OperatedClientConnection connection -> connection
    org.apache.http.conn.routing.HttpRoute route -> route
    java.lang.Object state -> state
    org.apache.http.conn.routing.RouteTracker tracker -> tracker
    java.lang.Object getState() -> getState
    void setState(java.lang.Object) -> setState
    void open(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams) -> open
    void tunnelTarget(boolean,org.apache.http.params.HttpParams) -> tunnelTarget
    void tunnelProxy(org.apache.http.HttpHost,boolean,org.apache.http.params.HttpParams) -> tunnelProxy
    void layerProtocol(org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams) -> layerProtocol
    void shutdownEntry() -> shutdownEntry
org.apache.http.impl.conn.AbstractPooledConnAdapter -> org.apache.http.impl.conn.AbstractPooledConnAdapter:
    org.apache.http.impl.conn.AbstractPoolEntry poolEntry -> poolEntry
    org.apache.http.impl.conn.AbstractPoolEntry getPoolEntry() -> getPoolEntry
    void assertValid(org.apache.http.impl.conn.AbstractPoolEntry) -> assertValid
    void assertAttached() -> assertAttached
    void detach() -> detach
    org.apache.http.conn.routing.HttpRoute getRoute() -> getRoute
    void open(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams) -> open
    void tunnelTarget(boolean,org.apache.http.params.HttpParams) -> tunnelTarget
    void tunnelProxy(org.apache.http.HttpHost,boolean,org.apache.http.params.HttpParams) -> tunnelProxy
    void layerProtocol(org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams) -> layerProtocol
    void close() -> close
    void shutdown() -> shutdown
    java.lang.Object getState() -> getState
    void setState(java.lang.Object) -> setState
org.apache.http.impl.conn.BasicClientConnectionManager -> org.apache.http.impl.conn.BasicClientConnectionManager:
    org.apache.commons.logging.Log log -> log
    java.util.concurrent.atomic.AtomicLong COUNTER -> COUNTER
    java.lang.String MISUSE_MESSAGE -> MISUSE_MESSAGE
    org.apache.http.conn.scheme.SchemeRegistry schemeRegistry -> schemeRegistry
    org.apache.http.conn.ClientConnectionOperator connOperator -> connOperator
    org.apache.http.impl.conn.HttpPoolEntry poolEntry -> poolEntry
    org.apache.http.impl.conn.ManagedClientConnectionImpl conn -> conn
    boolean shutdown -> shutdown
    void finalize() -> finalize
    org.apache.http.conn.scheme.SchemeRegistry getSchemeRegistry() -> getSchemeRegistry
    org.apache.http.conn.ClientConnectionOperator createConnectionOperator(org.apache.http.conn.scheme.SchemeRegistry) -> createConnectionOperator
    org.apache.http.conn.ClientConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object) -> requestConnection
    void assertNotShutdown() -> assertNotShutdown
    org.apache.http.conn.ManagedClientConnection getConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object) -> getConnection
    void shutdownConnection(org.apache.http.HttpClientConnection) -> shutdownConnection
    void releaseConnection(org.apache.http.conn.ManagedClientConnection,long,java.util.concurrent.TimeUnit) -> releaseConnection
    void closeExpiredConnections() -> closeExpiredConnections
    void closeIdleConnections(long,java.util.concurrent.TimeUnit) -> closeIdleConnections
    void shutdown() -> shutdown
org.apache.http.impl.conn.BasicClientConnectionManager$1 -> org.apache.http.impl.conn.BasicClientConnectionManager$1:
    org.apache.http.conn.routing.HttpRoute val$route -> a
    java.lang.Object val$state -> b
    org.apache.http.impl.conn.BasicClientConnectionManager this$0 -> c
    void abortRequest() -> abortRequest
    org.apache.http.conn.ManagedClientConnection getConnection(long,java.util.concurrent.TimeUnit) -> getConnection
org.apache.http.impl.conn.ConnectionShutdownException -> org.apache.http.impl.conn.ConnectionShutdownException:
    long serialVersionUID -> serialVersionUID
org.apache.http.impl.conn.DefaultClientConnection -> org.apache.http.impl.conn.DefaultClientConnection:
    org.apache.commons.logging.Log log -> log
    org.apache.commons.logging.Log headerLog -> headerLog
    org.apache.commons.logging.Log wireLog -> wireLog
    java.net.Socket socket -> socket
    org.apache.http.HttpHost targetHost -> targetHost
    boolean connSecure -> connSecure
    boolean shutdown -> shutdown
    java.util.Map attributes -> attributes
    org.apache.http.HttpHost getTargetHost() -> getTargetHost
    boolean isSecure() -> isSecure
    java.net.Socket getSocket() -> getSocket
    void opening(java.net.Socket,org.apache.http.HttpHost) -> opening
    void openCompleted(boolean,org.apache.http.params.HttpParams) -> openCompleted
    void shutdown() -> shutdown
    void close() -> close
    org.apache.http.io.SessionInputBuffer createSessionInputBuffer(java.net.Socket,int,org.apache.http.params.HttpParams) -> createSessionInputBuffer
    org.apache.http.io.SessionOutputBuffer createSessionOutputBuffer(java.net.Socket,int,org.apache.http.params.HttpParams) -> createSessionOutputBuffer
    org.apache.http.io.HttpMessageParser createResponseParser(org.apache.http.io.SessionInputBuffer,org.apache.http.HttpResponseFactory,org.apache.http.params.HttpParams) -> createResponseParser
    void update(java.net.Socket,org.apache.http.HttpHost,boolean,org.apache.http.params.HttpParams) -> update
    org.apache.http.HttpResponse receiveResponseHeader() -> receiveResponseHeader
    void sendRequestHeader(org.apache.http.HttpRequest) -> sendRequestHeader
    java.lang.Object getAttribute(java.lang.String) -> getAttribute
    java.lang.Object removeAttribute(java.lang.String) -> removeAttribute
    void setAttribute(java.lang.String,java.lang.Object) -> setAttribute
org.apache.http.impl.conn.DefaultClientConnectionOperator -> org.apache.http.impl.conn.DefaultClientConnectionOperator:
    org.apache.commons.logging.Log log -> log
    org.apache.http.conn.scheme.SchemeRegistry schemeRegistry -> schemeRegistry
    org.apache.http.conn.DnsResolver dnsResolver -> dnsResolver
    org.apache.http.conn.OperatedClientConnection createConnection() -> createConnection
    void openConnection(org.apache.http.conn.OperatedClientConnection,org.apache.http.HttpHost,java.net.InetAddress,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams) -> openConnection
    void updateSecureConnection(org.apache.http.conn.OperatedClientConnection,org.apache.http.HttpHost,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams) -> updateSecureConnection
    void prepareSocket(java.net.Socket,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams) -> prepareSocket
    java.net.InetAddress[] resolveHostname(java.lang.String) -> resolveHostname
org.apache.http.impl.conn.DefaultHttpResponseParser -> org.apache.http.impl.conn.DefaultHttpResponseParser:
    org.apache.commons.logging.Log log -> log
    org.apache.http.HttpResponseFactory responseFactory -> responseFactory
    org.apache.http.util.CharArrayBuffer lineBuf -> lineBuf
    org.apache.http.HttpResponse parseHead(org.apache.http.io.SessionInputBuffer) -> parseHead
    boolean reject(org.apache.http.util.CharArrayBuffer,int) -> reject
    org.apache.http.HttpMessage parseHead(org.apache.http.io.SessionInputBuffer) -> parseHead
org.apache.http.impl.conn.DefaultHttpRoutePlanner -> org.apache.http.impl.conn.DefaultHttpRoutePlanner:
    org.apache.http.conn.scheme.SchemeRegistry schemeRegistry -> schemeRegistry
    org.apache.http.conn.routing.HttpRoute determineRoute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> determineRoute
org.apache.http.impl.conn.DefaultResponseParser -> org.apache.http.impl.conn.DefaultResponseParser:
    org.apache.commons.logging.Log log -> log
    org.apache.http.HttpResponseFactory responseFactory -> responseFactory
    org.apache.http.util.CharArrayBuffer lineBuf -> lineBuf
    int maxGarbageLines -> maxGarbageLines
    int getMaxGarbageLines(org.apache.http.params.HttpParams) -> getMaxGarbageLines
    org.apache.http.HttpMessage parseHead(org.apache.http.io.SessionInputBuffer) -> parseHead
org.apache.http.impl.conn.HttpConnPool -> org.apache.http.impl.conn.HttpConnPool:
    java.util.concurrent.atomic.AtomicLong COUNTER -> a
    org.apache.commons.logging.Log log -> b
    long timeToLive -> c
    java.util.concurrent.TimeUnit tunit -> d
org.apache.http.impl.conn.HttpConnPool$InternalConnFactory -> org.apache.http.impl.conn.HttpConnPool$InternalConnFactory:
    org.apache.http.conn.ClientConnectionOperator connOperator -> a
org.apache.http.impl.conn.HttpPoolEntry -> org.apache.http.impl.conn.HttpPoolEntry:
    org.apache.commons.logging.Log log -> a
    org.apache.http.conn.routing.RouteTracker tracker -> b
    boolean isExpired(long) -> a
    org.apache.http.conn.routing.RouteTracker getTracker() -> a
    org.apache.http.conn.routing.HttpRoute getPlannedRoute() -> b
    org.apache.http.conn.routing.HttpRoute getEffectiveRoute() -> c
    boolean isClosed() -> d
    void close() -> e
org.apache.http.impl.conn.IdleConnectionHandler -> org.apache.http.impl.conn.IdleConnectionHandler:
    org.apache.commons.logging.Log log -> log
    java.util.Map connectionToTimes -> connectionToTimes
    void add(org.apache.http.HttpConnection,long,java.util.concurrent.TimeUnit) -> add
    boolean remove(org.apache.http.HttpConnection) -> remove
    void removeAll() -> removeAll
    void closeIdleConnections(long) -> closeIdleConnections
    void closeExpiredConnections() -> closeExpiredConnections
org.apache.http.impl.conn.IdleConnectionHandler$TimeValues -> org.apache.http.impl.conn.IdleConnectionHandler$TimeValues:
    long timeAdded -> a
    long timeExpires -> b
    long access$000(org.apache.http.impl.conn.IdleConnectionHandler$TimeValues) -> a
    long access$100(org.apache.http.impl.conn.IdleConnectionHandler$TimeValues) -> b
org.apache.http.impl.conn.InMemoryDnsResolver -> org.apache.http.impl.conn.InMemoryDnsResolver:
    org.apache.commons.logging.Log log -> log
    java.util.Map dnsMap -> dnsMap
    void add(java.lang.String,java.net.InetAddress[]) -> add
    java.net.InetAddress[] resolve(java.lang.String) -> resolve
org.apache.http.impl.conn.LoggingSessionInputBuffer -> org.apache.http.impl.conn.LoggingSessionInputBuffer:
    org.apache.http.io.SessionInputBuffer in -> in
    org.apache.http.io.EofSensor eofSensor -> eofSensor
    org.apache.http.impl.conn.Wire wire -> wire
    java.lang.String charset -> charset
    boolean isDataAvailable(int) -> isDataAvailable
    int read(byte[],int,int) -> read
    int read() -> read
    int read(byte[]) -> read
    java.lang.String readLine() -> readLine
    int readLine(org.apache.http.util.CharArrayBuffer) -> readLine
    org.apache.http.io.HttpTransportMetrics getMetrics() -> getMetrics
    boolean isEof() -> isEof
org.apache.http.impl.conn.LoggingSessionOutputBuffer -> org.apache.http.impl.conn.LoggingSessionOutputBuffer:
    org.apache.http.io.SessionOutputBuffer out -> out
    org.apache.http.impl.conn.Wire wire -> wire
    java.lang.String charset -> charset
    void write(byte[],int,int) -> write
    void write(int) -> write
    void write(byte[]) -> write
    void flush() -> flush
    void writeLine(org.apache.http.util.CharArrayBuffer) -> writeLine
    void writeLine(java.lang.String) -> writeLine
    org.apache.http.io.HttpTransportMetrics getMetrics() -> getMetrics
org.apache.http.impl.conn.ManagedClientConnectionImpl -> org.apache.http.impl.conn.ManagedClientConnectionImpl:
    org.apache.http.conn.ClientConnectionManager manager -> a
    org.apache.http.conn.ClientConnectionOperator operator -> b
    org.apache.http.impl.conn.HttpPoolEntry poolEntry -> c
    boolean reusable -> d
    long duration -> e
    org.apache.http.impl.conn.HttpPoolEntry getPoolEntry() -> a
    org.apache.http.impl.conn.HttpPoolEntry detach() -> b
    org.apache.http.conn.ClientConnectionManager getManager() -> c
    org.apache.http.conn.OperatedClientConnection getConnection() -> d
    org.apache.http.conn.OperatedClientConnection ensureConnection() -> e
    org.apache.http.impl.conn.HttpPoolEntry ensurePoolEntry() -> f
    void close() -> close
    void shutdown() -> shutdown
    boolean isOpen() -> isOpen
    boolean isStale() -> isStale
    void setSocketTimeout(int) -> setSocketTimeout
    int getSocketTimeout() -> getSocketTimeout
    org.apache.http.HttpConnectionMetrics getMetrics() -> getMetrics
    void flush() -> flush
    boolean isResponseAvailable(int) -> isResponseAvailable
    void receiveResponseEntity(org.apache.http.HttpResponse) -> receiveResponseEntity
    org.apache.http.HttpResponse receiveResponseHeader() -> receiveResponseHeader
    void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest) -> sendRequestEntity
    void sendRequestHeader(org.apache.http.HttpRequest) -> sendRequestHeader
    java.net.InetAddress getLocalAddress() -> getLocalAddress
    int getLocalPort() -> getLocalPort
    java.net.InetAddress getRemoteAddress() -> getRemoteAddress
    int getRemotePort() -> getRemotePort
    boolean isSecure() -> isSecure
    javax.net.ssl.SSLSession getSSLSession() -> getSSLSession
    org.apache.http.conn.routing.HttpRoute getRoute() -> getRoute
    void open(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams) -> open
    void tunnelTarget(boolean,org.apache.http.params.HttpParams) -> tunnelTarget
    void tunnelProxy(org.apache.http.HttpHost,boolean,org.apache.http.params.HttpParams) -> tunnelProxy
    void layerProtocol(org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams) -> layerProtocol
    java.lang.Object getState() -> getState
    void setState(java.lang.Object) -> setState
    void markReusable() -> markReusable
    void unmarkReusable() -> unmarkReusable
    boolean isMarkedReusable() -> isMarkedReusable
    void setIdleDuration(long,java.util.concurrent.TimeUnit) -> setIdleDuration
    void releaseConnection() -> releaseConnection
    void abortConnection() -> abortConnection
org.apache.http.impl.conn.PoolingClientConnectionManager -> org.apache.http.impl.conn.PoolingClientConnectionManager:
    org.apache.commons.logging.Log log -> log
    org.apache.http.conn.scheme.SchemeRegistry schemeRegistry -> schemeRegistry
    org.apache.http.impl.conn.HttpConnPool pool -> pool
    org.apache.http.conn.ClientConnectionOperator operator -> operator
    org.apache.http.conn.DnsResolver dnsResolver -> dnsResolver
    void finalize() -> finalize
    org.apache.http.conn.ClientConnectionOperator createConnectionOperator(org.apache.http.conn.scheme.SchemeRegistry) -> createConnectionOperator
    org.apache.http.conn.scheme.SchemeRegistry getSchemeRegistry() -> getSchemeRegistry
    java.lang.String format(org.apache.http.conn.routing.HttpRoute,java.lang.Object) -> format
    java.lang.String formatStats(org.apache.http.conn.routing.HttpRoute) -> formatStats
    java.lang.String format(org.apache.http.impl.conn.HttpPoolEntry) -> format
    org.apache.http.conn.ClientConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object) -> requestConnection
    org.apache.http.conn.ManagedClientConnection leaseConnection(java.util.concurrent.Future,long,java.util.concurrent.TimeUnit) -> leaseConnection
    void releaseConnection(org.apache.http.conn.ManagedClientConnection,long,java.util.concurrent.TimeUnit) -> releaseConnection
    void shutdown() -> shutdown
    void closeIdleConnections(long,java.util.concurrent.TimeUnit) -> closeIdleConnections
    void closeExpiredConnections() -> closeExpiredConnections
    int getMaxTotal() -> getMaxTotal
    void setMaxTotal(int) -> setMaxTotal
    int getDefaultMaxPerRoute() -> getDefaultMaxPerRoute
    void setDefaultMaxPerRoute(int) -> setDefaultMaxPerRoute
    int getMaxPerRoute(org.apache.http.conn.routing.HttpRoute) -> getMaxPerRoute
    void setMaxPerRoute(org.apache.http.conn.routing.HttpRoute,int) -> setMaxPerRoute
    org.apache.http.pool.PoolStats getTotalStats() -> getTotalStats
    org.apache.http.pool.PoolStats getStats(org.apache.http.conn.routing.HttpRoute) -> getStats
    org.apache.http.pool.PoolStats getStats(java.lang.Object) -> getStats
    int getMaxPerRoute(java.lang.Object) -> getMaxPerRoute
    void setMaxPerRoute(java.lang.Object,int) -> setMaxPerRoute
org.apache.http.impl.conn.PoolingClientConnectionManager$1 -> org.apache.http.impl.conn.PoolingClientConnectionManager$1:
    java.util.concurrent.Future val$future -> a
    org.apache.http.impl.conn.PoolingClientConnectionManager this$0 -> b
    void abortRequest() -> abortRequest
    org.apache.http.conn.ManagedClientConnection getConnection(long,java.util.concurrent.TimeUnit) -> getConnection
org.apache.http.impl.conn.ProxySelectorRoutePlanner -> org.apache.http.impl.conn.ProxySelectorRoutePlanner:
    org.apache.http.conn.scheme.SchemeRegistry schemeRegistry -> schemeRegistry
    java.net.ProxySelector proxySelector -> proxySelector
    java.net.ProxySelector getProxySelector() -> getProxySelector
    void setProxySelector(java.net.ProxySelector) -> setProxySelector
    org.apache.http.conn.routing.HttpRoute determineRoute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> determineRoute
    org.apache.http.HttpHost determineProxy(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> determineProxy
    java.lang.String getHost(java.net.InetSocketAddress) -> getHost
    java.net.Proxy chooseProxy(java.util.List,org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> chooseProxy
org.apache.http.impl.conn.ProxySelectorRoutePlanner$1 -> org.apache.http.impl.conn.ProxySelectorRoutePlanner$1:
    int[] $SwitchMap$java$net$Proxy$Type -> a
org.apache.http.impl.conn.SchemeRegistryFactory -> org.apache.http.impl.conn.SchemeRegistryFactory:
    org.apache.http.conn.scheme.SchemeRegistry createDefault() -> createDefault
    org.apache.http.conn.scheme.SchemeRegistry createSystemDefault() -> createSystemDefault
org.apache.http.impl.conn.SingleClientConnManager -> org.apache.http.impl.conn.SingleClientConnManager:
    org.apache.commons.logging.Log log -> log
    java.lang.String MISUSE_MESSAGE -> MISUSE_MESSAGE
    org.apache.http.conn.scheme.SchemeRegistry schemeRegistry -> schemeRegistry
    org.apache.http.conn.ClientConnectionOperator connOperator -> connOperator
    boolean alwaysShutDown -> alwaysShutDown
    org.apache.http.impl.conn.SingleClientConnManager$PoolEntry uniquePoolEntry -> uniquePoolEntry
    org.apache.http.impl.conn.SingleClientConnManager$ConnAdapter managedConn -> managedConn
    long lastReleaseTime -> lastReleaseTime
    long connectionExpiresTime -> connectionExpiresTime
    boolean isShutDown -> isShutDown
    void finalize() -> finalize
    org.apache.http.conn.scheme.SchemeRegistry getSchemeRegistry() -> getSchemeRegistry
    org.apache.http.conn.ClientConnectionOperator createConnectionOperator(org.apache.http.conn.scheme.SchemeRegistry) -> createConnectionOperator
    void assertStillUp() -> assertStillUp
    org.apache.http.conn.ClientConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object) -> requestConnection
    org.apache.http.conn.ManagedClientConnection getConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object) -> getConnection
    void releaseConnection(org.apache.http.conn.ManagedClientConnection,long,java.util.concurrent.TimeUnit) -> releaseConnection
    void closeExpiredConnections() -> closeExpiredConnections
    void closeIdleConnections(long,java.util.concurrent.TimeUnit) -> closeIdleConnections
    void shutdown() -> shutdown
    void revokeConnection() -> revokeConnection
org.apache.http.impl.conn.SingleClientConnManager$1 -> org.apache.http.impl.conn.SingleClientConnManager$1:
    org.apache.http.conn.routing.HttpRoute val$route -> a
    java.lang.Object val$state -> b
    org.apache.http.impl.conn.SingleClientConnManager this$0 -> c
    void abortRequest() -> abortRequest
    org.apache.http.conn.ManagedClientConnection getConnection(long,java.util.concurrent.TimeUnit) -> getConnection
org.apache.http.impl.conn.SingleClientConnManager$ConnAdapter -> org.apache.http.impl.conn.SingleClientConnManager$ConnAdapter:
    org.apache.http.impl.conn.SingleClientConnManager this$0 -> this$0
org.apache.http.impl.conn.SingleClientConnManager$PoolEntry -> org.apache.http.impl.conn.SingleClientConnManager$PoolEntry:
    org.apache.http.impl.conn.SingleClientConnManager this$0 -> this$0
    void close() -> close
    void shutdown() -> shutdown
org.apache.http.impl.conn.SystemDefaultDnsResolver -> org.apache.http.impl.conn.SystemDefaultDnsResolver:
    java.net.InetAddress[] resolve(java.lang.String) -> resolve
org.apache.http.impl.conn.Wire -> org.apache.http.impl.conn.Wire:
    org.apache.commons.logging.Log log -> log
    void wire(java.lang.String,java.io.InputStream) -> wire
    boolean enabled() -> enabled
    void output(java.io.InputStream) -> output
    void input(java.io.InputStream) -> input
    void output(byte[],int,int) -> output
    void input(byte[],int,int) -> input
    void output(byte[]) -> output
    void input(byte[]) -> input
    void output(int) -> output
    void input(int) -> input
    void output(java.lang.String) -> output
    void input(java.lang.String) -> input
org.apache.http.impl.conn.tsccm.AbstractConnPool -> org.apache.http.impl.conn.tsccm.AbstractConnPool:
    org.apache.commons.logging.Log log -> log
    java.util.concurrent.locks.Lock poolLock -> poolLock
    java.util.Set leasedConnections -> leasedConnections
    int numConnections -> numConnections
    boolean isShutDown -> isShutDown
    java.util.Set issuedConnections -> issuedConnections
    java.lang.ref.ReferenceQueue refQueue -> refQueue
    org.apache.http.impl.conn.IdleConnectionHandler idleConnHandler -> idleConnHandler
    void enableConnectionGC() -> enableConnectionGC
    org.apache.http.impl.conn.tsccm.BasicPoolEntry getEntry(org.apache.http.conn.routing.HttpRoute,java.lang.Object,long,java.util.concurrent.TimeUnit) -> getEntry
    org.apache.http.impl.conn.tsccm.PoolEntryRequest requestPoolEntry(org.apache.http.conn.routing.HttpRoute,java.lang.Object) -> requestPoolEntry
    void freeEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry,boolean,long,java.util.concurrent.TimeUnit) -> freeEntry
    void handleReference(java.lang.ref.Reference) -> handleReference
    void handleLostEntry(org.apache.http.conn.routing.HttpRoute) -> handleLostEntry
    void closeIdleConnections(long,java.util.concurrent.TimeUnit) -> closeIdleConnections
    void closeExpiredConnections() -> closeExpiredConnections
    void deleteClosedConnections() -> deleteClosedConnections
    void shutdown() -> shutdown
    void closeConnection(org.apache.http.conn.OperatedClientConnection) -> closeConnection
org.apache.http.impl.conn.tsccm.BasicPoolEntry -> org.apache.http.impl.conn.tsccm.BasicPoolEntry:
    long created -> created
    long updated -> updated
    long validUntil -> validUntil
    long expiry -> expiry
    org.apache.http.conn.OperatedClientConnection getConnection() -> getConnection
    org.apache.http.conn.routing.HttpRoute getPlannedRoute() -> getPlannedRoute
    org.apache.http.impl.conn.tsccm.BasicPoolEntryRef getWeakRef() -> getWeakRef
    void shutdownEntry() -> shutdownEntry
    long getCreated() -> getCreated
    long getUpdated() -> getUpdated
    long getExpiry() -> getExpiry
    long getValidUntil() -> getValidUntil
    void updateExpiry(long,java.util.concurrent.TimeUnit) -> updateExpiry
    boolean isExpired(long) -> isExpired
org.apache.http.impl.conn.tsccm.BasicPoolEntryRef -> org.apache.http.impl.conn.tsccm.BasicPoolEntryRef:
    org.apache.http.conn.routing.HttpRoute route -> route
    org.apache.http.conn.routing.HttpRoute getRoute() -> getRoute
org.apache.http.impl.conn.tsccm.BasicPooledConnAdapter -> org.apache.http.impl.conn.tsccm.BasicPooledConnAdapter:
    org.apache.http.conn.ClientConnectionManager getManager() -> getManager
    org.apache.http.impl.conn.AbstractPoolEntry getPoolEntry() -> getPoolEntry
    void detach() -> detach
org.apache.http.impl.conn.tsccm.ConnPoolByRoute -> org.apache.http.impl.conn.tsccm.ConnPoolByRoute:
    org.apache.commons.logging.Log log -> log
    java.util.concurrent.locks.Lock poolLock -> poolLock
    org.apache.http.conn.ClientConnectionOperator operator -> operator
    org.apache.http.conn.params.ConnPerRoute connPerRoute -> connPerRoute
    java.util.Set leasedConnections -> leasedConnections
    java.util.Queue freeConnections -> freeConnections
    java.util.Queue waitingThreads -> waitingThreads
    java.util.Map routeToPool -> routeToPool
    long connTTL -> connTTL
    java.util.concurrent.TimeUnit connTTLTimeUnit -> connTTLTimeUnit
    boolean shutdown -> shutdown
    int maxTotalConnections -> maxTotalConnections
    int numConnections -> numConnections
    java.util.concurrent.locks.Lock getLock() -> getLock
    java.util.Queue createFreeConnQueue() -> createFreeConnQueue
    java.util.Queue createWaitingThreadQueue() -> createWaitingThreadQueue
    java.util.Map createRouteToPoolMap() -> createRouteToPoolMap
    org.apache.http.impl.conn.tsccm.RouteSpecificPool newRouteSpecificPool(org.apache.http.conn.routing.HttpRoute) -> newRouteSpecificPool
    org.apache.http.impl.conn.tsccm.WaitingThread newWaitingThread(java.util.concurrent.locks.Condition,org.apache.http.impl.conn.tsccm.RouteSpecificPool) -> newWaitingThread
    void closeConnection(org.apache.http.impl.conn.tsccm.BasicPoolEntry) -> closeConnection
    org.apache.http.impl.conn.tsccm.RouteSpecificPool getRoutePool(org.apache.http.conn.routing.HttpRoute,boolean) -> getRoutePool
    int getConnectionsInPool(org.apache.http.conn.routing.HttpRoute) -> getConnectionsInPool
    int getConnectionsInPool() -> getConnectionsInPool
    org.apache.http.impl.conn.tsccm.PoolEntryRequest requestPoolEntry(org.apache.http.conn.routing.HttpRoute,java.lang.Object) -> requestPoolEntry
    org.apache.http.impl.conn.tsccm.BasicPoolEntry getEntryBlocking(org.apache.http.conn.routing.HttpRoute,java.lang.Object,long,java.util.concurrent.TimeUnit,org.apache.http.impl.conn.tsccm.WaitingThreadAborter) -> getEntryBlocking
    void freeEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry,boolean,long,java.util.concurrent.TimeUnit) -> freeEntry
    org.apache.http.impl.conn.tsccm.BasicPoolEntry getFreeEntry(org.apache.http.impl.conn.tsccm.RouteSpecificPool,java.lang.Object) -> getFreeEntry
    org.apache.http.impl.conn.tsccm.BasicPoolEntry createEntry(org.apache.http.impl.conn.tsccm.RouteSpecificPool,org.apache.http.conn.ClientConnectionOperator) -> createEntry
    void deleteEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry) -> deleteEntry
    void deleteLeastUsedEntry() -> deleteLeastUsedEntry
    void handleLostEntry(org.apache.http.conn.routing.HttpRoute) -> handleLostEntry
    void notifyWaitingThread(org.apache.http.impl.conn.tsccm.RouteSpecificPool) -> notifyWaitingThread
    void deleteClosedConnections() -> deleteClosedConnections
    void closeIdleConnections(long,java.util.concurrent.TimeUnit) -> closeIdleConnections
    void closeExpiredConnections() -> closeExpiredConnections
    void shutdown() -> shutdown
    void setMaxTotalConnections(int) -> setMaxTotalConnections
    int getMaxTotalConnections() -> getMaxTotalConnections
    java.util.concurrent.locks.Lock access$000(org.apache.http.impl.conn.tsccm.ConnPoolByRoute) -> access$000
org.apache.http.impl.conn.tsccm.ConnPoolByRoute$1 -> org.apache.http.impl.conn.tsccm.ConnPoolByRoute$1:
    org.apache.http.impl.conn.tsccm.WaitingThreadAborter val$aborter -> a
    org.apache.http.conn.routing.HttpRoute val$route -> b
    java.lang.Object val$state -> c
    org.apache.http.impl.conn.tsccm.ConnPoolByRoute this$0 -> d
    void abortRequest() -> abortRequest
    org.apache.http.impl.conn.tsccm.BasicPoolEntry getPoolEntry(long,java.util.concurrent.TimeUnit) -> getPoolEntry
org.apache.http.impl.conn.tsccm.PoolEntryRequest -> org.apache.http.impl.conn.tsccm.PoolEntryRequest:
    org.apache.http.impl.conn.tsccm.BasicPoolEntry getPoolEntry(long,java.util.concurrent.TimeUnit) -> getPoolEntry
    void abortRequest() -> abortRequest
org.apache.http.impl.conn.tsccm.RouteSpecificPool -> org.apache.http.impl.conn.tsccm.RouteSpecificPool:
    org.apache.commons.logging.Log log -> log
    org.apache.http.conn.routing.HttpRoute route -> route
    int maxEntries -> maxEntries
    org.apache.http.conn.params.ConnPerRoute connPerRoute -> connPerRoute
    java.util.LinkedList freeEntries -> freeEntries
    java.util.Queue waitingThreads -> waitingThreads
    int numEntries -> numEntries
    org.apache.http.conn.routing.HttpRoute getRoute() -> getRoute
    int getMaxEntries() -> getMaxEntries
    boolean isUnused() -> isUnused
    int getCapacity() -> getCapacity
    int getEntryCount() -> getEntryCount
    org.apache.http.impl.conn.tsccm.BasicPoolEntry allocEntry(java.lang.Object) -> allocEntry
    void freeEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry) -> freeEntry
    void createdEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry) -> createdEntry
    boolean deleteEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry) -> deleteEntry
    void dropEntry() -> dropEntry
    void queueThread(org.apache.http.impl.conn.tsccm.WaitingThread) -> queueThread
    boolean hasThread() -> hasThread
    org.apache.http.impl.conn.tsccm.WaitingThread nextThread() -> nextThread
    void removeThread(org.apache.http.impl.conn.tsccm.WaitingThread) -> removeThread
org.apache.http.impl.conn.tsccm.RouteSpecificPool$1 -> org.apache.http.impl.conn.tsccm.RouteSpecificPool$1:
    org.apache.http.impl.conn.tsccm.RouteSpecificPool this$0 -> a
    int getMaxForRoute(org.apache.http.conn.routing.HttpRoute) -> getMaxForRoute
org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager -> org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager:
    org.apache.commons.logging.Log log -> log
    org.apache.http.conn.scheme.SchemeRegistry schemeRegistry -> schemeRegistry
    org.apache.http.impl.conn.tsccm.AbstractConnPool connectionPool -> connectionPool
    org.apache.http.impl.conn.tsccm.ConnPoolByRoute pool -> pool
    org.apache.http.conn.ClientConnectionOperator connOperator -> connOperator
    org.apache.http.conn.params.ConnPerRouteBean connPerRoute -> connPerRoute
    void finalize() -> finalize
    org.apache.http.impl.conn.tsccm.AbstractConnPool createConnectionPool(org.apache.http.params.HttpParams) -> createConnectionPool
    org.apache.http.impl.conn.tsccm.ConnPoolByRoute createConnectionPool(long,java.util.concurrent.TimeUnit) -> createConnectionPool
    org.apache.http.conn.ClientConnectionOperator createConnectionOperator(org.apache.http.conn.scheme.SchemeRegistry) -> createConnectionOperator
    org.apache.http.conn.scheme.SchemeRegistry getSchemeRegistry() -> getSchemeRegistry
    org.apache.http.conn.ClientConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object) -> requestConnection
    void releaseConnection(org.apache.http.conn.ManagedClientConnection,long,java.util.concurrent.TimeUnit) -> releaseConnection
    void shutdown() -> shutdown
    int getConnectionsInPool(org.apache.http.conn.routing.HttpRoute) -> getConnectionsInPool
    int getConnectionsInPool() -> getConnectionsInPool
    void closeIdleConnections(long,java.util.concurrent.TimeUnit) -> closeIdleConnections
    void closeExpiredConnections() -> closeExpiredConnections
    int getMaxTotal() -> getMaxTotal
    void setMaxTotal(int) -> setMaxTotal
    int getDefaultMaxPerRoute() -> getDefaultMaxPerRoute
    void setDefaultMaxPerRoute(int) -> setDefaultMaxPerRoute
    int getMaxForRoute(org.apache.http.conn.routing.HttpRoute) -> getMaxForRoute
    void setMaxForRoute(org.apache.http.conn.routing.HttpRoute,int) -> setMaxForRoute
    org.apache.commons.logging.Log access$000(org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager) -> access$000
org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager$1 -> org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager$1:
    org.apache.http.impl.conn.tsccm.PoolEntryRequest val$poolRequest -> a
    org.apache.http.conn.routing.HttpRoute val$route -> b
    org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager this$0 -> c
    void abortRequest() -> abortRequest
    org.apache.http.conn.ManagedClientConnection getConnection(long,java.util.concurrent.TimeUnit) -> getConnection
org.apache.http.impl.conn.tsccm.WaitingThread -> org.apache.http.impl.conn.tsccm.WaitingThread:
    java.util.concurrent.locks.Condition cond -> cond
    org.apache.http.impl.conn.tsccm.RouteSpecificPool pool -> pool
    java.lang.Thread waiter -> waiter
    boolean aborted -> aborted
    java.util.concurrent.locks.Condition getCondition() -> getCondition
    org.apache.http.impl.conn.tsccm.RouteSpecificPool getPool() -> getPool
    java.lang.Thread getThread() -> getThread
    boolean await(java.util.Date) -> await
    void wakeup() -> wakeup
    void interrupt() -> interrupt
org.apache.http.impl.conn.tsccm.WaitingThreadAborter -> org.apache.http.impl.conn.tsccm.WaitingThreadAborter:
    org.apache.http.impl.conn.tsccm.WaitingThread waitingThread -> waitingThread
    boolean aborted -> aborted
    void abort() -> abort
    void setWaitingThread(org.apache.http.impl.conn.tsccm.WaitingThread) -> setWaitingThread
org.apache.http.impl.cookie.AbstractCookieAttributeHandler -> org.apache.http.impl.cookie.AbstractCookieAttributeHandler:
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
org.apache.http.impl.cookie.AbstractCookieSpec -> org.apache.http.impl.cookie.AbstractCookieSpec:
    java.util.Map attribHandlerMap -> attribHandlerMap
    void registerAttribHandler(java.lang.String,org.apache.http.cookie.CookieAttributeHandler) -> registerAttribHandler
    org.apache.http.cookie.CookieAttributeHandler findAttribHandler(java.lang.String) -> findAttribHandler
    org.apache.http.cookie.CookieAttributeHandler getAttribHandler(java.lang.String) -> getAttribHandler
    java.util.Collection getAttribHandlers() -> getAttribHandlers
org.apache.http.impl.cookie.BasicClientCookie -> org.apache.http.impl.cookie.BasicClientCookie:
    long serialVersionUID -> serialVersionUID
    java.lang.String name -> name
    java.util.Map attribs -> attribs
    java.lang.String value -> value
    java.lang.String cookieComment -> cookieComment
    java.lang.String cookieDomain -> cookieDomain
    java.util.Date cookieExpiryDate -> cookieExpiryDate
    java.lang.String cookiePath -> cookiePath
    boolean isSecure -> isSecure
    int cookieVersion -> cookieVersion
    java.lang.String getName() -> getName
    java.lang.String getValue() -> getValue
    void setValue(java.lang.String) -> setValue
    java.lang.String getComment() -> getComment
    void setComment(java.lang.String) -> setComment
    java.lang.String getCommentURL() -> getCommentURL
    java.util.Date getExpiryDate() -> getExpiryDate
    void setExpiryDate(java.util.Date) -> setExpiryDate
    boolean isPersistent() -> isPersistent
    java.lang.String getDomain() -> getDomain
    void setDomain(java.lang.String) -> setDomain
    java.lang.String getPath() -> getPath
    void setPath(java.lang.String) -> setPath
    boolean isSecure() -> isSecure
    void setSecure(boolean) -> setSecure
    int[] getPorts() -> getPorts
    int getVersion() -> getVersion
    void setVersion(int) -> setVersion
    boolean isExpired(java.util.Date) -> isExpired
    void setAttribute(java.lang.String,java.lang.String) -> setAttribute
    java.lang.String getAttribute(java.lang.String) -> getAttribute
    boolean containsAttribute(java.lang.String) -> containsAttribute
    java.lang.Object clone() -> clone
    java.lang.String toString() -> toString
org.apache.http.impl.cookie.BasicClientCookie2 -> org.apache.http.impl.cookie.BasicClientCookie2:
    long serialVersionUID -> serialVersionUID
    java.lang.String commentURL -> commentURL
    int[] ports -> ports
    boolean discard -> discard
    int[] getPorts() -> getPorts
    void setPorts(int[]) -> setPorts
    java.lang.String getCommentURL() -> getCommentURL
    void setCommentURL(java.lang.String) -> setCommentURL
    void setDiscard(boolean) -> setDiscard
    boolean isPersistent() -> isPersistent
    boolean isExpired(java.util.Date) -> isExpired
    java.lang.Object clone() -> clone
org.apache.http.impl.cookie.BasicCommentHandler -> org.apache.http.impl.cookie.BasicCommentHandler:
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
org.apache.http.impl.cookie.BasicDomainHandler -> org.apache.http.impl.cookie.BasicDomainHandler:
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
org.apache.http.impl.cookie.BasicExpiresHandler -> org.apache.http.impl.cookie.BasicExpiresHandler:
    java.lang.String[] datepatterns -> datepatterns
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
org.apache.http.impl.cookie.BasicMaxAgeHandler -> org.apache.http.impl.cookie.BasicMaxAgeHandler:
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
org.apache.http.impl.cookie.BasicPathHandler -> org.apache.http.impl.cookie.BasicPathHandler:
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
org.apache.http.impl.cookie.BasicSecureHandler -> org.apache.http.impl.cookie.BasicSecureHandler:
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
org.apache.http.impl.cookie.BestMatchSpec -> org.apache.http.impl.cookie.BestMatchSpec:
    java.lang.String[] datepatterns -> datepatterns
    boolean oneHeader -> oneHeader
    org.apache.http.impl.cookie.RFC2965Spec strict -> strict
    org.apache.http.impl.cookie.RFC2109Spec obsoleteStrict -> obsoleteStrict
    org.apache.http.impl.cookie.BrowserCompatSpec compat -> compat
    org.apache.http.impl.cookie.RFC2965Spec getStrict() -> getStrict
    org.apache.http.impl.cookie.RFC2109Spec getObsoleteStrict() -> getObsoleteStrict
    org.apache.http.impl.cookie.BrowserCompatSpec getCompat() -> getCompat
    java.util.List parse(org.apache.http.Header,org.apache.http.cookie.CookieOrigin) -> parse
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
    java.util.List formatCookies(java.util.List) -> formatCookies
    int getVersion() -> getVersion
    org.apache.http.Header getVersionHeader() -> getVersionHeader
    java.lang.String toString() -> toString
org.apache.http.impl.cookie.BestMatchSpecFactory -> org.apache.http.impl.cookie.BestMatchSpecFactory:
    org.apache.http.cookie.CookieSpec newInstance(org.apache.http.params.HttpParams) -> newInstance
org.apache.http.impl.cookie.BrowserCompatSpec -> org.apache.http.impl.cookie.BrowserCompatSpec:
    java.lang.String[] DEFAULT_DATE_PATTERNS -> DEFAULT_DATE_PATTERNS
    java.lang.String[] datepatterns -> datepatterns
    java.util.List parse(org.apache.http.Header,org.apache.http.cookie.CookieOrigin) -> parse
    java.util.List formatCookies(java.util.List) -> formatCookies
    int getVersion() -> getVersion
    org.apache.http.Header getVersionHeader() -> getVersionHeader
    java.lang.String toString() -> toString
org.apache.http.impl.cookie.BrowserCompatSpecFactory -> org.apache.http.impl.cookie.BrowserCompatSpecFactory:
    org.apache.http.cookie.CookieSpec newInstance(org.apache.http.params.HttpParams) -> newInstance
org.apache.http.impl.cookie.BrowserCompatVersionAttributeHandler -> org.apache.http.impl.cookie.BrowserCompatVersionAttributeHandler:
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
org.apache.http.impl.cookie.CookieSpecBase -> org.apache.http.impl.cookie.CookieSpecBase:
    java.lang.String getDefaultPath(org.apache.http.cookie.CookieOrigin) -> getDefaultPath
    java.lang.String getDefaultDomain(org.apache.http.cookie.CookieOrigin) -> getDefaultDomain
    java.util.List parse(org.apache.http.HeaderElement[],org.apache.http.cookie.CookieOrigin) -> parse
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
org.apache.http.impl.cookie.DateParseException -> org.apache.http.impl.cookie.DateParseException:
    long serialVersionUID -> serialVersionUID
org.apache.http.impl.cookie.DateUtils -> org.apache.http.impl.cookie.DateUtils:
    java.lang.String PATTERN_RFC1123 -> PATTERN_RFC1123
    java.lang.String PATTERN_RFC1036 -> PATTERN_RFC1036
    java.lang.String PATTERN_ASCTIME -> PATTERN_ASCTIME
    java.lang.String[] DEFAULT_PATTERNS -> DEFAULT_PATTERNS
    java.util.Date DEFAULT_TWO_DIGIT_YEAR_START -> DEFAULT_TWO_DIGIT_YEAR_START
    java.util.TimeZone GMT -> GMT
    java.util.Date parseDate(java.lang.String) -> parseDate
    java.util.Date parseDate(java.lang.String,java.lang.String[]) -> parseDate
    java.util.Date parseDate(java.lang.String,java.lang.String[],java.util.Date) -> parseDate
    java.lang.String formatDate(java.util.Date) -> formatDate
    java.lang.String formatDate(java.util.Date,java.lang.String) -> formatDate
    void clearThreadLocal() -> clearThreadLocal
org.apache.http.impl.cookie.DateUtils$DateFormatHolder -> org.apache.http.impl.cookie.DateUtils$DateFormatHolder:
    java.lang.ThreadLocal THREADLOCAL_FORMATS -> a
    java.text.SimpleDateFormat formatFor(java.lang.String) -> a
    void clearThreadLocal() -> a
org.apache.http.impl.cookie.DateUtils$DateFormatHolder$1 -> org.apache.http.impl.cookie.DateUtils$DateFormatHolder$1:
    java.lang.ref.SoftReference initialValue() -> a
    java.lang.Object initialValue() -> initialValue
org.apache.http.impl.cookie.IgnoreSpec -> org.apache.http.impl.cookie.IgnoreSpec:
    int getVersion() -> getVersion
    java.util.List parse(org.apache.http.Header,org.apache.http.cookie.CookieOrigin) -> parse
    java.util.List formatCookies(java.util.List) -> formatCookies
    org.apache.http.Header getVersionHeader() -> getVersionHeader
org.apache.http.impl.cookie.IgnoreSpecFactory -> org.apache.http.impl.cookie.IgnoreSpecFactory:
    org.apache.http.cookie.CookieSpec newInstance(org.apache.http.params.HttpParams) -> newInstance
org.apache.http.impl.cookie.NetscapeDomainHandler -> org.apache.http.impl.cookie.NetscapeDomainHandler:
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean isSpecialDomain(java.lang.String) -> isSpecialDomain
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
org.apache.http.impl.cookie.NetscapeDraftHeaderParser -> org.apache.http.impl.cookie.NetscapeDraftHeaderParser:
    org.apache.http.impl.cookie.NetscapeDraftHeaderParser DEFAULT -> DEFAULT
    org.apache.http.HeaderElement parseHeader(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor) -> parseHeader
    org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor) -> parseNameValuePair
org.apache.http.impl.cookie.NetscapeDraftSpec -> org.apache.http.impl.cookie.NetscapeDraftSpec:
    java.lang.String EXPIRES_PATTERN -> EXPIRES_PATTERN
    java.lang.String[] datepatterns -> datepatterns
    java.util.List parse(org.apache.http.Header,org.apache.http.cookie.CookieOrigin) -> parse
    java.util.List formatCookies(java.util.List) -> formatCookies
    int getVersion() -> getVersion
    org.apache.http.Header getVersionHeader() -> getVersionHeader
    java.lang.String toString() -> toString
org.apache.http.impl.cookie.NetscapeDraftSpecFactory -> org.apache.http.impl.cookie.NetscapeDraftSpecFactory:
    org.apache.http.cookie.CookieSpec newInstance(org.apache.http.params.HttpParams) -> newInstance
org.apache.http.impl.cookie.PublicSuffixFilter -> org.apache.http.impl.cookie.PublicSuffixFilter:
    org.apache.http.cookie.CookieAttributeHandler wrapped -> wrapped
    java.util.Set exceptions -> exceptions
    java.util.Set suffixes -> suffixes
    void setPublicSuffixes(java.util.Collection) -> setPublicSuffixes
    void setExceptions(java.util.Collection) -> setExceptions
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean isForPublicSuffix(org.apache.http.cookie.Cookie) -> isForPublicSuffix
org.apache.http.impl.cookie.PublicSuffixListParser -> org.apache.http.impl.cookie.PublicSuffixListParser:
    int MAX_LINE_LEN -> MAX_LINE_LEN
    org.apache.http.impl.cookie.PublicSuffixFilter filter -> filter
    void parse(java.io.Reader) -> parse
    boolean readLine(java.io.Reader,java.lang.StringBuilder) -> readLine
org.apache.http.impl.cookie.RFC2109DomainHandler -> org.apache.http.impl.cookie.RFC2109DomainHandler:
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
org.apache.http.impl.cookie.RFC2109Spec -> org.apache.http.impl.cookie.RFC2109Spec:
    org.apache.http.cookie.CookiePathComparator PATH_COMPARATOR -> PATH_COMPARATOR
    java.lang.String[] DATE_PATTERNS -> DATE_PATTERNS
    java.lang.String[] datepatterns -> datepatterns
    boolean oneHeader -> oneHeader
    java.util.List parse(org.apache.http.Header,org.apache.http.cookie.CookieOrigin) -> parse
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    java.util.List formatCookies(java.util.List) -> formatCookies
    java.util.List doFormatOneHeader(java.util.List) -> doFormatOneHeader
    java.util.List doFormatManyHeaders(java.util.List) -> doFormatManyHeaders
    void formatParamAsVer(org.apache.http.util.CharArrayBuffer,java.lang.String,java.lang.String,int) -> formatParamAsVer
    void formatCookieAsVer(org.apache.http.util.CharArrayBuffer,org.apache.http.cookie.Cookie,int) -> formatCookieAsVer
    int getVersion() -> getVersion
    org.apache.http.Header getVersionHeader() -> getVersionHeader
    java.lang.String toString() -> toString
org.apache.http.impl.cookie.RFC2109SpecFactory -> org.apache.http.impl.cookie.RFC2109SpecFactory:
    org.apache.http.cookie.CookieSpec newInstance(org.apache.http.params.HttpParams) -> newInstance
org.apache.http.impl.cookie.RFC2109VersionHandler -> org.apache.http.impl.cookie.RFC2109VersionHandler:
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
org.apache.http.impl.cookie.RFC2965CommentUrlAttributeHandler -> org.apache.http.impl.cookie.RFC2965CommentUrlAttributeHandler:
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
org.apache.http.impl.cookie.RFC2965DiscardAttributeHandler -> org.apache.http.impl.cookie.RFC2965DiscardAttributeHandler:
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
org.apache.http.impl.cookie.RFC2965DomainAttributeHandler -> org.apache.http.impl.cookie.RFC2965DomainAttributeHandler:
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
    boolean domainMatch(java.lang.String,java.lang.String) -> domainMatch
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
org.apache.http.impl.cookie.RFC2965PortAttributeHandler -> org.apache.http.impl.cookie.RFC2965PortAttributeHandler:
    int[] parsePortAttribute(java.lang.String) -> parsePortAttribute
    boolean portMatch(int,int[]) -> portMatch
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
org.apache.http.impl.cookie.RFC2965Spec -> org.apache.http.impl.cookie.RFC2965Spec:
    java.util.List parse(org.apache.http.Header,org.apache.http.cookie.CookieOrigin) -> parse
    java.util.List parse(org.apache.http.HeaderElement[],org.apache.http.cookie.CookieOrigin) -> parse
    java.util.List createCookies(org.apache.http.HeaderElement[],org.apache.http.cookie.CookieOrigin) -> createCookies
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
    void formatCookieAsVer(org.apache.http.util.CharArrayBuffer,org.apache.http.cookie.Cookie,int) -> formatCookieAsVer
    org.apache.http.cookie.CookieOrigin adjustEffectiveHost(org.apache.http.cookie.CookieOrigin) -> adjustEffectiveHost
    int getVersion() -> getVersion
    org.apache.http.Header getVersionHeader() -> getVersionHeader
    java.lang.String toString() -> toString
org.apache.http.impl.cookie.RFC2965SpecFactory -> org.apache.http.impl.cookie.RFC2965SpecFactory:
    org.apache.http.cookie.CookieSpec newInstance(org.apache.http.params.HttpParams) -> newInstance
org.apache.http.impl.cookie.RFC2965VersionAttributeHandler -> org.apache.http.impl.cookie.RFC2965VersionAttributeHandler:
    void parse(org.apache.http.cookie.SetCookie,java.lang.String) -> parse
    void validate(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> validate
    boolean match(org.apache.http.cookie.Cookie,org.apache.http.cookie.CookieOrigin) -> match
